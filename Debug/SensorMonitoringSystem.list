
SensorMonitoringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800df60  0800df60  0000ef60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e38c  0800e38c  000102d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e38c  0800e38c  0000f38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e394  0800e394  000102d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e394  0800e394  0000f394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e398  0800e398  0000f398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0800e39c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed0  200002d4  0800e670  000102d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021a4  0800e670  000111a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174e8  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c02  00000000  00000000  000277ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6f  00000000  00000000  0002c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b76  00000000  00000000  0002d53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198d2  00000000  00000000  000530b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d164c  00000000  00000000  0006c987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dfd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb8  00000000  00000000  0013e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00143fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800df44 	.word	0x0800df44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	0800df44 	.word	0x0800df44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <ADXL345_Init>:
 *  Created on: Sep 26, 2025
 *      Author: johnnario
 */
#include "ADXL345.h"

uint8_t ADXL345_Init( ADXL345 *dev, I2C_HandleTypeDef *i2cHandle ){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]

	/* Set Struct Parameters */
	dev->i2cHandle		= i2cHandle;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0]	= 0.0f;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
	dev->acc_mps2[1]	= 0.0f;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
	dev->acc_mps2[2]	= 0.0f;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]

	/* Initialize DMA Members */
	dev->dmaComplete	= 1;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	729a      	strb	r2, [r3, #10]
	memset(dev->rawData, 0,sizeof(dev->rawData));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2206      	movs	r2, #6
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00a fee8 	bl	800bd20 <memset>

	/* Store number of transaction errors */
	uint8_t errNum = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check device ID
	 */
	uint8_t regData;
	status = ADXL345_ReadRegister( dev, ADXL345_DEVICE_ID_AD, &regData);
 8000f54:	f107 030d 	add.w	r3, r7, #13
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f892 	bl	8001086 <ADXL345_ReadRegister>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK);
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf14      	ite	ne
 8000f6c:	2301      	movne	r3, #1
 8000f6e:	2300      	moveq	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4413      	add	r3, r2
 8000f78:	73fb      	strb	r3, [r7, #15]

	if( regData !=  ADXL345_DEVICE_ID ) {
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	2be5      	cmp	r3, #229	@ 0xe5
 8000f7e:	d001      	beq.n	8000f84 <ADXL345_Init+0x70>

		return 255;
 8000f80:	23ff      	movs	r3, #255	@ 0xff
 8000f82:	e07c      	b.n	800107e <ADXL345_Init+0x16a>
	}

	/*
	 * Set the data format (DATA_FORMAT)
	 */
	regData = 0x00; // set to +-2g
 8000f84:	2300      	movs	r3, #0
 8000f86:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_DATA_FORMAT, &regData);
 8000f88:	f107 030d 	add.w	r3, r7, #13
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2131      	movs	r1, #49	@ 0x31
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f893 	bl	80010bc <ADXL345_WriteRegister>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK);
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	4413      	add	r3, r2
 8000fac:	73fb      	strb	r3, [r7, #15]
	/*
	 * Set output data rate (BW_RATE)
	 */
	regData = 0x0A;
 8000fae:	230a      	movs	r3, #10
 8000fb0:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_BW_RATE, &regData );
 8000fb2:	f107 030d 	add.w	r3, r7, #13
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	212c      	movs	r1, #44	@ 0x2c
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f87e 	bl	80010bc <ADXL345_WriteRegister>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Set all interrupts to INT1 (INT_MAP)
	 */
	regData = 0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_INT_MAP, &regData );
 8000fdc:	f107 030d 	add.w	r3, r7, #13
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	212f      	movs	r1, #47	@ 0x2f
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f869 	bl	80010bc <ADXL345_WriteRegister>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	4413      	add	r3, r2
 8001000:	73fb      	strb	r3, [r7, #15]

	/*
	 * Enable DATA_READY interrupt (INT_ENABLE)
	 */
	regData = 0x80;
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_INT_ENABLE, &regData);
 8001006:	f107 030d 	add.w	r3, r7, #13
 800100a:	461a      	mov	r2, r3
 800100c:	212e      	movs	r1, #46	@ 0x2e
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f854 	bl	80010bc <ADXL345_WriteRegister>
 8001014:	4603      	mov	r3, r0
 8001016:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf14      	ite	ne
 800101e:	2301      	movne	r3, #1
 8001020:	2300      	moveq	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	4413      	add	r3, r2
 800102a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Set to measurement mode (POWER_CTL)
	 */

	regData = 0x08;
 800102c:	2308      	movs	r3, #8
 800102e:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_POWER_CTL, &regData );
 8001030:	f107 030d 	add.w	r3, r7, #13
 8001034:	461a      	mov	r2, r3
 8001036:	212d      	movs	r1, #45	@ 0x2d
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f83f 	bl	80010bc <ADXL345_WriteRegister>
 800103e:	4603      	mov	r3, r0
 8001040:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	4413      	add	r3, r2
 8001054:	73fb      	strb	r3, [r7, #15]

	// **CRITICAL: Read INT_SOURCE to clear any pending interrupts**
	status = ADXL345_ReadRegister(dev, ADXL345_REG_INT_SOURCE, &regData);
 8001056:	f107 030d 	add.w	r3, r7, #13
 800105a:	461a      	mov	r2, r3
 800105c:	2130      	movs	r1, #48	@ 0x30
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f811 	bl	8001086 <ADXL345_ReadRegister>
 8001064:	4603      	mov	r3, r0
 8001066:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4413      	add	r3, r2
 800107a:	73fb      	strb	r3, [r7, #15]





	return status;
 800107c:	7bbb      	ldrb	r3, [r7, #14]

}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <ADXL345_ReadRegister>:


HAL_StatusTypeDef ADXL345_ReadRegister( ADXL345 *dev, uint8_t reg, uint8_t *data ){
 8001086:	b580      	push	{r7, lr}
 8001088:	b088      	sub	sp, #32
 800108a:	af04      	add	r7, sp, #16
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	460b      	mov	r3, r1
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	b29a      	uxth	r2, r3
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	21a6      	movs	r1, #166	@ 0xa6
 80010ae:	f001 ff69 	bl	8002f84 <HAL_I2C_Mem_Read>
 80010b2:	4603      	mov	r3, r0

}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <ADXL345_WriteRegister>:

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);

}

HAL_StatusTypeDef ADXL345_WriteRegister( ADXL345 *dev, uint8_t reg, uint8_t *data){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	460b      	mov	r3, r1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2301      	movs	r3, #1
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	21a6      	movs	r1, #166	@ 0xa6
 80010e4:	f001 fe54 	bl	8002d90 <HAL_I2C_Mem_Write>
 80010e8:	4603      	mov	r3, r0

}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <ADXL345_ReadAccelerometerDMA>:

/*
 *Non-blocking DMA Read
 */
HAL_StatusTypeDef ADXL345_ReadAccelerometerDMA( ADXL345 *dev ){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af02      	add	r7, sp, #8
 80010f8:	6078      	str	r0, [r7, #4]

	if(dev->dmaComplete == 0){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7a9b      	ldrb	r3, [r3, #10]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <ADXL345_ReadAccelerometerDMA+0x16>
		return HAL_BUSY;
 8001104:	2302      	movs	r3, #2
 8001106:	e00f      	b.n	8001128 <ADXL345_ReadAccelerometerDMA+0x36>
	}

	dev->dmaComplete = 0;	//Mark DMA is busy
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	729a      	strb	r2, [r3, #10]

	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, ADXL345_I2C_ADDR, ADXL345_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, dev->rawData, 6);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3304      	adds	r3, #4
 8001116:	2206      	movs	r2, #6
 8001118:	9201      	str	r2, [sp, #4]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2232      	movs	r2, #50	@ 0x32
 8001120:	21a6      	movs	r1, #166	@ 0xa6
 8001122:	f002 f961 	bl	80033e8 <HAL_I2C_Mem_Read_DMA>
 8001126:	4603      	mov	r3, r0

}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <ADXL345_ProcessDMAData>:

void ADXL345_ProcessDMAData( ADXL345 *dev){
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	/* Only process data if DMA has completed */
	if(dev->dmaComplete == 0){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7a9b      	ldrb	r3, [r3, #10]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d045      	beq.n	80011ce <ADXL345_ProcessDMAData+0x9e>
		return;
	}

	int16_t x_raw = (int16_t)((dev->rawData[1] << 8) | dev->rawData[0]);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	b21b      	sxth	r3, r3
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	81fb      	strh	r3, [r7, #14]
	int16_t y_raw = (int16_t)((dev->rawData[3] << 8) | dev->rawData[2]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	79db      	ldrb	r3, [r3, #7]
 800115a:	b21b      	sxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	799b      	ldrb	r3, [r3, #6]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	81bb      	strh	r3, [r7, #12]
	int16_t z_raw = (int16_t)((dev->rawData[5] << 8) | dev->rawData[4]);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7a5b      	ldrb	r3, [r3, #9]
 800116e:	b21b      	sxth	r3, r3
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7a1b      	ldrb	r3, [r3, #8]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	817b      	strh	r3, [r7, #10]

	/* 256.0 LSB/g for +-2g range */
	dev->acc_mps2[0] =  x_raw /256.0f;
 800117e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80011dc <ADXL345_ProcessDMAData+0xac>
 800118e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->acc_mps2[1] =  y_raw /256.0f;
 8001198:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80011dc <ADXL345_ProcessDMAData+0xac>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->acc_mps2[2] =  z_raw /256.0f;
 80011b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80011dc <ADXL345_ProcessDMAData+0xac>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a05 	vstr	s15, [r3, #20]
 80011cc:	e000      	b.n	80011d0 <ADXL345_ProcessDMAData+0xa0>
		return;
 80011ce:	bf00      	nop
}
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	43800000 	.word	0x43800000

080011e0 <UART_Init>:
 *  Created on: Sep 26, 2025
 *      Author: johnnario
 */
#include "UART.h"

void UART_Init(UART *dev, UART_HandleTypeDef *handle){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	dev->uartHandle = handle;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <UART_Print_String>:

HAL_StatusTypeDef UART_Print_String(UART *dev, char *str){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(dev->uartHandle, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f7ff f850 	bl	80002b0 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	4620      	mov	r0, r4
 800121c:	f005 fb62 	bl	80068e4 <HAL_UART_Transmit>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
	...

0800122c <UART_Print_Float>:

HAL_StatusTypeDef UART_Print_Float(UART *dev, float value, uint8_t decimals){
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	ed87 0a02 	vstr	s0, [r7, #8]
 8001238:	460b      	mov	r3, r1
 800123a:	71fb      	strb	r3, [r7, #7]
	char buffer[32];

	if (decimals == 1) {
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10a      	bne.n	8001258 <UART_Print_Float+0x2c>
		sprintf(buffer, "%.1f", value);
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f7ff f9a0 	bl	8000588 <__aeabi_f2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	f107 0010 	add.w	r0, r7, #16
 8001250:	491a      	ldr	r1, [pc, #104]	@ (80012bc <UART_Print_Float+0x90>)
 8001252:	f00a fc81 	bl	800bb58 <siprintf>
 8001256:	e025      	b.n	80012a4 <UART_Print_Float+0x78>
	} else if (decimals == 2) {
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d10a      	bne.n	8001274 <UART_Print_Float+0x48>
		sprintf(buffer, "%.2f", value);
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	f107 0010 	add.w	r0, r7, #16
 800126c:	4914      	ldr	r1, [pc, #80]	@ (80012c0 <UART_Print_Float+0x94>)
 800126e:	f00a fc73 	bl	800bb58 <siprintf>
 8001272:	e017      	b.n	80012a4 <UART_Print_Float+0x78>
	} else if (decimals == 3) {
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d10a      	bne.n	8001290 <UART_Print_Float+0x64>
		sprintf(buffer, "%.3f", value);
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f7ff f984 	bl	8000588 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	f107 0010 	add.w	r0, r7, #16
 8001288:	490e      	ldr	r1, [pc, #56]	@ (80012c4 <UART_Print_Float+0x98>)
 800128a:	f00a fc65 	bl	800bb58 <siprintf>
 800128e:	e009      	b.n	80012a4 <UART_Print_Float+0x78>
	} else {
		sprintf(buffer, "%.2f", value); // default
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f7ff f979 	bl	8000588 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	f107 0010 	add.w	r0, r7, #16
 800129e:	4908      	ldr	r1, [pc, #32]	@ (80012c0 <UART_Print_Float+0x94>)
 80012a0:	f00a fc5a 	bl	800bb58 <siprintf>
	}

	return UART_Print_String(dev, buffer);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ffa6 	bl	80011fc <UART_Print_String>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3730      	adds	r7, #48	@ 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800df60 	.word	0x0800df60
 80012c0:	0800df68 	.word	0x0800df68
 80012c4:	0800df70 	.word	0x0800df70

080012c8 <UART_Print_NewLine>:
	char buffer[16];
	sprintf(buffer, "%ld", value);
	return UART_Print_String(dev, buffer);
}

HAL_StatusTypeDef UART_Print_NewLine(UART *dev){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	return UART_Print_String(dev, "\r\n");
 80012d0:	4904      	ldr	r1, [pc, #16]	@ (80012e4 <UART_Print_NewLine+0x1c>)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff92 	bl	80011fc <UART_Print_String>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	0800df7c 	.word	0x0800df7c

080012e8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/*
 * On DATA_READY interrupt from ADXL345 start DMA read
 */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin ){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == ACC_INT_Pin ){
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d104      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0x1a>

		if(ADXL345_ReadAccelerometerDMA(&acc) == HAL_OK){
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x20>)
 80012fa:	f7ff fefa 	bl	80010f2 <ADXL345_ReadAccelerometerDMA>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
			 * DMA busy, Shouldn't happen
			 */
			return HAL_ERROR;
		}
	}
}
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000044c 	.word	0x2000044c

0800130c <HAL_I2C_MemRxCpltCallback>:

/*
 * I2C DMA Receive complete callback
 */
void HAL_I2C_MemRxCpltCallback( I2C_HandleTypeDef *hi2c ){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	/*
	 * Set flag to tell new data is ready
	 */
	if ( hi2c->Instance == I2C1 ){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	@ (8001338 <HAL_I2C_MemRxCpltCallback+0x2c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d105      	bne.n	800132a <HAL_I2C_MemRxCpltCallback+0x1e>
		acc.dmaComplete = 1;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_I2C_MemRxCpltCallback+0x30>)
 8001320:	2201      	movs	r2, #1
 8001322:	729a      	strb	r2, [r3, #10]
		accDataReady = 1;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_I2C_MemRxCpltCallback+0x34>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
	}

}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	2000044c 	.word	0x2000044c
 8001340:	20000468 	.word	0x20000468

08001344 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

    if (hi2c->Instance == I2C1) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <HAL_I2C_ErrorCallback+0x2c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d105      	bne.n	8001362 <HAL_I2C_ErrorCallback+0x1e>

        /* Reset flags to allow retry */
        acc.dmaComplete = 1;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_I2C_ErrorCallback+0x30>)
 8001358:	2201      	movs	r2, #1
 800135a:	729a      	strb	r2, [r3, #10]
        accDataReady = 0;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_I2C_ErrorCallback+0x34>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

    }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40005400 	.word	0x40005400
 8001374:	2000044c 	.word	0x2000044c
 8001378:	20000468 	.word	0x20000468

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001380:	b09a      	sub	sp, #104	@ 0x68
 8001382:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fc9a 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f8ac 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f000 f996 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001390:	f000 f96c 	bl	800166c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001394:	f000 f940 	bl	8001618 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001398:	f000 f910 	bl	80015bc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800139c:	f009 f9c0 	bl	800a720 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /*Initialize UART*/
  UART_Init( &uart_print, &huart2 );
 80013a0:	4945      	ldr	r1, [pc, #276]	@ (80014b8 <main+0x13c>)
 80013a2:	4846      	ldr	r0, [pc, #280]	@ (80014bc <main+0x140>)
 80013a4:	f7ff ff1c 	bl	80011e0 <UART_Init>

  /* Initialize Accelerometer */
  ADXL345_Init( &acc, &hi2c1 );
 80013a8:	4945      	ldr	r1, [pc, #276]	@ (80014c0 <main+0x144>)
 80013aa:	4846      	ldr	r0, [pc, #280]	@ (80014c4 <main+0x148>)
 80013ac:	f7ff fdb2 	bl	8000f14 <ADXL345_Init>

  char usbBuf[64];

  /* Timers */
  uint32_t timerLED = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t timerLog = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(accDataReady){
 80013b8:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <main+0x14c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d033      	beq.n	8001428 <main+0xac>
		  ADXL345_ProcessDMAData( &acc );
 80013c0:	4840      	ldr	r0, [pc, #256]	@ (80014c4 <main+0x148>)
 80013c2:	f7ff feb5 	bl	8001130 <ADXL345_ProcessDMAData>

		  UART_Print_String(&uart_print, "X: ");
 80013c6:	4941      	ldr	r1, [pc, #260]	@ (80014cc <main+0x150>)
 80013c8:	483c      	ldr	r0, [pc, #240]	@ (80014bc <main+0x140>)
 80013ca:	f7ff ff17 	bl	80011fc <UART_Print_String>
		  UART_Print_Float(&uart_print, acc.acc_mps2[0], 3);
 80013ce:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <main+0x148>)
 80013d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80013d4:	2103      	movs	r1, #3
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	4838      	ldr	r0, [pc, #224]	@ (80014bc <main+0x140>)
 80013dc:	f7ff ff26 	bl	800122c <UART_Print_Float>
		  UART_Print_String(&uart_print, " g, Y: ");
 80013e0:	493b      	ldr	r1, [pc, #236]	@ (80014d0 <main+0x154>)
 80013e2:	4836      	ldr	r0, [pc, #216]	@ (80014bc <main+0x140>)
 80013e4:	f7ff ff0a 	bl	80011fc <UART_Print_String>
		  UART_Print_Float(&uart_print, acc.acc_mps2[1], 3);
 80013e8:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <main+0x148>)
 80013ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80013ee:	2103      	movs	r1, #3
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	4831      	ldr	r0, [pc, #196]	@ (80014bc <main+0x140>)
 80013f6:	f7ff ff19 	bl	800122c <UART_Print_Float>
		  UART_Print_String(&uart_print, " g, Z: ");
 80013fa:	4936      	ldr	r1, [pc, #216]	@ (80014d4 <main+0x158>)
 80013fc:	482f      	ldr	r0, [pc, #188]	@ (80014bc <main+0x140>)
 80013fe:	f7ff fefd 	bl	80011fc <UART_Print_String>
		  UART_Print_Float(&uart_print, acc.acc_mps2[2], 3);
 8001402:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <main+0x148>)
 8001404:	edd3 7a05 	vldr	s15, [r3, #20]
 8001408:	2103      	movs	r1, #3
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	482b      	ldr	r0, [pc, #172]	@ (80014bc <main+0x140>)
 8001410:	f7ff ff0c 	bl	800122c <UART_Print_Float>
		  UART_Print_String(&uart_print, " g");
 8001414:	4930      	ldr	r1, [pc, #192]	@ (80014d8 <main+0x15c>)
 8001416:	4829      	ldr	r0, [pc, #164]	@ (80014bc <main+0x140>)
 8001418:	f7ff fef0 	bl	80011fc <UART_Print_String>
		  UART_Print_NewLine(&uart_print);
 800141c:	4827      	ldr	r0, [pc, #156]	@ (80014bc <main+0x140>)
 800141e:	f7ff ff53 	bl	80012c8 <UART_Print_NewLine>

		  accDataReady = 0;
 8001422:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <main+0x14c>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
	  }

	  if( (HAL_GetTick() - timerLog) >= SAMPLE_TIME_LED_MS ){
 8001428:	f000 fcae 	bl	8001d88 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001436:	d32d      	bcc.n	8001494 <main+0x118>

		  uint8_t usbBufLen =snprintf(usbBuf, 64, "%.2f, %.2f, %.2f\r\n", acc.acc_mps2[0], acc.acc_mps2[1], acc.acc_mps2[2]);
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <main+0x148>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f8a3 	bl	8000588 <__aeabi_f2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <main+0x148>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	4680      	mov	r8, r0
 8001452:	4689      	mov	r9, r1
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <main+0x148>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f895 	bl	8000588 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	1d38      	adds	r0, r7, #4
 8001464:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001468:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800146c:	e9cd 4500 	strd	r4, r5, [sp]
 8001470:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <main+0x160>)
 8001472:	2140      	movs	r1, #64	@ 0x40
 8001474:	f00a fb3a 	bl	800baec <sniprintf>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		  CDC_Transmit_FS( (uint8_t *) usbBuf, usbBufLen );
 800147e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001482:	b29a      	uxth	r2, r3
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f009 fa07 	bl	800a89c <CDC_Transmit_FS>

		  timerLog += SAMPLE_TIME_LOG_MS;
 800148e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001490:	3364      	adds	r3, #100	@ 0x64
 8001492:	64bb      	str	r3, [r7, #72]	@ 0x48
	  }


	  /* Toggle LED */
	  if ( (HAL_GetTick() - timerLED) >= SAMPLE_TIME_LED_MS ){
 8001494:	f000 fc78 	bl	8001d88 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014a2:	d389      	bcc.n	80013b8 <main+0x3c>

		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80014a4:	2120      	movs	r1, #32
 80014a6:	480e      	ldr	r0, [pc, #56]	@ (80014e0 <main+0x164>)
 80014a8:	f001 fafb 	bl	8002aa2 <HAL_GPIO_TogglePin>

		  timerLED += SAMPLE_TIME_LED_MS;
 80014ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if(accDataReady){
 80014b4:	e780      	b.n	80013b8 <main+0x3c>
 80014b6:	bf00      	nop
 80014b8:	20000404 	.word	0x20000404
 80014bc:	20000464 	.word	0x20000464
 80014c0:	200002f0 	.word	0x200002f0
 80014c4:	2000044c 	.word	0x2000044c
 80014c8:	20000468 	.word	0x20000468
 80014cc:	0800df80 	.word	0x0800df80
 80014d0:	0800df84 	.word	0x0800df84
 80014d4:	0800df8c 	.word	0x0800df8c
 80014d8:	0800df94 	.word	0x0800df94
 80014dc:	0800df98 	.word	0x0800df98
 80014e0:	40020000 	.word	0x40020000

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	@ 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2234      	movs	r2, #52	@ 0x34
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00a fc14 	bl	800bd20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <SystemClock_Config+0xd0>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	4a28      	ldr	r2, [pc, #160]	@ (80015b4 <SystemClock_Config+0xd0>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	@ 0x40
 8001518:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <SystemClock_Config+0xd0>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <SystemClock_Config+0xd4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001530:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <SystemClock_Config+0xd4>)
 8001532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <SystemClock_Config+0xd4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001544:	2301      	movs	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800154c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001556:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001558:	2304      	movs	r3, #4
 800155a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800155c:	2348      	movs	r3, #72	@ 0x48
 800155e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001560:	2302      	movs	r3, #2
 8001562:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001564:	2303      	movs	r3, #3
 8001566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fec9 	bl	8006308 <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800157c:	f000 f922 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2302      	movs	r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f83f 	bl	8005620 <HAL_RCC_ClockConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015a8:	f000 f90c 	bl	80017c4 <Error_Handler>
  }
}
 80015ac:	bf00      	nop
 80015ae:	3750      	adds	r7, #80	@ 0x50
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000

080015bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C1_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C1_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C1_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C1_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C1_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C1_Init+0x50>)
 80015fa:	f001 fa85 	bl	8002b08 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 f8de 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002f0 	.word	0x200002f0
 8001610:	40005400 	.word	0x40005400
 8001614:	000186a0 	.word	0x000186a0

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f005 f8f8 	bl	8006844 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f8b3 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000404 	.word	0x20000404
 8001668:	40004400 	.word	0x40004400

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_DMA_Init+0x4c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <MX_DMA_Init+0x4c>)
 800167c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <MX_DMA_Init+0x4c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	200b      	movs	r0, #11
 8001694:	f000 fc83 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001698:	200b      	movs	r0, #11
 800169a:	f000 fc9c 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2011      	movs	r0, #17
 80016a4:	f000 fc7b 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016a8:	2011      	movs	r0, #17
 80016aa:	f000 fc94 	bl	8001fd6 <HAL_NVIC_EnableIRQ>

}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b38      	ldr	r3, [pc, #224]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a37      	ldr	r2, [pc, #220]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a29      	ldr	r2, [pc, #164]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <MX_GPIO_Init+0xfc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	481d      	ldr	r0, [pc, #116]	@ (80017bc <MX_GPIO_Init+0x100>)
 8001748:	f001 f992 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001752:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4817      	ldr	r0, [pc, #92]	@ (80017c0 <MX_GPIO_Init+0x104>)
 8001764:	f000 fff0 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001768:	2302      	movs	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	480f      	ldr	r0, [pc, #60]	@ (80017bc <MX_GPIO_Init+0x100>)
 800177e:	f000 ffe3 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001782:	2320      	movs	r3, #32
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4808      	ldr	r0, [pc, #32]	@ (80017bc <MX_GPIO_Init+0x100>)
 800179a:	f000 ffd5 	bl	8002748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2007      	movs	r0, #7
 80017a4:	f000 fbfb 	bl	8001f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017a8:	2007      	movs	r0, #7
 80017aa:	f000 fc14 	bl	8001fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	@ 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020800 	.word	0x40020800

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <Error_Handler+0x8>

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_MspInit+0x4c>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_MspInit+0x4c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800180e:	2007      	movs	r0, #7
 8001810:	f000 fbba 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a49      	ldr	r2, [pc, #292]	@ (8001964 <HAL_I2C_MspInit+0x144>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 808b 	bne.w	800195a <HAL_I2C_MspInit+0x13a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_I2C_MspInit+0x148>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	4a46      	ldr	r2, [pc, #280]	@ (8001968 <HAL_I2C_MspInit+0x148>)
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	6313      	str	r3, [r2, #48]	@ 0x30
 8001854:	4b44      	ldr	r3, [pc, #272]	@ (8001968 <HAL_I2C_MspInit+0x148>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001860:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001872:	2304      	movs	r3, #4
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	483b      	ldr	r0, [pc, #236]	@ (800196c <HAL_I2C_MspInit+0x14c>)
 800187e:	f000 ff63 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <HAL_I2C_MspInit+0x148>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a37      	ldr	r2, [pc, #220]	@ (8001968 <HAL_I2C_MspInit+0x148>)
 800188c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <HAL_I2C_MspInit+0x148>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800189e:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018a0:	4a34      	ldr	r2, [pc, #208]	@ (8001974 <HAL_I2C_MspInit+0x154>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80018a4:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ac:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018cc:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018d2:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018d8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018e0:	4823      	ldr	r0, [pc, #140]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018e2:	f000 fb93 	bl	800200c <HAL_DMA_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80018ec:	f7ff ff6a 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80018f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <HAL_I2C_MspInit+0x150>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 80018fe:	4a1f      	ldr	r2, [pc, #124]	@ (800197c <HAL_I2C_MspInit+0x15c>)
 8001900:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001908:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 800190c:	2240      	movs	r2, #64	@ 0x40
 800190e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001932:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001936:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800193e:	480e      	ldr	r0, [pc, #56]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001940:	f000 fb64 	bl	800200c <HAL_DMA_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 800194a:	f7ff ff3b 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001952:	635a      	str	r2, [r3, #52]	@ 0x34
 8001954:	4a08      	ldr	r2, [pc, #32]	@ (8001978 <HAL_I2C_MspInit+0x158>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40005400 	.word	0x40005400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400
 8001970:	20000344 	.word	0x20000344
 8001974:	40026010 	.word	0x40026010
 8001978:	200003a4 	.word	0x200003a4
 800197c:	400260a0 	.word	0x400260a0

08001980 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <HAL_UART_MspInit+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_UART_MspInit+0x88>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <HAL_UART_MspInit+0x88>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_UART_MspInit+0x88>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_UART_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	@ (8001a08 <HAL_UART_MspInit+0x88>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_UART_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019da:	230c      	movs	r3, #12
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ea:	2307      	movs	r3, #7
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <HAL_UART_MspInit+0x8c>)
 80019f6:	f000 fea7 	bl	8002748 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004400 	.word	0x40004400
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <NMI_Handler+0x4>

08001a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <MemManage_Handler+0x4>

08001a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f97b 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f001 f830 	bl	8002ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <DMA1_Stream0_IRQHandler+0x10>)
 8001a82:	f000 fbeb 	bl	800225c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000344 	.word	0x20000344

08001a90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <DMA1_Stream6_IRQHandler+0x10>)
 8001a96:	f000 fbe1 	bl	800225c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200003a4 	.word	0x200003a4

08001aa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <OTG_FS_IRQHandler+0x10>)
 8001aaa:	f002 fc66 	bl	800437a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20001954 	.word	0x20001954

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad2:	f00a f92d 	bl	800bd30 <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afa:	bf00      	nop
 8001afc:	e7fd      	b.n	8001afa <_exit+0x12>

08001afe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e00a      	b.n	8001b26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b10:	f3af 8000 	nop.w
 8001b14:	4601      	mov	r1, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf0      	blt.n	8001b10 <_read+0x12>
  }

  return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e009      	b.n	8001b5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60ba      	str	r2, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf1      	blt.n	8001b4a <_write+0x12>
  }
  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_close>:

int _close(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b98:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_isatty>:

int _isatty(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f00a f892 	bl	800bd30 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20020000 	.word	0x20020000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2000046c 	.word	0x2000046c
 8001c40:	200021a8 	.word	0x200021a8

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c6c:	f7ff ffea 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f00a f851 	bl	800bd3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7ff fb6f 	bl	800137c <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001cac:	0800e39c 	.word	0x0800e39c
  ldr r2, =_sbss
 8001cb0:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001cb4:	200021a4 	.word	0x200021a4

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_Init+0x40>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_Init+0x40>)
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <HAL_Init+0x40>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 f94f 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 f808 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7ff fd6e 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_InitTick+0x54>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x58>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f967 	bl	8001ff2 <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d3c:	f000 f92f 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_InitTick+0x5c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000470 	.word	0x20000470

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000470 	.word	0x20000470

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	@ (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	@ (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	@ (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff3e 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff8e 	bl	8001edc <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5d 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff31 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffa2 	bl	8001f44 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff feb6 	bl	8001d88 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e099      	b.n	800215c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002048:	e00f      	b.n	800206a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204a:	f7ff fe9d 	bl	8001d88 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b05      	cmp	r3, #5
 8002056:	d908      	bls.n	800206a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2203      	movs	r2, #3
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e078      	b.n	800215c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e8      	bne.n	800204a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4b38      	ldr	r3, [pc, #224]	@ (8002164 <HAL_DMA_Init+0x158>)
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	4313      	orrs	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d117      	bne.n	800212e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fa9d 	bl	8002650 <DMA_CheckFifoParam>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800212a:	2301      	movs	r3, #1
 800212c:	e016      	b.n	800215c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa54 	bl	80025e4 <DMA_CalcBaseAndBitshift>
 800213c:	4603      	mov	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	223f      	movs	r2, #63	@ 0x3f
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	f010803f 	.word	0xf010803f

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_DMA_Start_IT+0x26>
 800218a:	2302      	movs	r3, #2
 800218c:	e040      	b.n	8002210 <HAL_DMA_Start_IT+0xa8>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d12f      	bne.n	8002202 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f9e6 	bl	8002588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	223f      	movs	r2, #63	@ 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0216 	orr.w	r2, r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0208 	orr.w	r2, r2, #8
 80021ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e005      	b.n	800220e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d004      	beq.n	8002236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00c      	b.n	8002250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2205      	movs	r2, #5
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0201 	bic.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002268:	4b8e      	ldr	r3, [pc, #568]	@ (80024a4 <HAL_DMA_IRQHandler+0x248>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a8e      	ldr	r2, [pc, #568]	@ (80024a8 <HAL_DMA_IRQHandler+0x24c>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	2208      	movs	r2, #8
 8002288:	409a      	lsls	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01a      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	2208      	movs	r2, #8
 80022b6:	409a      	lsls	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d012      	beq.n	80022fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	2201      	movs	r2, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	2204      	movs	r2, #4
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002320:	2204      	movs	r2, #4
 8002322:	409a      	lsls	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	2210      	movs	r2, #16
 800233a:	409a      	lsls	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d043      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03c      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	2210      	movs	r2, #16
 8002358:	409a      	lsls	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d018      	beq.n	800239e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d024      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e01f      	b.n	80023cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01b      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
 800239c:	e016      	b.n	80023cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0208 	bic.w	r2, r2, #8
 80023ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	2220      	movs	r2, #32
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 808f 	beq.w	80024fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8087 	beq.w	80024fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f2:	2220      	movs	r2, #32
 80023f4:	409a      	lsls	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b05      	cmp	r3, #5
 8002404:	d136      	bne.n	8002474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0216 	bic.w	r2, r2, #22
 8002414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <HAL_DMA_IRQHandler+0x1da>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0208 	bic.w	r2, r2, #8
 8002444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244a:	223f      	movs	r2, #63	@ 0x3f
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002466:	2b00      	cmp	r3, #0
 8002468:	d07e      	beq.n	8002568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
        }
        return;
 8002472:	e079      	b.n	8002568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01d      	beq.n	80024be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002494:	2b00      	cmp	r3, #0
 8002496:	d031      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e02c      	b.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000
 80024a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
 80024bc:	e01e      	b.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0210 	bic.w	r2, r2, #16
 80024da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	2b00      	cmp	r3, #0
 8002502:	d032      	beq.n	800256a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d022      	beq.n	8002556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2205      	movs	r2, #5
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3301      	adds	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	d307      	bcc.n	8002544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f2      	bne.n	8002528 <HAL_DMA_IRQHandler+0x2cc>
 8002542:	e000      	b.n	8002546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
 8002566:	e000      	b.n	800256a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002568:	bf00      	nop
    }
  }
}
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b40      	cmp	r3, #64	@ 0x40
 80025b4:	d108      	bne.n	80025c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025c6:	e007      	b.n	80025d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	3b10      	subs	r3, #16
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <DMA_CalcBaseAndBitshift+0x64>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025fe:	4a13      	ldr	r2, [pc, #76]	@ (800264c <DMA_CalcBaseAndBitshift+0x68>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d909      	bls.n	8002626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	1d1a      	adds	r2, r3, #4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	@ 0x58
 8002624:	e007      	b.n	8002636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	aaaaaaab 	.word	0xaaaaaaab
 800264c:	0800e00c 	.word	0x0800e00c

08002650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11f      	bne.n	80026aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d856      	bhi.n	800271e <DMA_CheckFifoParam+0xce>
 8002670:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <DMA_CheckFifoParam+0x28>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002689 	.word	0x08002689
 800267c:	0800269b 	.word	0x0800269b
 8002680:	08002689 	.word	0x08002689
 8002684:	0800271f 	.word	0x0800271f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d046      	beq.n	8002722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e043      	b.n	8002722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026a2:	d140      	bne.n	8002726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e03d      	b.n	8002726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b2:	d121      	bne.n	80026f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d837      	bhi.n	800272a <DMA_CheckFifoParam+0xda>
 80026ba:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <DMA_CheckFifoParam+0x70>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026d7 	.word	0x080026d7
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	080026e9 	.word	0x080026e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      break;
 80026d4:	e030      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d025      	beq.n	800272e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e6:	e022      	b.n	800272e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026f0:	d11f      	bne.n	8002732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026f6:	e01c      	b.n	8002732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d903      	bls.n	8002706 <DMA_CheckFifoParam+0xb6>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d003      	beq.n	800270c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002704:	e018      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      break;
 800270a:	e015      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00e      	beq.n	8002736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e00b      	b.n	8002736 <DMA_CheckFifoParam+0xe6>
      break;
 800271e:	bf00      	nop
 8002720:	e00a      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 8002722:	bf00      	nop
 8002724:	e008      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 8002726:	bf00      	nop
 8002728:	e006      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 800272a:	bf00      	nop
 800272c:	e004      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;   
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
    }
  } 
  
  return status; 
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e165      	b.n	8002a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8154 	bne.w	8002a2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80ae 	beq.w	8002a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028de:	4b5a      	ldr	r3, [pc, #360]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ea:	4a58      	ldr	r2, [pc, #352]	@ (8002a4c <HAL_GPIO_Init+0x304>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4f      	ldr	r2, [pc, #316]	@ (8002a50 <HAL_GPIO_Init+0x308>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d025      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	@ (8002a54 <HAL_GPIO_Init+0x30c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <HAL_GPIO_Init+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	@ (8002a58 <HAL_GPIO_Init+0x310>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d019      	beq.n	800295a <HAL_GPIO_Init+0x212>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	@ (8002a5c <HAL_GPIO_Init+0x314>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	@ (8002a60 <HAL_GPIO_Init+0x318>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00d      	beq.n	8002952 <HAL_GPIO_Init+0x20a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4a      	ldr	r2, [pc, #296]	@ (8002a64 <HAL_GPIO_Init+0x31c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x206>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	@ (8002a68 <HAL_GPIO_Init+0x320>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_GPIO_Init+0x202>
 8002946:	2306      	movs	r3, #6
 8002948:	e00c      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800294a:	2307      	movs	r3, #7
 800294c:	e00a      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800294e:	2305      	movs	r3, #5
 8002950:	e008      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 8002952:	2304      	movs	r3, #4
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 8002962:	2300      	movs	r3, #0
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f002 0203 	and.w	r2, r2, #3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4093      	lsls	r3, r2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002974:	4935      	ldr	r1, [pc, #212]	@ (8002a4c <HAL_GPIO_Init+0x304>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a31      	ldr	r2, [pc, #196]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d6:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a24:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f67f ae96 	bls.w	8002764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	041a      	lsls	r2, r3, #16
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aee:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fbf6 	bl	80012e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40013c00 	.word	0x40013c00

08002b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e12b      	b.n	8002d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe fe76 	bl	8001820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f002 fe4a 	bl	8005804 <HAL_RCC_GetPCLK1Freq>
 8002b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a81      	ldr	r2, [pc, #516]	@ (8002d7c <HAL_I2C_Init+0x274>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d807      	bhi.n	8002b8c <HAL_I2C_Init+0x84>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a80      	ldr	r2, [pc, #512]	@ (8002d80 <HAL_I2C_Init+0x278>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e006      	b.n	8002b9a <HAL_I2C_Init+0x92>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d84 <HAL_I2C_Init+0x27c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	bf94      	ite	ls
 8002b94:	2301      	movls	r3, #1
 8002b96:	2300      	movhi	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0e7      	b.n	8002d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a78      	ldr	r2, [pc, #480]	@ (8002d88 <HAL_I2C_Init+0x280>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0c9b      	lsrs	r3, r3, #18
 8002bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d7c <HAL_I2C_Init+0x274>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d802      	bhi.n	8002bdc <HAL_I2C_Init+0xd4>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	e009      	b.n	8002bf0 <HAL_I2C_Init+0xe8>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	4a69      	ldr	r2, [pc, #420]	@ (8002d8c <HAL_I2C_Init+0x284>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	3301      	adds	r3, #1
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	495c      	ldr	r1, [pc, #368]	@ (8002d7c <HAL_I2C_Init+0x274>)
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d819      	bhi.n	8002c44 <HAL_I2C_Init+0x13c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e59      	subs	r1, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1e:	1c59      	adds	r1, r3, #1
 8002c20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c24:	400b      	ands	r3, r1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_I2C_Init+0x138>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1e59      	subs	r1, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3e:	e051      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002c40:	2304      	movs	r3, #4
 8002c42:	e04f      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d111      	bne.n	8002c70 <HAL_I2C_Init+0x168>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	440b      	add	r3, r1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e012      	b.n	8002c96 <HAL_I2C_Init+0x18e>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Init+0x196>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e022      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_I2C_Init+0x1bc>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1e58      	subs	r0, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	440b      	add	r3, r1
 8002cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1e58      	subs	r0, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	0099      	lsls	r1, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	6809      	ldr	r1, [r1, #0]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6911      	ldr	r1, [r2, #16]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68d2      	ldr	r2, [r2, #12]
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	000186a0 	.word	0x000186a0
 8002d80:	001e847f 	.word	0x001e847f
 8002d84:	003d08ff 	.word	0x003d08ff
 8002d88:	431bde83 	.word	0x431bde83
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002daa:	f7fe ffed 	bl	8001d88 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 80d9 	bne.w	8002f70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2319      	movs	r3, #25
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	496d      	ldr	r1, [pc, #436]	@ (8002f7c <HAL_I2C_Mem_Write+0x1ec>)
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 ff55 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e0cc      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2C_Mem_Write+0x56>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0c5      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d007      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2221      	movs	r2, #33	@ 0x21
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	@ 0x40
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f80 <HAL_I2C_Mem_Write+0x1f0>)
 8002e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e4e:	88f8      	ldrh	r0, [r7, #6]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fc70 	bl	8003744 <I2C_RequestMemoryWrite>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d052      	beq.n	8002f10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e081      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f001 f81a 	bl	8003eac <I2C_WaitOnTXEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d107      	bne.n	8002e96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06b      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <HAL_I2C_Mem_Write+0x180>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1aa      	bne.n	8002e6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f001 f80d 	bl	8003f3c <I2C_WaitOnBTFFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d107      	bne.n	8002f40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e016      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	00100002 	.word	0x00100002
 8002f80:	ffff0000 	.word	0xffff0000

08002f84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	@ 0x30
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	817b      	strh	r3, [r7, #10]
 8002f96:	460b      	mov	r3, r1
 8002f98:	813b      	strh	r3, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f9e:	f7fe fef3 	bl	8001d88 <HAL_GetTick>
 8002fa2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	f040 8214 	bne.w	80033da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2319      	movs	r3, #25
 8002fb8:	2201      	movs	r2, #1
 8002fba:	497b      	ldr	r1, [pc, #492]	@ (80031a8 <HAL_I2C_Mem_Read+0x224>)
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fe5b 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e207      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Mem_Read+0x56>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e200      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d007      	beq.n	8003000 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2222      	movs	r2, #34	@ 0x22
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2240      	movs	r2, #64	@ 0x40
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a5b      	ldr	r2, [pc, #364]	@ (80031ac <HAL_I2C_Mem_Read+0x228>)
 8003040:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003042:	88f8      	ldrh	r0, [r7, #6]
 8003044:	893a      	ldrh	r2, [r7, #8]
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4603      	mov	r3, r0
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fc0c 	bl	8003870 <I2C_RequestMemoryRead>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1bc      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d113      	bne.n	8003092 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	623b      	str	r3, [r7, #32]
 800307e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e190      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003096:	2b01      	cmp	r3, #1
 8003098:	d11b      	bne.n	80030d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e170      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d11b      	bne.n	8003112 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	e150      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003128:	e144      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	2b03      	cmp	r3, #3
 8003130:	f200 80f1 	bhi.w	8003316 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	2b01      	cmp	r3, #1
 800313a:	d123      	bne.n	8003184 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 ff43 	bl	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e145      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003182:	e117      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b02      	cmp	r3, #2
 800318a:	d14e      	bne.n	800322a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003192:	2200      	movs	r2, #0
 8003194:	4906      	ldr	r1, [pc, #24]	@ (80031b0 <HAL_I2C_Mem_Read+0x22c>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fd6e 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e11a      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
 80031a6:	bf00      	nop
 80031a8:	00100002 	.word	0x00100002
 80031ac:	ffff0000 	.word	0xffff0000
 80031b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003228:	e0c4      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	2200      	movs	r2, #0
 8003232:	496c      	ldr	r1, [pc, #432]	@ (80033e4 <HAL_I2C_Mem_Read+0x460>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fd1f 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cb      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	2200      	movs	r2, #0
 800328e:	4955      	ldr	r1, [pc, #340]	@ (80033e4 <HAL_I2C_Mem_Read+0x460>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fcf1 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e09d      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003314:	e04e      	b.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003318:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fe56 	bl	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e058      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d124      	bne.n	80033b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	2b03      	cmp	r3, #3
 8003370:	d107      	bne.n	8003382 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003380:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f aeb6 	bne.w	800312a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	@ 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00010004 	.word	0x00010004

080033e8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	@ 0x30
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003402:	f7fe fcc1 	bl	8001d88 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	f040 8172 	bne.w	80036fe <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800341a:	4b93      	ldr	r3, [pc, #588]	@ (8003668 <HAL_I2C_Mem_Read_DMA+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	4a92      	ldr	r2, [pc, #584]	@ (800366c <HAL_I2C_Mem_Read_DMA+0x284>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0a1a      	lsrs	r2, r3, #8
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	3b01      	subs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d112      	bne.n	8003466 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	e14c      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d0df      	beq.n	8003434 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Mem_Read_DMA+0x9a>
 800347e:	2302      	movs	r3, #2
 8003480:	e13e      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d007      	beq.n	80034a8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2222      	movs	r2, #34	@ 0x22
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a62      	ldr	r2, [pc, #392]	@ (8003670 <HAL_I2C_Mem_Read_DMA+0x288>)
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80034ea:	897a      	ldrh	r2, [r7, #10]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80034f0:	893a      	ldrh	r2, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80cc 	beq.w	80036a4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02d      	beq.n	8003570 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	4a56      	ldr	r2, [pc, #344]	@ (8003674 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800351a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	4a55      	ldr	r2, [pc, #340]	@ (8003678 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003522:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003528:	2200      	movs	r2, #0
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	2200      	movs	r2, #0
 8003532:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	2200      	movs	r2, #0
 800353a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	2200      	movs	r2, #0
 8003542:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3310      	adds	r3, #16
 800354e:	4619      	mov	r1, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	461a      	mov	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	f7fe fe05 	bl	8002168 <HAL_DMA_Start_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003564:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 8087 	bne.w	800367c <HAL_I2C_Mem_Read_DMA+0x294>
 800356e:	e013      	b.n	8003598 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b3      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003598:	88f8      	ldrh	r0, [r7, #6]
 800359a:	893a      	ldrh	r2, [r7, #8]
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2323      	movs	r3, #35	@ 0x23
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4603      	mov	r3, r0
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f961 	bl	8003870 <I2C_RequestMemoryRead>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d023      	beq.n	80035fc <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fe2d 	bl	8002218 <HAL_DMA_Abort_IT>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	2200      	movs	r2, #0
 80035ca:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035da:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e081      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e007      	b.n	8003626 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003624:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003652:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	e049      	b.n	80036fa <HAL_I2C_Mem_Read_DMA+0x312>
 8003666:	bf00      	nop
 8003668:	20000000 	.word	0x20000000
 800366c:	14f8b589 	.word	0x14f8b589
 8003670:	ffff0000 	.word	0xffff0000
 8003674:	08003a41 	.word	0x08003a41
 8003678:	08003bff 	.word	0x08003bff
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	f043 0210 	orr.w	r2, r3, #16
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e02d      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80036a4:	88f8      	ldrh	r0, [r7, #6]
 80036a6:	893a      	ldrh	r2, [r7, #8]
 80036a8:	8979      	ldrh	r1, [r7, #10]
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	2323      	movs	r3, #35	@ 0x23
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4603      	mov	r3, r0
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f8db 	bl	8003870 <I2C_RequestMemoryRead>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e01d      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	@ 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	461a      	mov	r2, r3
 8003752:	4603      	mov	r3, r0
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	460b      	mov	r3, r1
 8003758:	813b      	strh	r3, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2200      	movs	r2, #0
 8003776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fa7c 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003794:	d103      	bne.n	800379e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e05f      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	492d      	ldr	r1, [pc, #180]	@ (800386c <I2C_RequestMemoryWrite+0x128>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fad7 	bl	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04c      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e0:	6a39      	ldr	r1, [r7, #32]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fb62 	bl	8003eac <I2C_WaitOnTXEFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d107      	bne.n	8003806 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e02b      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e021      	b.n	8003860 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b29b      	uxth	r3, r3
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb3c 	bl	8003eac <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e005      	b.n	8003862 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003856:	893b      	ldrh	r3, [r7, #8]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f9de 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d0:	d103      	bne.n	80038da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0aa      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	4952      	ldr	r1, [pc, #328]	@ (8003a3c <I2C_RequestMemoryRead+0x1cc>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fa39 	bl	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e097      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391c:	6a39      	ldr	r1, [r7, #32]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fac4 	bl	8003eac <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e076      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	611a      	str	r2, [r3, #16]
 8003956:	e021      	b.n	800399c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003958:	893b      	ldrh	r3, [r7, #8]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b29b      	uxth	r3, r3
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fa9e 	bl	8003eac <I2C_WaitOnTXEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	2b04      	cmp	r3, #4
 800397c:	d107      	bne.n	800398e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e050      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399e:	6a39      	ldr	r1, [r7, #32]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa83 	bl	8003eac <I2C_WaitOnTXEFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00d      	beq.n	80039c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d107      	bne.n	80039c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e035      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2200      	movs	r2, #0
 80039e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f947 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fe:	d103      	bne.n	8003a08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e013      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	4906      	ldr	r1, [pc, #24]	@ (8003a3c <I2C_RequestMemoryRead+0x1cc>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f9a2 	bl	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	00010002 	.word	0x00010002

08003a40 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a54:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a5c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a72:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	2200      	movs	r2, #0
 8003a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	2200      	movs	r2, #0
 8003a92:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003a9a:	2b21      	cmp	r3, #33	@ 0x21
 8003a9c:	d007      	beq.n	8003aae <I2C_DMAXferCplt+0x6e>
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003aa4:	2b22      	cmp	r3, #34	@ 0x22
 8003aa6:	d131      	bne.n	8003b0c <I2C_DMAXferCplt+0xcc>
 8003aa8:	7cbb      	ldrb	r3, [r7, #18]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d12e      	bne.n	8003b0c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003abc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	2b29      	cmp	r3, #41	@ 0x29
 8003ac8:	d10a      	bne.n	8003ae0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2221      	movs	r2, #33	@ 0x21
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2228      	movs	r2, #40	@ 0x28
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f7ff fe1f 	bl	800371c <HAL_I2C_SlaveTxCpltCallback>
 8003ade:	e00c      	b.n	8003afa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ae4:	d109      	bne.n	8003afa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2222      	movs	r2, #34	@ 0x22
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2228      	movs	r2, #40	@ 0x28
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003af4:	6978      	ldr	r0, [r7, #20]
 8003af6:	f7ff fe1b 	bl	8003730 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b0a:	e074      	b.n	8003bf6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d06e      	beq.n	8003bf6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b30:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b48:	d009      	beq.n	8003b5e <I2C_DMAXferCplt+0x11e>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d006      	beq.n	8003b5e <I2C_DMAXferCplt+0x11e>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b56:	d002      	beq.n	8003b5e <I2C_DMAXferCplt+0x11e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d107      	bne.n	8003b6e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b7c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b8c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2200      	movs	r2, #0
 8003b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003b9c:	6978      	ldr	r0, [r7, #20]
 8003b9e:	f7fd fbd1 	bl	8001344 <HAL_I2C_ErrorCallback>
}
 8003ba2:	e028      	b.n	8003bf6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d10a      	bne.n	8003bce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7fd fba0 	bl	800130c <HAL_I2C_MemRxCpltCallback>
}
 8003bcc:	e013      	b.n	8003bf6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d002      	beq.n	8003be2 <I2C_DMAXferCplt+0x1a2>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d103      	bne.n	8003bea <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003be8:	e002      	b.n	8003bf0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2212      	movs	r2, #18
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff fd89 	bl	8003708 <HAL_I2C_MasterRxCpltCallback>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	2200      	movs	r2, #0
 8003c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe fc9f 	bl	8002570 <HAL_DMA_GetError>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d01b      	beq.n	8003c70 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7fd fb6a 	bl	8001344 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	e048      	b.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c90:	d044      	beq.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fe f879 	bl	8001d88 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d139      	bne.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10d      	bne.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	e00c      	b.n	8003ce8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d116      	bne.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e023      	b.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10d      	bne.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	e00c      	b.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d093      	beq.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d7a:	e071      	b.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8a:	d123      	bne.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f043 0204 	orr.w	r2, r3, #4
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e067      	b.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dda:	d041      	beq.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ddc:	f7fd ffd4 	bl	8001d88 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d136      	bne.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10c      	bne.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	43da      	mvns	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf14      	ite	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	2300      	moveq	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	e00b      	b.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4013      	ands	r3, r2
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e021      	b.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10c      	bne.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	43da      	mvns	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e00b      	b.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f47f af6d 	bne.w	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eb8:	e034      	b.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f8e3 	bl	8004086 <I2C_IsAcknowledgeFailed>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e034      	b.n	8003f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ed0:	d028      	beq.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7fd ff59 	bl	8001d88 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11d      	bne.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	2b80      	cmp	r3, #128	@ 0x80
 8003ef4:	d016      	beq.n	8003f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e007      	b.n	8003f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b80      	cmp	r3, #128	@ 0x80
 8003f30:	d1c3      	bne.n	8003eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f48:	e034      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f89b 	bl	8004086 <I2C_IsAcknowledgeFailed>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e034      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f60:	d028      	beq.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fd ff11 	bl	8001d88 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d016      	beq.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e007      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d1c3      	bne.n	8003f4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd8:	e049      	b.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d119      	bne.n	800401c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0210 	mvn.w	r2, #16
 8003ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e030      	b.n	800407e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fd feb4 	bl	8001d88 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11d      	bne.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d016      	beq.n	800406e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f043 0220 	orr.w	r2, r3, #32
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e007      	b.n	800407e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d1ae      	bne.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409c:	d11b      	bne.n	80040d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e108      	b.n	8004308 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f006 fd1d 	bl	800ab50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004124:	d102      	bne.n	800412c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f003 f8aa 	bl	800728a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7c1a      	ldrb	r2, [r3, #16]
 800413e:	f88d 2000 	strb.w	r2, [sp]
 8004142:	3304      	adds	r3, #4
 8004144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004146:	f002 ff89 	bl	800705c <USB_CoreInit>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0d5      	b.n	8004308 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f003 f8a2 	bl	80072ac <USB_SetCurrentMode>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0c6      	b.n	8004308 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
 800417e:	e04a      	b.n	8004216 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3315      	adds	r3, #21
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3314      	adds	r3, #20
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	b298      	uxth	r0, r3
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	332e      	adds	r3, #46	@ 0x2e
 80041bc:	4602      	mov	r2, r0
 80041be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	3318      	adds	r3, #24
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	331c      	adds	r3, #28
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	3320      	adds	r3, #32
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3324      	adds	r3, #36	@ 0x24
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	3301      	adds	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3af      	bcc.n	8004180 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e044      	b.n	80042b0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	3301      	adds	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d3b5      	bcc.n	8004226 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7c1a      	ldrb	r2, [r3, #16]
 80042c2:	f88d 2000 	strb.w	r2, [sp]
 80042c6:	3304      	adds	r3, #4
 80042c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ca:	f003 f83b 	bl	8007344 <USB_DevInit>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e013      	b.n	8004308 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d102      	bne.n	80042fc <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f001 f96e 	bl	80055d8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f004 f878 	bl	80083f6 <USB_DevDisconnect>

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_PCD_Start+0x1c>
 8004328:	2302      	movs	r3, #2
 800432a:	e022      	b.n	8004372 <HAL_PCD_Start+0x62>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f002 ff85 	bl	8007268 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f004 f826 	bl	80083b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800437a:	b590      	push	{r4, r7, lr}
 800437c:	b08d      	sub	sp, #52	@ 0x34
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f004 f8e4 	bl	800855e <USB_GetMode>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 84b9 	bne.w	8004d10 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f004 f848 	bl	8008438 <USB_ReadInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 84af 	beq.w	8004d0e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f004 f835 	bl	8008438 <USB_ReadInterrupts>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d107      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f002 0202 	and.w	r2, r2, #2
 80043e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f004 f823 	bl	8008438 <USB_ReadInterrupts>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d161      	bne.n	80044c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0210 	bic.w	r2, r2, #16
 800440a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004432:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004436:	d124      	bne.n	8004482 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d035      	beq.n	80044b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800444e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6a38      	ldr	r0, [r7, #32]
 8004458:	f003 fe5a 	bl	8008110 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004468:	441a      	add	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447a:	441a      	add	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	615a      	str	r2, [r3, #20]
 8004480:	e016      	b.n	80044b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004488:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800448c:	d110      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004494:	2208      	movs	r2, #8
 8004496:	4619      	mov	r1, r3
 8004498:	6a38      	ldr	r0, [r7, #32]
 800449a:	f003 fe39 	bl	8008110 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044aa:	441a      	add	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0210 	orr.w	r2, r2, #16
 80044be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f003 ffb7 	bl	8008438 <USB_ReadInterrupts>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044d4:	f040 80a7 	bne.w	8004626 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f003 ffbc 	bl	800845e <USB_ReadDevAllOutEpInterrupt>
 80044e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80044e8:	e099      	b.n	800461e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 808e 	beq.w	8004612 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f003 ffe0 	bl	80084c6 <USB_ReadDevOutEPInterrupt>
 8004506:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451e:	461a      	mov	r2, r3
 8004520:	2301      	movs	r3, #1
 8004522:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fed0 	bl	80052cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2308      	movs	r3, #8
 8004546:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 ffa6 	bl	800549c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004566:	461a      	mov	r2, r3
 8004568:	2310      	movs	r3, #16
 800456a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d030      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b80      	cmp	r3, #128	@ 0x80
 8004580:	d109      	bne.n	8004596 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004594:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	3304      	adds	r3, #4
 80045aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	78db      	ldrb	r3, [r3, #3]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d108      	bne.n	80045c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f006 fbe1 	bl	800ad88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	461a      	mov	r2, r3
 80045d4:	2302      	movs	r3, #2
 80045d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	2320      	movs	r3, #32
 80045f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004610:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	3301      	adds	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	f47f af62 	bne.w	80044ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f003 ff04 	bl	8008438 <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004636:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800463a:	f040 80db 	bne.w	80047f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f003 ff25 	bl	8008492 <USB_ReadDevAllInEpInterrupt>
 8004648:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800464e:	e0cd      	b.n	80047ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80c2 	beq.w	80047e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f003 ff4b 	bl	8008502 <USB_ReadDevInEPInterrupt>
 800466c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d057      	beq.n	8004728 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	43db      	mvns	r3, r3
 8004692:	69f9      	ldr	r1, [r7, #28]
 8004694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004698:	4013      	ands	r3, r2
 800469a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a8:	461a      	mov	r2, r3
 80046aa:	2301      	movs	r3, #1
 80046ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	799b      	ldrb	r3, [r3, #6]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d132      	bne.n	800471c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3320      	adds	r3, #32
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4403      	add	r3, r0
 80046d6:	331c      	adds	r3, #28
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4419      	add	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4403      	add	r3, r0
 80046ea:	3320      	adds	r3, #32
 80046ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d113      	bne.n	800471c <HAL_PCD_IRQHandler+0x3a2>
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3324      	adds	r3, #36	@ 0x24
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d108      	bne.n	800471c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004714:	461a      	mov	r2, r3
 8004716:	2101      	movs	r1, #1
 8004718:	f003 ff52 	bl	80085c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f006 faab 	bl	800ac7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800473e:	461a      	mov	r2, r3
 8004740:	2308      	movs	r3, #8
 8004742:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475a:	461a      	mov	r2, r3
 800475c:	2310      	movs	r3, #16
 800475e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004776:	461a      	mov	r2, r3
 8004778:	2340      	movs	r3, #64	@ 0x40
 800477a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d023      	beq.n	80047ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004786:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004788:	6a38      	ldr	r0, [r7, #32]
 800478a:	f002 ff39 	bl	8007600 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800478e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	3310      	adds	r3, #16
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	3304      	adds	r3, #4
 80047a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	78db      	ldrb	r3, [r3, #3]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d108      	bne.n	80047bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f006 faf8 	bl	800adac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	2302      	movs	r3, #2
 80047cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fcea 	bl	80051b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	3301      	adds	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f47f af2e 	bne.w	8004650 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f003 fe1d 	bl	8008438 <USB_ReadInterrupts>
 80047fe:	4603      	mov	r3, r0
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004808:	d122      	bne.n	8004850 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004824:	2b01      	cmp	r3, #1
 8004826:	d108      	bne.n	800483a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004830:	2100      	movs	r1, #0
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f006 fc72 	bl	800b11c <HAL_PCDEx_LPM_Callback>
 8004838:	e002      	b.n	8004840 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f006 fa96 	bl	800ad6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800484e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f003 fdef 	bl	8008438 <USB_ReadInterrupts>
 800485a:	4603      	mov	r3, r0
 800485c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004864:	d112      	bne.n	800488c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f006 fa52 	bl	800ad20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800488a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f003 fdd1 	bl	8008438 <USB_ReadInterrupts>
 8004896:	4603      	mov	r3, r0
 8004898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048a0:	d121      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80048b0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d111      	bne.n	80048e0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	f003 020f 	and.w	r2, r3, #15
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048d6:	2101      	movs	r1, #1
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f006 fc1f 	bl	800b11c <HAL_PCDEx_LPM_Callback>
 80048de:	e002      	b.n	80048e6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f006 fa1d 	bl	800ad20 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f003 fda4 	bl	8008438 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048fa:	f040 80b7 	bne.w	8004a6c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2110      	movs	r1, #16
 8004918:	4618      	mov	r0, r3
 800491a:	f002 fe71 	bl	8007600 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004922:	e046      	b.n	80049b2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004930:	461a      	mov	r2, r3
 8004932:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004936:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	440a      	add	r2, r1
 800494e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004952:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004956:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004964:	461a      	mov	r2, r3
 8004966:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800496a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004986:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800498a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ae:	3301      	adds	r3, #1
 80049b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	791b      	ldrb	r3, [r3, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d3b2      	bcc.n	8004924 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80049d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	7bdb      	ldrb	r3, [r3, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ea:	f043 030b 	orr.w	r3, r3, #11
 80049ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a00:	f043 030b 	orr.w	r3, r3, #11
 8004a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a06:	e015      	b.n	8004a34 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a1a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004a1e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a2e:	f043 030b 	orr.w	r3, r3, #11
 8004a32:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a46:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a56:	461a      	mov	r2, r3
 8004a58:	f003 fdb2 	bl	80085c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f003 fce1 	bl	8008438 <USB_ReadInterrupts>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a80:	d123      	bne.n	8004aca <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f003 fd77 	bl	800857a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f002 fe2e 	bl	80076f2 <USB_GetDevSpeed>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681c      	ldr	r4, [r3, #0]
 8004aa2:	f000 fea3 	bl	80057ec <HAL_RCC_GetHCLKFreq>
 8004aa6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aac:	461a      	mov	r2, r3
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f002 fb38 	bl	8007124 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f006 f90a 	bl	800acce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fcb2 	bl	8008438 <USB_ReadInterrupts>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d10a      	bne.n	8004af4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f006 f8e7 	bl	800acb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f002 0208 	and.w	r2, r2, #8
 8004af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f003 fc9d 	bl	8008438 <USB_ReadInterrupts>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b04:	2b80      	cmp	r3, #128	@ 0x80
 8004b06:	d123      	bne.n	8004b50 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b14:	2301      	movs	r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b18:	e014      	b.n	8004b44 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1e:	4613      	mov	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fb0a 	bl	8005152 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	3301      	adds	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d3e4      	bcc.n	8004b1a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f003 fc6f 	bl	8008438 <USB_ReadInterrupts>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b64:	d13c      	bne.n	8004be0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b66:	2301      	movs	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6a:	e02b      	b.n	8004bc4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3318      	adds	r3, #24
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d115      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da12      	bge.n	8004bbe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3317      	adds	r3, #23
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 faca 	bl	8005152 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	791b      	ldrb	r3, [r3, #4]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d3cd      	bcc.n	8004b6c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 fc27 	bl	8008438 <USB_ReadInterrupts>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bf4:	d156      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfa:	e045      	b.n	8004c88 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c10:	4613      	mov	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d12e      	bne.n	8004c82 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da2b      	bge.n	8004c82 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	0c1a      	lsrs	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004c34:	4053      	eors	r3, r2
 8004c36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d121      	bne.n	8004c82 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c7e:	6053      	str	r3, [r2, #4]
            break;
 8004c80:	e008      	b.n	8004c94 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	3301      	adds	r3, #1
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	791b      	ldrb	r3, [r3, #4]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d3b3      	bcc.n	8004bfc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f003 fbc5 	bl	8008438 <USB_ReadInterrupts>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb8:	d10a      	bne.n	8004cd0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f006 f888 	bl	800add0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f003 fbaf 	bl	8008438 <USB_ReadInterrupts>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d115      	bne.n	8004d10 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f006 f878 	bl	800adec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	e000      	b.n	8004d10 <HAL_PCD_IRQHandler+0x996>
      return;
 8004d0e:	bf00      	nop
    }
  }
}
 8004d10:	3734      	adds	r7, #52	@ 0x34
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd90      	pop	{r4, r7, pc}

08004d16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_PCD_SetAddress+0x1a>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e012      	b.n	8004d56 <HAL_PCD_SetAddress+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 fb0e 	bl	8008368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	4608      	mov	r0, r1
 8004d68:	4611      	mov	r1, r2
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	70fb      	strb	r3, [r7, #3]
 8004d70:	460b      	mov	r3, r1
 8004d72:	803b      	strh	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	da0f      	bge.n	8004da4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3310      	adds	r3, #16
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	705a      	strb	r2, [r3, #1]
 8004da2:	e00f      	b.n	8004dc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	3304      	adds	r3, #4
 8004dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004dd0:	883b      	ldrh	r3, [r7, #0]
 8004dd2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	78ba      	ldrb	r2, [r7, #2]
 8004dde:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004df2:	78bb      	ldrb	r3, [r7, #2]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d102      	bne.n	8004dfe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_PCD_EP_Open+0xae>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e00e      	b.n	8004e2a <HAL_PCD_EP_Open+0xcc>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68f9      	ldr	r1, [r7, #12]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f002 fc8e 	bl	800773c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004e28:	7afb      	ldrb	r3, [r7, #11]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da0f      	bge.n	8004e66 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	3310      	adds	r3, #16
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	705a      	strb	r2, [r3, #1]
 8004e64:	e00f      	b.n	8004e86 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_PCD_EP_Close+0x6e>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e00e      	b.n	8004ebe <HAL_PCD_EP_Close+0x8c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 fccc 	bl	800784c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	3304      	adds	r3, #4
 8004eee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2200      	movs	r2, #0
 8004f00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f08:	7afb      	ldrb	r3, [r7, #11]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	799b      	ldrb	r3, [r3, #6]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	799b      	ldrb	r3, [r3, #6]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	f002 fd69 	bl	8007a04 <USB_EPStartXfer>

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f7c:	7afb      	ldrb	r3, [r7, #11]
 8004f7e:	f003 020f 	and.w	r2, r3, #15
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	3310      	adds	r3, #16
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	3304      	adds	r3, #4
 8004f92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fac:	7afb      	ldrb	r3, [r7, #11]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	799b      	ldrb	r3, [r3, #6]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d102      	bne.n	8004fc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	799b      	ldrb	r3, [r3, #6]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6979      	ldr	r1, [r7, #20]
 8004fd2:	f002 fd17 	bl	8007a04 <USB_EPStartXfer>

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	7912      	ldrb	r2, [r2, #4]
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e04f      	b.n	800509e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da0f      	bge.n	8005026 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	3310      	adds	r3, #16
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	3304      	adds	r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	705a      	strb	r2, [r3, #1]
 8005024:	e00d      	b.n	8005042 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	3304      	adds	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_PCD_EP_SetStall+0x82>
 800505e:	2302      	movs	r3, #2
 8005060:	e01d      	b.n	800509e <HAL_PCD_EP_SetStall+0xbe>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	4618      	mov	r0, r3
 8005072:	f003 f8a5 	bl	80081c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	7999      	ldrb	r1, [r3, #6]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800508e:	461a      	mov	r2, r3
 8005090:	f003 fa96 	bl	80085c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	7912      	ldrb	r2, [r2, #4]
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e042      	b.n	800514a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	da0f      	bge.n	80050ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 020f 	and.w	r2, r3, #15
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	3310      	adds	r3, #16
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4413      	add	r3, r2
 80050e0:	3304      	adds	r3, #4
 80050e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	705a      	strb	r2, [r3, #1]
 80050ea:	e00f      	b.n	800510c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 020f 	and.w	r2, r3, #15
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	3304      	adds	r3, #4
 8005104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	b2da      	uxtb	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_PCD_EP_ClrStall+0x86>
 8005128:	2302      	movs	r3, #2
 800512a:	e00e      	b.n	800514a <HAL_PCD_EP_ClrStall+0xa4>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68f9      	ldr	r1, [r7, #12]
 800513a:	4618      	mov	r0, r3
 800513c:	f003 f8ae 	bl	800829c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800515e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005162:	2b00      	cmp	r3, #0
 8005164:	da0c      	bge.n	8005180 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	f003 020f 	and.w	r2, r3, #15
 800516c:	4613      	mov	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	3310      	adds	r3, #16
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4413      	add	r3, r2
 800517a:	3304      	adds	r3, #4
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e00c      	b.n	800519a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4413      	add	r3, r2
 8005196:	3304      	adds	r3, #4
 8005198:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 fecd 	bl	8007f40 <USB_EPStopXfer>
 80051a6:	4603      	mov	r3, r0
 80051a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	@ 0x28
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3310      	adds	r3, #16
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	3304      	adds	r3, #4
 80051da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d901      	bls.n	80051ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e06b      	b.n	80052c4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d902      	bls.n	8005208 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3303      	adds	r3, #3
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005210:	e02a      	b.n	8005268 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	429a      	cmp	r2, r3
 8005226:	d902      	bls.n	800522e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3303      	adds	r3, #3
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4603      	mov	r3, r0
 800524a:	6978      	ldr	r0, [r7, #20]
 800524c:	f002 ff22 	bl	8008094 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	441a      	add	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	441a      	add	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	429a      	cmp	r2, r3
 800527c:	d809      	bhi.n	8005292 <PCD_WriteEmptyTxFifo+0xde>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005286:	429a      	cmp	r2, r3
 8005288:	d203      	bcs.n	8005292 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1bf      	bne.n	8005212 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	429a      	cmp	r2, r3
 800529c:	d811      	bhi.n	80052c2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	2201      	movs	r2, #1
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	6939      	ldr	r1, [r7, #16]
 80052ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052be:	4013      	ands	r3, r2
 80052c0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	333c      	adds	r3, #60	@ 0x3c
 80052e4:	3304      	adds	r3, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	799b      	ldrb	r3, [r3, #6]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d17b      	bne.n	80053fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4a61      	ldr	r2, [pc, #388]	@ (8005494 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	f240 80b9 	bls.w	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80b3 	beq.w	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532e:	461a      	mov	r2, r3
 8005330:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005334:	6093      	str	r3, [r2, #8]
 8005336:	e0a7      	b.n	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534e:	461a      	mov	r2, r3
 8005350:	2320      	movs	r3, #32
 8005352:	6093      	str	r3, [r2, #8]
 8005354:	e098      	b.n	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8093 	bne.w	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	4a4b      	ldr	r2, [pc, #300]	@ (8005494 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d90f      	bls.n	800538a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	461a      	mov	r2, r3
 8005382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005386:	6093      	str	r3, [r2, #8]
 8005388:	e07e      	b.n	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	3304      	adds	r3, #4
 800539e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	0159      	lsls	r1, r3, #5
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	440b      	add	r3, r1
 80053ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b6:	1ad2      	subs	r2, r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d114      	bne.n	80053ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053d4:	461a      	mov	r2, r3
 80053d6:	2101      	movs	r1, #1
 80053d8:	f003 f8f2 	bl	80085c0 <USB_EP0_OutStart>
 80053dc:	e006      	b.n	80053ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	441a      	add	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f005 fc28 	bl	800ac48 <HAL_PCD_DataOutStageCallback>
 80053f8:	e046      	b.n	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4a26      	ldr	r2, [pc, #152]	@ (8005498 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d124      	bne.n	800544c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541e:	6093      	str	r3, [r2, #8]
 8005420:	e032      	b.n	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005438:	461a      	mov	r2, r3
 800543a:	2320      	movs	r3, #32
 800543c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f005 fbff 	bl	800ac48 <HAL_PCD_DataOutStageCallback>
 800544a:	e01d      	b.n	8005488 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d114      	bne.n	800547c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d108      	bne.n	800547c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005474:	461a      	mov	r2, r3
 8005476:	2100      	movs	r1, #0
 8005478:	f003 f8a2 	bl	80085c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f005 fbe0 	bl	800ac48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	4f54300a 	.word	0x4f54300a
 8005498:	4f54310a 	.word	0x4f54310a

0800549c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	333c      	adds	r3, #60	@ 0x3c
 80054b4:	3304      	adds	r3, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a15      	ldr	r2, [pc, #84]	@ (8005524 <PCD_EP_OutSetupPacket_int+0x88>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d90e      	bls.n	80054f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f005 fb97 	bl	800ac24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <PCD_EP_OutSetupPacket_int+0x88>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d90c      	bls.n	8005518 <PCD_EP_OutSetupPacket_int+0x7c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	799b      	ldrb	r3, [r3, #6]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d108      	bne.n	8005518 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005510:	461a      	mov	r2, r3
 8005512:	2101      	movs	r1, #1
 8005514:	f003 f854 	bl	80085c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	4f54300a 	.word	0x4f54300a

08005528 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
 8005534:	4613      	mov	r3, r2
 8005536:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d107      	bne.n	8005556 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005546:	883b      	ldrh	r3, [r7, #0]
 8005548:	0419      	lsls	r1, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	430a      	orrs	r2, r1
 8005552:	629a      	str	r2, [r3, #40]	@ 0x28
 8005554:	e028      	b.n	80055a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	0c1b      	lsrs	r3, r3, #16
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4413      	add	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005564:	2300      	movs	r3, #0
 8005566:	73fb      	strb	r3, [r7, #15]
 8005568:	e00d      	b.n	8005586 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	3340      	adds	r3, #64	@ 0x40
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4413      	add	r3, r2
 800557e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	3301      	adds	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
 8005586:	7bfa      	ldrb	r2, [r7, #15]
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	3b01      	subs	r3, #1
 800558c:	429a      	cmp	r2, r3
 800558e:	d3ec      	bcc.n	800556a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005590:	883b      	ldrh	r3, [r7, #0]
 8005592:	0418      	lsls	r0, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	3b01      	subs	r3, #1
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	4302      	orrs	r2, r0
 80055a0:	3340      	adds	r3, #64	@ 0x40
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800560a:	f043 0303 	orr.w	r3, r3, #3
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0cc      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005634:	4b68      	ldr	r3, [pc, #416]	@ (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d90c      	bls.n	800565c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b65      	ldr	r3, [pc, #404]	@ (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b63      	ldr	r3, [pc, #396]	@ (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0b8      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005674:	4b59      	ldr	r3, [pc, #356]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a58      	ldr	r2, [pc, #352]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800567e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800568c:	4b53      	ldr	r3, [pc, #332]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a52      	ldr	r2, [pc, #328]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005698:	4b50      	ldr	r3, [pc, #320]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	494d      	ldr	r1, [pc, #308]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d044      	beq.n	8005740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	4b47      	ldr	r3, [pc, #284]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e07f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d003      	beq.n	80056de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056de:	4b3f      	ldr	r3, [pc, #252]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e06f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ee:	4b3b      	ldr	r3, [pc, #236]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e067      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fe:	4b37      	ldr	r3, [pc, #220]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 0203 	bic.w	r2, r3, #3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4934      	ldr	r1, [pc, #208]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 800570c:	4313      	orrs	r3, r2
 800570e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005710:	f7fc fb3a 	bl	8001d88 <HAL_GetTick>
 8005714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005716:	e00a      	b.n	800572e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005718:	f7fc fb36 	bl	8001d88 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e04f      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572e:	4b2b      	ldr	r3, [pc, #172]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 020c 	and.w	r2, r3, #12
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	429a      	cmp	r2, r3
 800573e:	d1eb      	bne.n	8005718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005740:	4b25      	ldr	r3, [pc, #148]	@ (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d20c      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b22      	ldr	r3, [pc, #136]	@ (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005756:	4b20      	ldr	r3, [pc, #128]	@ (80057d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e032      	b.n	80057ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005774:	4b19      	ldr	r3, [pc, #100]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4916      	ldr	r1, [pc, #88]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	490e      	ldr	r1, [pc, #56]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057a6:	f000 fb7f 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 80057aa:	4602      	mov	r2, r0
 80057ac:	4b0b      	ldr	r3, [pc, #44]	@ (80057dc <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	490a      	ldr	r1, [pc, #40]	@ (80057e0 <HAL_RCC_ClockConfig+0x1c0>)
 80057b8:	5ccb      	ldrb	r3, [r1, r3]
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	4a09      	ldr	r2, [pc, #36]	@ (80057e4 <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057c2:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <HAL_RCC_ClockConfig+0x1c8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fc fa9a 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40023c00 	.word	0x40023c00
 80057dc:	40023800 	.word	0x40023800
 80057e0:	0800dff4 	.word	0x0800dff4
 80057e4:	20000000 	.word	0x20000000
 80057e8:	20000004 	.word	0x20000004

080057ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f0:	4b03      	ldr	r3, [pc, #12]	@ (8005800 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f2:	681b      	ldr	r3, [r3, #0]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000000 	.word	0x20000000

08005804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005808:	f7ff fff0 	bl	80057ec <HAL_RCC_GetHCLKFreq>
 800580c:	4602      	mov	r2, r0
 800580e:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	0a9b      	lsrs	r3, r3, #10
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	4903      	ldr	r1, [pc, #12]	@ (8005828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800581a:	5ccb      	ldrb	r3, [r1, r3]
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40023800 	.word	0x40023800
 8005828:	0800e004 	.word	0x0800e004

0800582c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005830:	f7ff ffdc 	bl	80057ec <HAL_RCC_GetHCLKFreq>
 8005834:	4602      	mov	r2, r0
 8005836:	4b05      	ldr	r3, [pc, #20]	@ (800584c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	0b5b      	lsrs	r3, r3, #13
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	4903      	ldr	r1, [pc, #12]	@ (8005850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005842:	5ccb      	ldrb	r3, [r1, r3]
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40023800 	.word	0x40023800
 8005850:	0800e004 	.word	0x0800e004

08005854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	@ 0x30
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d010      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800588c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800588e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005892:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589a:	496c      	ldr	r1, [pc, #432]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80058aa:	2301      	movs	r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d010      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80058ba:	4b64      	ldr	r3, [pc, #400]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058c0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	4960      	ldr	r1, [pc, #384]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80058d8:	2301      	movs	r3, #1
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d017      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058e8:	4b58      	ldr	r3, [pc, #352]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	4955      	ldr	r1, [pc, #340]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005906:	d101      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005908:	2301      	movs	r3, #1
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005914:	2301      	movs	r3, #1
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d017      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005924:	4b49      	ldr	r3, [pc, #292]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800592a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005932:	4946      	ldr	r1, [pc, #280]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005942:	d101      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005944:	2301      	movs	r3, #1
 8005946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005950:	2301      	movs	r3, #1
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 808a 	beq.w	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	4b39      	ldr	r3, [pc, #228]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	4a38      	ldr	r2, [pc, #224]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6413      	str	r3, [r2, #64]	@ 0x40
 8005972:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800597e:	4b34      	ldr	r3, [pc, #208]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a33      	ldr	r2, [pc, #204]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800598a:	f7fc f9fd 	bl	8001d88 <HAL_GetTick>
 800598e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005992:	f7fc f9f9 	bl	8001d88 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e278      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059b0:	4b26      	ldr	r3, [pc, #152]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02f      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d028      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ce:	4b1f      	ldr	r3, [pc, #124]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059e4:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059ea:	4b18      	ldr	r3, [pc, #96]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d114      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059f6:	f7fc f9c7 	bl	8001d88 <HAL_GetTick>
 80059fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fc f9c3 	bl	8001d88 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e240      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a14:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ee      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a2c:	d114      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005a2e:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a42:	4902      	ldr	r1, [pc, #8]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]
 8005a48:	e00c      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40007000 	.word	0x40007000
 8005a54:	42470e40 	.word	0x42470e40
 8005a58:	4b4a      	ldr	r3, [pc, #296]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a49      	ldr	r2, [pc, #292]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a62:	6093      	str	r3, [r2, #8]
 8005a64:	4b47      	ldr	r3, [pc, #284]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a70:	4944      	ldr	r1, [pc, #272]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005a88:	4b3f      	ldr	r3, [pc, #252]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005a8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005a98:	4b3a      	ldr	r3, [pc, #232]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa6:	4937      	ldr	r1, [pc, #220]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005aba:	4b32      	ldr	r3, [pc, #200]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac8:	492e      	ldr	r1, [pc, #184]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005adc:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ae2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aea:	4926      	ldr	r1, [pc, #152]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005afa:	d101      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005afc:	2301      	movs	r3, #1
 8005afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b12:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1a:	491a      	ldr	r1, [pc, #104]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d011      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005b2e:	4b15      	ldr	r3, [pc, #84]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3c:	4911      	ldr	r1, [pc, #68]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d005      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b60:	f040 80ff 	bne.w	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b6a:	f7fc f90d 	bl	8001d88 <HAL_GetTick>
 8005b6e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b70:	e00e      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b72:	f7fc f909 	bl	8001d88 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d907      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e188      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b84:	40023800 	.word	0x40023800
 8005b88:	424711e0 	.word	0x424711e0
 8005b8c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b90:	4b7e      	ldr	r3, [pc, #504]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ea      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d028      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d124      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005bc4:	4b71      	ldr	r3, [pc, #452]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bdc:	0e1b      	lsrs	r3, r3, #24
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	071b      	lsls	r3, r3, #28
 8005c06:	4961      	ldr	r1, [pc, #388]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d035      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c38:	d130      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c3a:	4b54      	ldr	r3, [pc, #336]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	3301      	adds	r3, #1
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c52:	0f1b      	lsrs	r3, r3, #28
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	019b      	lsls	r3, r3, #6
 8005c64:	431a      	orrs	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	431a      	orrs	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	071b      	lsls	r3, r3, #28
 8005c7c:	4943      	ldr	r1, [pc, #268]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c84:	4b41      	ldr	r3, [pc, #260]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c8a:	f023 021f 	bic.w	r2, r3, #31
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	493d      	ldr	r1, [pc, #244]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d029      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cb0:	d124      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005cb2:	4b36      	ldr	r3, [pc, #216]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cc4:	4b31      	ldr	r3, [pc, #196]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cca:	0f1b      	lsrs	r3, r3, #28
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	019b      	lsls	r3, r3, #6
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	061b      	lsls	r3, r3, #24
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	071b      	lsls	r3, r3, #28
 8005cf4:	4925      	ldr	r1, [pc, #148]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	019b      	lsls	r3, r3, #6
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	061b      	lsls	r3, r3, #24
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	071b      	lsls	r3, r3, #28
 8005d2e:	4917      	ldr	r1, [pc, #92]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d36:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d3c:	f7fc f824 	bl	8001d88 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d44:	f7fc f820 	bl	8001d88 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e09f      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	f040 8095 	bne.w	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d70:	f7fc f80a 	bl	8001d88 <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d76:	e00f      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d78:	f7fc f806 	bl	8001d88 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d908      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e085      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	42470068 	.word	0x42470068
 8005d94:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d98:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da4:	d0e8      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d02b      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d127      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005dce:	4b34      	ldr	r3, [pc, #208]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699a      	ldr	r2, [r3, #24]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	019b      	lsls	r3, r3, #6
 8005dea:	431a      	orrs	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	3b01      	subs	r3, #1
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	061b      	lsls	r3, r3, #24
 8005dfc:	4928      	ldr	r1, [pc, #160]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e04:	4b26      	ldr	r3, [pc, #152]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e0a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e12:	3b01      	subs	r3, #1
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	4922      	ldr	r1, [pc, #136]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01d      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e32:	d118      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	0e1b      	lsrs	r3, r3, #24
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	019b      	lsls	r3, r3, #6
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	3b01      	subs	r3, #1
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	061b      	lsls	r3, r3, #24
 8005e5e:	4910      	ldr	r1, [pc, #64]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e6c:	f7fb ff8c 	bl	8001d88 <HAL_GetTick>
 8005e70:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e74:	f7fb ff88 	bl	8001d88 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e007      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e86:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e92:	d1ef      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3730      	adds	r7, #48	@ 0x30
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	42470070 	.word	0x42470070

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b0ae      	sub	sp, #184	@ 0xb8
 8005eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ece:	4bcb      	ldr	r3, [pc, #812]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	f200 8206 	bhi.w	80062e8 <HAL_RCC_GetSysClockFreq+0x440>
 8005edc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	080062e9 	.word	0x080062e9
 8005eec:	080062e9 	.word	0x080062e9
 8005ef0:	080062e9 	.word	0x080062e9
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	080062e9 	.word	0x080062e9
 8005efc:	080062e9 	.word	0x080062e9
 8005f00:	080062e9 	.word	0x080062e9
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	080062e9 	.word	0x080062e9
 8005f0c:	080062e9 	.word	0x080062e9
 8005f10:	080062e9 	.word	0x080062e9
 8005f14:	08006119 	.word	0x08006119
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f18:	4bb9      	ldr	r3, [pc, #740]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x358>)
 8005f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f1e:	e1e7      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f20:	4bb8      	ldr	r3, [pc, #736]	@ (8006204 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f26:	e1e3      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f28:	4bb4      	ldr	r3, [pc, #720]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f34:	4bb1      	ldr	r3, [pc, #708]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d071      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f40:	4bae      	ldr	r3, [pc, #696]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	099b      	lsrs	r3, r3, #6
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f4c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	f04f 0000 	mov.w	r0, #0
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	0159      	lsls	r1, r3, #5
 8005f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f78:	0150      	lsls	r0, r2, #5
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4621      	mov	r1, r4
 8005f80:	1a51      	subs	r1, r2, r1
 8005f82:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f84:	4629      	mov	r1, r5
 8005f86:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f98:	4649      	mov	r1, r9
 8005f9a:	018b      	lsls	r3, r1, #6
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa2:	4641      	mov	r1, r8
 8005fa4:	018a      	lsls	r2, r1, #6
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	1a51      	subs	r1, r2, r1
 8005faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fac:	4649      	mov	r1, r9
 8005fae:	eb63 0301 	sbc.w	r3, r3, r1
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	00cb      	lsls	r3, r1, #3
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fca:	4641      	mov	r1, r8
 8005fcc:	00ca      	lsls	r2, r1, #3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fda:	462b      	mov	r3, r5
 8005fdc:	460a      	mov	r2, r1
 8005fde:	eb42 0303 	adc.w	r3, r2, r3
 8005fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	024b      	lsls	r3, r1, #9
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	024a      	lsls	r2, r1, #9
 8005ffe:	4610      	mov	r0, r2
 8006000:	4619      	mov	r1, r3
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006006:	2200      	movs	r2, #0
 8006008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800600c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006010:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006014:	f7fa fde8 	bl	8000be8 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4613      	mov	r3, r2
 800601e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006022:	e067      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006024:	4b75      	ldr	r3, [pc, #468]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	099b      	lsrs	r3, r3, #6
 800602a:	2200      	movs	r2, #0
 800602c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006030:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800603e:	2300      	movs	r3, #0
 8006040:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006042:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	f04f 0000 	mov.w	r0, #0
 800604e:	f04f 0100 	mov.w	r1, #0
 8006052:	0159      	lsls	r1, r3, #5
 8006054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006058:	0150      	lsls	r0, r2, #5
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4621      	mov	r1, r4
 8006060:	1a51      	subs	r1, r2, r1
 8006062:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006064:	4629      	mov	r1, r5
 8006066:	eb63 0301 	sbc.w	r3, r3, r1
 800606a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006078:	4649      	mov	r1, r9
 800607a:	018b      	lsls	r3, r1, #6
 800607c:	4641      	mov	r1, r8
 800607e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006082:	4641      	mov	r1, r8
 8006084:	018a      	lsls	r2, r1, #6
 8006086:	4641      	mov	r1, r8
 8006088:	ebb2 0a01 	subs.w	sl, r2, r1
 800608c:	4649      	mov	r1, r9
 800608e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800609e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060a6:	4692      	mov	sl, r2
 80060a8:	469b      	mov	fp, r3
 80060aa:	4623      	mov	r3, r4
 80060ac:	eb1a 0303 	adds.w	r3, sl, r3
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	462b      	mov	r3, r5
 80060b4:	eb4b 0303 	adc.w	r3, fp, r3
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060c6:	4629      	mov	r1, r5
 80060c8:	028b      	lsls	r3, r1, #10
 80060ca:	4621      	mov	r1, r4
 80060cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060d0:	4621      	mov	r1, r4
 80060d2:	028a      	lsls	r2, r1, #10
 80060d4:	4610      	mov	r0, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060dc:	2200      	movs	r2, #0
 80060de:	673b      	str	r3, [r7, #112]	@ 0x70
 80060e0:	677a      	str	r2, [r7, #116]	@ 0x74
 80060e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80060e6:	f7fa fd7f 	bl	8000be8 <__aeabi_uldivmod>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4613      	mov	r3, r2
 80060f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80060f4:	4b41      	ldr	r3, [pc, #260]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	3301      	adds	r3, #1
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800610a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006116:	e0eb      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006118:	4b38      	ldr	r3, [pc, #224]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006124:	4b35      	ldr	r3, [pc, #212]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d06b      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006130:	4b32      	ldr	r3, [pc, #200]	@ (80061fc <HAL_RCC_GetSysClockFreq+0x354>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	099b      	lsrs	r3, r3, #6
 8006136:	2200      	movs	r2, #0
 8006138:	66bb      	str	r3, [r7, #104]	@ 0x68
 800613a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800613c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006142:	663b      	str	r3, [r7, #96]	@ 0x60
 8006144:	2300      	movs	r3, #0
 8006146:	667b      	str	r3, [r7, #100]	@ 0x64
 8006148:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800614c:	4622      	mov	r2, r4
 800614e:	462b      	mov	r3, r5
 8006150:	f04f 0000 	mov.w	r0, #0
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	0159      	lsls	r1, r3, #5
 800615a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800615e:	0150      	lsls	r0, r2, #5
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4621      	mov	r1, r4
 8006166:	1a51      	subs	r1, r2, r1
 8006168:	61b9      	str	r1, [r7, #24]
 800616a:	4629      	mov	r1, r5
 800616c:	eb63 0301 	sbc.w	r3, r3, r1
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800617e:	4659      	mov	r1, fp
 8006180:	018b      	lsls	r3, r1, #6
 8006182:	4651      	mov	r1, sl
 8006184:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006188:	4651      	mov	r1, sl
 800618a:	018a      	lsls	r2, r1, #6
 800618c:	4651      	mov	r1, sl
 800618e:	ebb2 0801 	subs.w	r8, r2, r1
 8006192:	4659      	mov	r1, fp
 8006194:	eb63 0901 	sbc.w	r9, r3, r1
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ac:	4690      	mov	r8, r2
 80061ae:	4699      	mov	r9, r3
 80061b0:	4623      	mov	r3, r4
 80061b2:	eb18 0303 	adds.w	r3, r8, r3
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	462b      	mov	r3, r5
 80061ba:	eb49 0303 	adc.w	r3, r9, r3
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061cc:	4629      	mov	r1, r5
 80061ce:	024b      	lsls	r3, r1, #9
 80061d0:	4621      	mov	r1, r4
 80061d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061d6:	4621      	mov	r1, r4
 80061d8:	024a      	lsls	r2, r1, #9
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061e2:	2200      	movs	r2, #0
 80061e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80061e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061ec:	f7fa fcfc 	bl	8000be8 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4613      	mov	r3, r2
 80061f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061fa:	e065      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x420>
 80061fc:	40023800 	.word	0x40023800
 8006200:	00f42400 	.word	0x00f42400
 8006204:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006208:	4b3d      	ldr	r3, [pc, #244]	@ (8006300 <HAL_RCC_GetSysClockFreq+0x458>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	099b      	lsrs	r3, r3, #6
 800620e:	2200      	movs	r2, #0
 8006210:	4618      	mov	r0, r3
 8006212:	4611      	mov	r1, r2
 8006214:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006218:	653b      	str	r3, [r7, #80]	@ 0x50
 800621a:	2300      	movs	r3, #0
 800621c:	657b      	str	r3, [r7, #84]	@ 0x54
 800621e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006222:	4642      	mov	r2, r8
 8006224:	464b      	mov	r3, r9
 8006226:	f04f 0000 	mov.w	r0, #0
 800622a:	f04f 0100 	mov.w	r1, #0
 800622e:	0159      	lsls	r1, r3, #5
 8006230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006234:	0150      	lsls	r0, r2, #5
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4641      	mov	r1, r8
 800623c:	1a51      	subs	r1, r2, r1
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	4649      	mov	r1, r9
 8006242:	eb63 0301 	sbc.w	r3, r3, r1
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006254:	4659      	mov	r1, fp
 8006256:	018b      	lsls	r3, r1, #6
 8006258:	4651      	mov	r1, sl
 800625a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800625e:	4651      	mov	r1, sl
 8006260:	018a      	lsls	r2, r1, #6
 8006262:	4651      	mov	r1, sl
 8006264:	1a54      	subs	r4, r2, r1
 8006266:	4659      	mov	r1, fp
 8006268:	eb63 0501 	sbc.w	r5, r3, r1
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	00eb      	lsls	r3, r5, #3
 8006276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627a:	00e2      	lsls	r2, r4, #3
 800627c:	4614      	mov	r4, r2
 800627e:	461d      	mov	r5, r3
 8006280:	4643      	mov	r3, r8
 8006282:	18e3      	adds	r3, r4, r3
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	464b      	mov	r3, r9
 8006288:	eb45 0303 	adc.w	r3, r5, r3
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800629a:	4629      	mov	r1, r5
 800629c:	028b      	lsls	r3, r1, #10
 800629e:	4621      	mov	r1, r4
 80062a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062a4:	4621      	mov	r1, r4
 80062a6:	028a      	lsls	r2, r1, #10
 80062a8:	4610      	mov	r0, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062b0:	2200      	movs	r2, #0
 80062b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80062b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062ba:	f7fa fc95 	bl	8000be8 <__aeabi_uldivmod>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4613      	mov	r3, r2
 80062c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <HAL_RCC_GetSysClockFreq+0x458>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	0f1b      	lsrs	r3, r3, #28
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80062d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062e6:	e003      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCC_GetSysClockFreq+0x45c>)
 80062ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	37b8      	adds	r7, #184	@ 0xb8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	00f42400 	.word	0x00f42400

08006308 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e28d      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8083 	beq.w	800642e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006328:	4b94      	ldr	r3, [pc, #592]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 030c 	and.w	r3, r3, #12
 8006330:	2b04      	cmp	r3, #4
 8006332:	d019      	beq.n	8006368 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006334:	4b91      	ldr	r3, [pc, #580]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 030c 	and.w	r3, r3, #12
        || \
 800633c:	2b08      	cmp	r3, #8
 800633e:	d106      	bne.n	800634e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006340:	4b8e      	ldr	r3, [pc, #568]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800634c:	d00c      	beq.n	8006368 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634e:	4b8b      	ldr	r3, [pc, #556]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006356:	2b0c      	cmp	r3, #12
 8006358:	d112      	bne.n	8006380 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800635a:	4b88      	ldr	r3, [pc, #544]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006366:	d10b      	bne.n	8006380 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006368:	4b84      	ldr	r3, [pc, #528]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d05b      	beq.n	800642c <HAL_RCC_OscConfig+0x124>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d157      	bne.n	800642c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e25a      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d106      	bne.n	8006398 <HAL_RCC_OscConfig+0x90>
 800638a:	4b7c      	ldr	r3, [pc, #496]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a7b      	ldr	r2, [pc, #492]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e01d      	b.n	80063d4 <HAL_RCC_OscConfig+0xcc>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0xb4>
 80063a2:	4b76      	ldr	r3, [pc, #472]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a75      	ldr	r2, [pc, #468]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4b73      	ldr	r3, [pc, #460]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a72      	ldr	r2, [pc, #456]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e00b      	b.n	80063d4 <HAL_RCC_OscConfig+0xcc>
 80063bc:	4b6f      	ldr	r3, [pc, #444]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a6e      	ldr	r2, [pc, #440]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4b6c      	ldr	r3, [pc, #432]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6b      	ldr	r2, [pc, #428]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7fb fcd4 	bl	8001d88 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e4:	f7fb fcd0 	bl	8001d88 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b64      	cmp	r3, #100	@ 0x64
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e21f      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f6:	4b61      	ldr	r3, [pc, #388]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0xdc>
 8006402:	e014      	b.n	800642e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fb fcc0 	bl	8001d88 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800640c:	f7fb fcbc 	bl	8001d88 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	@ 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e20b      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641e:	4b57      	ldr	r3, [pc, #348]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x104>
 800642a:	e000      	b.n	800642e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06f      	beq.n	800651a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800643a:	4b50      	ldr	r3, [pc, #320]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	2b00      	cmp	r3, #0
 8006444:	d017      	beq.n	8006476 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006446:	4b4d      	ldr	r3, [pc, #308]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 030c 	and.w	r3, r3, #12
        || \
 800644e:	2b08      	cmp	r3, #8
 8006450:	d105      	bne.n	800645e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006452:	4b4a      	ldr	r3, [pc, #296]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800645e:	4b47      	ldr	r3, [pc, #284]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d11c      	bne.n	80064a4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800646a:	4b44      	ldr	r3, [pc, #272]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d116      	bne.n	80064a4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006476:	4b41      	ldr	r3, [pc, #260]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_RCC_OscConfig+0x186>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d001      	beq.n	800648e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e1d3      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648e:	4b3b      	ldr	r3, [pc, #236]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	4937      	ldr	r1, [pc, #220]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a2:	e03a      	b.n	800651a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d020      	beq.n	80064ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064ac:	4b34      	ldr	r3, [pc, #208]	@ (8006580 <HAL_RCC_OscConfig+0x278>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fb fc69 	bl	8001d88 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ba:	f7fb fc65 	bl	8001d88 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e1b4      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064cc:	4b2b      	ldr	r3, [pc, #172]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d8:	4b28      	ldr	r3, [pc, #160]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4925      	ldr	r1, [pc, #148]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]
 80064ec:	e015      	b.n	800651a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ee:	4b24      	ldr	r3, [pc, #144]	@ (8006580 <HAL_RCC_OscConfig+0x278>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fb fc48 	bl	8001d88 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064fc:	f7fb fc44 	bl	8001d88 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e193      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650e:	4b1b      	ldr	r3, [pc, #108]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d036      	beq.n	8006594 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d016      	beq.n	800655c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800652e:	4b15      	ldr	r3, [pc, #84]	@ (8006584 <HAL_RCC_OscConfig+0x27c>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006534:	f7fb fc28 	bl	8001d88 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800653c:	f7fb fc24 	bl	8001d88 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e173      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654e:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 8006550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0x234>
 800655a:	e01b      	b.n	8006594 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800655c:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <HAL_RCC_OscConfig+0x27c>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006562:	f7fb fc11 	bl	8001d88 <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006568:	e00e      	b.n	8006588 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800656a:	f7fb fc0d 	bl	8001d88 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d907      	bls.n	8006588 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e15c      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
 800657c:	40023800 	.word	0x40023800
 8006580:	42470000 	.word	0x42470000
 8006584:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006588:	4b8a      	ldr	r3, [pc, #552]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800658a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1ea      	bne.n	800656a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8097 	beq.w	80066d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a6:	4b83      	ldr	r3, [pc, #524]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10f      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	4b7f      	ldr	r3, [pc, #508]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	4a7e      	ldr	r2, [pc, #504]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065c2:	4b7c      	ldr	r3, [pc, #496]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d2:	4b79      	ldr	r3, [pc, #484]	@ (80067b8 <HAL_RCC_OscConfig+0x4b0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d118      	bne.n	8006610 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065de:	4b76      	ldr	r3, [pc, #472]	@ (80067b8 <HAL_RCC_OscConfig+0x4b0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a75      	ldr	r2, [pc, #468]	@ (80067b8 <HAL_RCC_OscConfig+0x4b0>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ea:	f7fb fbcd 	bl	8001d88 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f2:	f7fb fbc9 	bl	8001d88 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e118      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006604:	4b6c      	ldr	r3, [pc, #432]	@ (80067b8 <HAL_RCC_OscConfig+0x4b0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <HAL_RCC_OscConfig+0x31e>
 8006618:	4b66      	ldr	r3, [pc, #408]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	4a65      	ldr	r2, [pc, #404]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6713      	str	r3, [r2, #112]	@ 0x70
 8006624:	e01c      	b.n	8006660 <HAL_RCC_OscConfig+0x358>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b05      	cmp	r3, #5
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x340>
 800662e:	4b61      	ldr	r3, [pc, #388]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	4a60      	ldr	r2, [pc, #384]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006634:	f043 0304 	orr.w	r3, r3, #4
 8006638:	6713      	str	r3, [r2, #112]	@ 0x70
 800663a:	4b5e      	ldr	r3, [pc, #376]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663e:	4a5d      	ldr	r2, [pc, #372]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006640:	f043 0301 	orr.w	r3, r3, #1
 8006644:	6713      	str	r3, [r2, #112]	@ 0x70
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0x358>
 8006648:	4b5a      	ldr	r3, [pc, #360]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664c:	4a59      	ldr	r2, [pc, #356]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	6713      	str	r3, [r2, #112]	@ 0x70
 8006654:	4b57      	ldr	r3, [pc, #348]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006658:	4a56      	ldr	r2, [pc, #344]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800665a:	f023 0304 	bic.w	r3, r3, #4
 800665e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d015      	beq.n	8006694 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006668:	f7fb fb8e 	bl	8001d88 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666e:	e00a      	b.n	8006686 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006670:	f7fb fb8a 	bl	8001d88 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e0d7      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006686:	4b4b      	ldr	r3, [pc, #300]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0ee      	beq.n	8006670 <HAL_RCC_OscConfig+0x368>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fb fb78 	bl	8001d88 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800669a:	e00a      	b.n	80066b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669c:	f7fb fb74 	bl	8001d88 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e0c1      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b2:	4b40      	ldr	r3, [pc, #256]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1ee      	bne.n	800669c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066c4:	4b3b      	ldr	r3, [pc, #236]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	4a3a      	ldr	r2, [pc, #232]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80066ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80ad 	beq.w	8006834 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066da:	4b36      	ldr	r3, [pc, #216]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 030c 	and.w	r3, r3, #12
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d060      	beq.n	80067a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d145      	bne.n	800677a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ee:	4b33      	ldr	r3, [pc, #204]	@ (80067bc <HAL_RCC_OscConfig+0x4b4>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fb fb48 	bl	8001d88 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066fc:	f7fb fb44 	bl	8001d88 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e093      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670e:	4b29      	ldr	r3, [pc, #164]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006728:	019b      	lsls	r3, r3, #6
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	3b01      	subs	r3, #1
 8006734:	041b      	lsls	r3, r3, #16
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	061b      	lsls	r3, r3, #24
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	071b      	lsls	r3, r3, #28
 8006746:	491b      	ldr	r1, [pc, #108]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800674c:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCC_OscConfig+0x4b4>)
 800674e:	2201      	movs	r2, #1
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006752:	f7fb fb19 	bl	8001d88 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675a:	f7fb fb15 	bl	8001d88 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e064      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676c:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x452>
 8006778:	e05c      	b.n	8006834 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677a:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <HAL_RCC_OscConfig+0x4b4>)
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fb fb02 	bl	8001d88 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fafe 	bl	8001d88 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e04d      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <HAL_RCC_OscConfig+0x4ac>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1f0      	bne.n	8006788 <HAL_RCC_OscConfig+0x480>
 80067a6:	e045      	b.n	8006834 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e040      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40007000 	.word	0x40007000
 80067bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006840 <HAL_RCC_OscConfig+0x538>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d030      	beq.n	8006830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d129      	bne.n	8006830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d122      	bne.n	8006830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d119      	bne.n	8006830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	3b01      	subs	r3, #1
 800680a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d10f      	bne.n	8006830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d107      	bne.n	8006830 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800

08006844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e042      	b.n	80068dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fb f888 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2224      	movs	r2, #36	@ 0x24
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f973 	bl	8006b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800689c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	@ 0x28
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b20      	cmp	r3, #32
 8006902:	d175      	bne.n	80069f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <HAL_UART_Transmit+0x2c>
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e06e      	b.n	80069f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2221      	movs	r2, #33	@ 0x21
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006922:	f7fb fa31 	bl	8001d88 <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800693c:	d108      	bne.n	8006950 <HAL_UART_Transmit+0x6c>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d104      	bne.n	8006950 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	e003      	b.n	8006958 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006958:	e02e      	b.n	80069b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	2180      	movs	r1, #128	@ 0x80
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f848 	bl	80069fa <UART_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e03a      	b.n	80069f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	3302      	adds	r3, #2
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	e007      	b.n	80069aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	781a      	ldrb	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1cb      	bne.n	800695a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2200      	movs	r2, #0
 80069ca:	2140      	movs	r1, #64	@ 0x40
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f814 	bl	80069fa <UART_WaitOnFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e006      	b.n	80069f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0a:	e03b      	b.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a12:	d037      	beq.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a14:	f7fb f9b8 	bl	8001d88 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d302      	bcc.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e03a      	b.n	8006aa4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d023      	beq.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b80      	cmp	r3, #128	@ 0x80
 8006a40:	d020      	beq.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b40      	cmp	r3, #64	@ 0x40
 8006a46:	d01d      	beq.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d116      	bne.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f81d 	bl	8006aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2208      	movs	r2, #8
 8006a76:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e00f      	b.n	8006aa4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	bf0c      	ite	eq
 8006a94:	2301      	moveq	r3, #1
 8006a96:	2300      	movne	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d0b4      	beq.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b095      	sub	sp, #84	@ 0x54
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ad4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3314      	adds	r3, #20
 8006aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3314      	adds	r3, #20
 8006b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e5      	bne.n	8006ae8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d119      	bne.n	8006b58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b44:	61ba      	str	r2, [r7, #24]
 8006b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6979      	ldr	r1, [r7, #20]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	613b      	str	r3, [r7, #16]
   return(result);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e5      	bne.n	8006b24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b66:	bf00      	nop
 8006b68:	3754      	adds	r7, #84	@ 0x54
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
	...

08006b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b78:	b0c0      	sub	sp, #256	@ 0x100
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	ea40 0301 	orr.w	r3, r0, r1
 8006b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bcc:	f021 010c 	bic.w	r1, r1, #12
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bee:	6999      	ldr	r1, [r3, #24]
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	ea40 0301 	orr.w	r3, r0, r1
 8006bfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b8f      	ldr	r3, [pc, #572]	@ (8006e40 <UART_SetConfig+0x2cc>)
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d005      	beq.n	8006c14 <UART_SetConfig+0xa0>
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8006e44 <UART_SetConfig+0x2d0>)
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d104      	bne.n	8006c1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fe fe0a 	bl	800582c <HAL_RCC_GetPCLK2Freq>
 8006c18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c1c:	e003      	b.n	8006c26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c1e:	f7fe fdf1 	bl	8005804 <HAL_RCC_GetPCLK1Freq>
 8006c22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c30:	f040 810c 	bne.w	8006e4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c46:	4622      	mov	r2, r4
 8006c48:	462b      	mov	r3, r5
 8006c4a:	1891      	adds	r1, r2, r2
 8006c4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c4e:	415b      	adcs	r3, r3
 8006c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c56:	4621      	mov	r1, r4
 8006c58:	eb12 0801 	adds.w	r8, r2, r1
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	eb43 0901 	adc.w	r9, r3, r1
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c76:	4690      	mov	r8, r2
 8006c78:	4699      	mov	r9, r3
 8006c7a:	4623      	mov	r3, r4
 8006c7c:	eb18 0303 	adds.w	r3, r8, r3
 8006c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c84:	462b      	mov	r3, r5
 8006c86:	eb49 0303 	adc.w	r3, r9, r3
 8006c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	18db      	adds	r3, r3, r3
 8006ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ca8:	4613      	mov	r3, r2
 8006caa:	eb42 0303 	adc.w	r3, r2, r3
 8006cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cb8:	f7f9 ff96 	bl	8000be8 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4b61      	ldr	r3, [pc, #388]	@ (8006e48 <UART_SetConfig+0x2d4>)
 8006cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	011c      	lsls	r4, r3, #4
 8006cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006cdc:	4642      	mov	r2, r8
 8006cde:	464b      	mov	r3, r9
 8006ce0:	1891      	adds	r1, r2, r2
 8006ce2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ce4:	415b      	adcs	r3, r3
 8006ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cec:	4641      	mov	r1, r8
 8006cee:	eb12 0a01 	adds.w	sl, r2, r1
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	eb43 0b01 	adc.w	fp, r3, r1
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d0c:	4692      	mov	sl, r2
 8006d0e:	469b      	mov	fp, r3
 8006d10:	4643      	mov	r3, r8
 8006d12:	eb1a 0303 	adds.w	r3, sl, r3
 8006d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	18db      	adds	r3, r3, r3
 8006d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d3e:	4613      	mov	r3, r2
 8006d40:	eb42 0303 	adc.w	r3, r2, r3
 8006d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d4e:	f7f9 ff4b 	bl	8000be8 <__aeabi_uldivmod>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	4b3b      	ldr	r3, [pc, #236]	@ (8006e48 <UART_SetConfig+0x2d4>)
 8006d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	2264      	movs	r2, #100	@ 0x64
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
 8006d66:	1acb      	subs	r3, r1, r3
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d6e:	4b36      	ldr	r3, [pc, #216]	@ (8006e48 <UART_SetConfig+0x2d4>)
 8006d70:	fba3 2302 	umull	r2, r3, r3, r2
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d7c:	441c      	add	r4, r3
 8006d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	1891      	adds	r1, r2, r2
 8006d96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d98:	415b      	adcs	r3, r3
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006da0:	4641      	mov	r1, r8
 8006da2:	1851      	adds	r1, r2, r1
 8006da4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006da6:	4649      	mov	r1, r9
 8006da8:	414b      	adcs	r3, r1
 8006daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006db8:	4659      	mov	r1, fp
 8006dba:	00cb      	lsls	r3, r1, #3
 8006dbc:	4651      	mov	r1, sl
 8006dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	00ca      	lsls	r2, r1, #3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4642      	mov	r2, r8
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	460a      	mov	r2, r1
 8006dd8:	eb42 0303 	adc.w	r3, r2, r3
 8006ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006df4:	460b      	mov	r3, r1
 8006df6:	18db      	adds	r3, r3, r3
 8006df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	eb42 0303 	adc.w	r3, r2, r3
 8006e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e0a:	f7f9 feed 	bl	8000be8 <__aeabi_uldivmod>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4b0d      	ldr	r3, [pc, #52]	@ (8006e48 <UART_SetConfig+0x2d4>)
 8006e14:	fba3 1302 	umull	r1, r3, r3, r2
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	2164      	movs	r1, #100	@ 0x64
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	3332      	adds	r3, #50	@ 0x32
 8006e26:	4a08      	ldr	r2, [pc, #32]	@ (8006e48 <UART_SetConfig+0x2d4>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	f003 0207 	and.w	r2, r3, #7
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4422      	add	r2, r4
 8006e3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e3c:	e106      	b.n	800704c <UART_SetConfig+0x4d8>
 8006e3e:	bf00      	nop
 8006e40:	40011000 	.word	0x40011000
 8006e44:	40011400 	.word	0x40011400
 8006e48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e5e:	4642      	mov	r2, r8
 8006e60:	464b      	mov	r3, r9
 8006e62:	1891      	adds	r1, r2, r2
 8006e64:	6239      	str	r1, [r7, #32]
 8006e66:	415b      	adcs	r3, r3
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e6e:	4641      	mov	r1, r8
 8006e70:	1854      	adds	r4, r2, r1
 8006e72:	4649      	mov	r1, r9
 8006e74:	eb43 0501 	adc.w	r5, r3, r1
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	00eb      	lsls	r3, r5, #3
 8006e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e86:	00e2      	lsls	r2, r4, #3
 8006e88:	4614      	mov	r4, r2
 8006e8a:	461d      	mov	r5, r3
 8006e8c:	4643      	mov	r3, r8
 8006e8e:	18e3      	adds	r3, r4, r3
 8006e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e94:	464b      	mov	r3, r9
 8006e96:	eb45 0303 	adc.w	r3, r5, r3
 8006e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006eba:	4629      	mov	r1, r5
 8006ebc:	008b      	lsls	r3, r1, #2
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	008a      	lsls	r2, r1, #2
 8006ec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ecc:	f7f9 fe8c 	bl	8000be8 <__aeabi_uldivmod>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4b60      	ldr	r3, [pc, #384]	@ (8007058 <UART_SetConfig+0x4e4>)
 8006ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	011c      	lsls	r4, r3, #4
 8006ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006eec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	1891      	adds	r1, r2, r2
 8006ef6:	61b9      	str	r1, [r7, #24]
 8006ef8:	415b      	adcs	r3, r3
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f00:	4641      	mov	r1, r8
 8006f02:	1851      	adds	r1, r2, r1
 8006f04:	6139      	str	r1, [r7, #16]
 8006f06:	4649      	mov	r1, r9
 8006f08:	414b      	adcs	r3, r1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f18:	4659      	mov	r1, fp
 8006f1a:	00cb      	lsls	r3, r1, #3
 8006f1c:	4651      	mov	r1, sl
 8006f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f22:	4651      	mov	r1, sl
 8006f24:	00ca      	lsls	r2, r1, #3
 8006f26:	4610      	mov	r0, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	189b      	adds	r3, r3, r2
 8006f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f34:	464b      	mov	r3, r9
 8006f36:	460a      	mov	r2, r1
 8006f38:	eb42 0303 	adc.w	r3, r2, r3
 8006f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f58:	4649      	mov	r1, r9
 8006f5a:	008b      	lsls	r3, r1, #2
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f62:	4641      	mov	r1, r8
 8006f64:	008a      	lsls	r2, r1, #2
 8006f66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f6a:	f7f9 fe3d 	bl	8000be8 <__aeabi_uldivmod>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4611      	mov	r1, r2
 8006f74:	4b38      	ldr	r3, [pc, #224]	@ (8007058 <UART_SetConfig+0x4e4>)
 8006f76:	fba3 2301 	umull	r2, r3, r3, r1
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	2264      	movs	r2, #100	@ 0x64
 8006f7e:	fb02 f303 	mul.w	r3, r2, r3
 8006f82:	1acb      	subs	r3, r1, r3
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	3332      	adds	r3, #50	@ 0x32
 8006f88:	4a33      	ldr	r2, [pc, #204]	@ (8007058 <UART_SetConfig+0x4e4>)
 8006f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f94:	441c      	add	r4, r3
 8006f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	1891      	adds	r1, r2, r2
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	415b      	adcs	r3, r3
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	1851      	adds	r1, r2, r1
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	4649      	mov	r1, r9
 8006fbc:	414b      	adcs	r3, r1
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fcc:	4659      	mov	r1, fp
 8006fce:	00cb      	lsls	r3, r1, #3
 8006fd0:	4651      	mov	r1, sl
 8006fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd6:	4651      	mov	r1, sl
 8006fd8:	00ca      	lsls	r2, r1, #3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	460a      	mov	r2, r1
 8006fea:	eb42 0303 	adc.w	r3, r2, r3
 8006fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ffa:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007008:	4649      	mov	r1, r9
 800700a:	008b      	lsls	r3, r1, #2
 800700c:	4641      	mov	r1, r8
 800700e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007012:	4641      	mov	r1, r8
 8007014:	008a      	lsls	r2, r1, #2
 8007016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800701a:	f7f9 fde5 	bl	8000be8 <__aeabi_uldivmod>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <UART_SetConfig+0x4e4>)
 8007024:	fba3 1302 	umull	r1, r3, r3, r2
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	2164      	movs	r1, #100	@ 0x64
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	3332      	adds	r3, #50	@ 0x32
 8007036:	4a08      	ldr	r2, [pc, #32]	@ (8007058 <UART_SetConfig+0x4e4>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	f003 020f 	and.w	r2, r3, #15
 8007042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4422      	add	r2, r4
 800704a:	609a      	str	r2, [r3, #8]
}
 800704c:	bf00      	nop
 800704e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007052:	46bd      	mov	sp, r7
 8007054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007058:	51eb851f 	.word	0x51eb851f

0800705c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800705c:	b084      	sub	sp, #16
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	f107 001c 	add.w	r0, r7, #28
 800706a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800706e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007072:	2b01      	cmp	r3, #1
 8007074:	d123      	bne.n	80070be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800708a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800709e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d105      	bne.n	80070b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fae2 	bl	800867c <USB_CoreReset>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]
 80070bc:	e01b      	b.n	80070f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 fad6 	bl	800867c <USB_CoreReset>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80070e8:	e005      	b.n	80070f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070f6:	7fbb      	ldrb	r3, [r7, #30]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10b      	bne.n	8007114 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f043 0206 	orr.w	r2, r3, #6
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f043 0220 	orr.w	r2, r3, #32
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007120:	b004      	add	sp, #16
 8007122:	4770      	bx	lr

08007124 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	4613      	mov	r3, r2
 8007130:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d165      	bne.n	8007204 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4a41      	ldr	r2, [pc, #260]	@ (8007240 <USB_SetTurnaroundTime+0x11c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d906      	bls.n	800714e <USB_SetTurnaroundTime+0x2a>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a40      	ldr	r2, [pc, #256]	@ (8007244 <USB_SetTurnaroundTime+0x120>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d202      	bcs.n	800714e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007148:	230f      	movs	r3, #15
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	e062      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4a3c      	ldr	r2, [pc, #240]	@ (8007244 <USB_SetTurnaroundTime+0x120>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d306      	bcc.n	8007164 <USB_SetTurnaroundTime+0x40>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4a3b      	ldr	r2, [pc, #236]	@ (8007248 <USB_SetTurnaroundTime+0x124>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d202      	bcs.n	8007164 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800715e:	230e      	movs	r3, #14
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e057      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4a38      	ldr	r2, [pc, #224]	@ (8007248 <USB_SetTurnaroundTime+0x124>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d306      	bcc.n	800717a <USB_SetTurnaroundTime+0x56>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4a37      	ldr	r2, [pc, #220]	@ (800724c <USB_SetTurnaroundTime+0x128>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d202      	bcs.n	800717a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007174:	230d      	movs	r3, #13
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e04c      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4a33      	ldr	r2, [pc, #204]	@ (800724c <USB_SetTurnaroundTime+0x128>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d306      	bcc.n	8007190 <USB_SetTurnaroundTime+0x6c>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4a32      	ldr	r2, [pc, #200]	@ (8007250 <USB_SetTurnaroundTime+0x12c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d802      	bhi.n	8007190 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800718a:	230c      	movs	r3, #12
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e041      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4a2f      	ldr	r2, [pc, #188]	@ (8007250 <USB_SetTurnaroundTime+0x12c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d906      	bls.n	80071a6 <USB_SetTurnaroundTime+0x82>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4a2e      	ldr	r2, [pc, #184]	@ (8007254 <USB_SetTurnaroundTime+0x130>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d802      	bhi.n	80071a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071a0:	230b      	movs	r3, #11
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e036      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007254 <USB_SetTurnaroundTime+0x130>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d906      	bls.n	80071bc <USB_SetTurnaroundTime+0x98>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4a29      	ldr	r2, [pc, #164]	@ (8007258 <USB_SetTurnaroundTime+0x134>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d802      	bhi.n	80071bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80071b6:	230a      	movs	r3, #10
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e02b      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4a26      	ldr	r2, [pc, #152]	@ (8007258 <USB_SetTurnaroundTime+0x134>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d906      	bls.n	80071d2 <USB_SetTurnaroundTime+0xae>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4a25      	ldr	r2, [pc, #148]	@ (800725c <USB_SetTurnaroundTime+0x138>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d202      	bcs.n	80071d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071cc:	2309      	movs	r3, #9
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e020      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4a21      	ldr	r2, [pc, #132]	@ (800725c <USB_SetTurnaroundTime+0x138>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d306      	bcc.n	80071e8 <USB_SetTurnaroundTime+0xc4>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	4a20      	ldr	r2, [pc, #128]	@ (8007260 <USB_SetTurnaroundTime+0x13c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d802      	bhi.n	80071e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80071e2:	2308      	movs	r3, #8
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e015      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007260 <USB_SetTurnaroundTime+0x13c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d906      	bls.n	80071fe <USB_SetTurnaroundTime+0xda>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007264 <USB_SetTurnaroundTime+0x140>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d202      	bcs.n	80071fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071f8:	2307      	movs	r3, #7
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e00a      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071fe:	2306      	movs	r3, #6
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e007      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d102      	bne.n	8007210 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800720a:	2309      	movs	r3, #9
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	e001      	b.n	8007214 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007210:	2309      	movs	r3, #9
 8007212:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	029b      	lsls	r3, r3, #10
 8007228:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800722c:	431a      	orrs	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	00d8acbf 	.word	0x00d8acbf
 8007244:	00e4e1c0 	.word	0x00e4e1c0
 8007248:	00f42400 	.word	0x00f42400
 800724c:	01067380 	.word	0x01067380
 8007250:	011a499f 	.word	0x011a499f
 8007254:	01312cff 	.word	0x01312cff
 8007258:	014ca43f 	.word	0x014ca43f
 800725c:	016e3600 	.word	0x016e3600
 8007260:	01a6ab1f 	.word	0x01a6ab1f
 8007264:	01e84800 	.word	0x01e84800

08007268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f043 0201 	orr.w	r2, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f023 0201 	bic.w	r2, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d115      	bne.n	80072fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072da:	200a      	movs	r0, #10
 80072dc:	f7fa fd60 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	330a      	adds	r3, #10
 80072e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 f939 	bl	800855e <USB_GetMode>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d01e      	beq.n	8007330 <USB_SetCurrentMode+0x84>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80072f6:	d9f0      	bls.n	80072da <USB_SetCurrentMode+0x2e>
 80072f8:	e01a      	b.n	8007330 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d115      	bne.n	800732c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800730c:	200a      	movs	r0, #10
 800730e:	f7fa fd47 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	330a      	adds	r3, #10
 8007316:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 f920 	bl	800855e <USB_GetMode>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <USB_SetCurrentMode+0x84>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2bc7      	cmp	r3, #199	@ 0xc7
 8007328:	d9f0      	bls.n	800730c <USB_SetCurrentMode+0x60>
 800732a:	e001      	b.n	8007330 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e005      	b.n	800733c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2bc8      	cmp	r3, #200	@ 0xc8
 8007334:	d101      	bne.n	800733a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007344:	b084      	sub	sp, #16
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e009      	b.n	8007378 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	3340      	adds	r3, #64	@ 0x40
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	2200      	movs	r2, #0
 8007370:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3301      	adds	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b0e      	cmp	r3, #14
 800737c:	d9f2      	bls.n	8007364 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800737e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11c      	bne.n	80073c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007394:	f043 0302 	orr.w	r3, r3, #2
 8007398:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e005      	b.n	80073cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073d2:	461a      	mov	r2, r3
 80073d4:	2300      	movs	r3, #0
 80073d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10d      	bne.n	80073fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f968 	bl	80076c0 <USB_SetDevSpeed>
 80073f0:	e008      	b.n	8007404 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073f2:	2101      	movs	r1, #1
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f963 	bl	80076c0 <USB_SetDevSpeed>
 80073fa:	e003      	b.n	8007404 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073fc:	2103      	movs	r1, #3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f95e 	bl	80076c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007404:	2110      	movs	r1, #16
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8fa 	bl	8007600 <USB_FlushTxFifo>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f924 	bl	8007664 <USB_FlushRxFifo>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800742c:	461a      	mov	r2, r3
 800742e:	2300      	movs	r3, #0
 8007430:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007438:	461a      	mov	r2, r3
 800743a:	2300      	movs	r3, #0
 800743c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007444:	461a      	mov	r2, r3
 8007446:	2300      	movs	r3, #0
 8007448:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	e043      	b.n	80074d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007466:	d118      	bne.n	800749a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747a:	461a      	mov	r2, r3
 800747c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e013      	b.n	80074ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007490:	461a      	mov	r2, r3
 8007492:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e008      	b.n	80074ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a6:	461a      	mov	r2, r3
 80074a8:	2300      	movs	r3, #0
 80074aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b8:	461a      	mov	r2, r3
 80074ba:	2300      	movs	r3, #0
 80074bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ca:	461a      	mov	r2, r3
 80074cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3301      	adds	r3, #1
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074dc:	461a      	mov	r2, r3
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d3b5      	bcc.n	8007450 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	e043      	b.n	8007572 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007500:	d118      	bne.n	8007534 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007514:	461a      	mov	r2, r3
 8007516:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	e013      	b.n	8007546 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752a:	461a      	mov	r2, r3
 800752c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e008      	b.n	8007546 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	461a      	mov	r2, r3
 8007542:	2300      	movs	r3, #0
 8007544:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007552:	461a      	mov	r2, r3
 8007554:	2300      	movs	r3, #0
 8007556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007564:	461a      	mov	r2, r3
 8007566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800756a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	3301      	adds	r3, #1
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007576:	461a      	mov	r2, r3
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	4293      	cmp	r3, r2
 800757c:	d3b5      	bcc.n	80074ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800758c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007590:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800759e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d105      	bne.n	80075b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f043 0210 	orr.w	r2, r3, #16
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	4b10      	ldr	r3, [pc, #64]	@ (80075fc <USB_DevInit+0x2b8>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f043 0208 	orr.w	r2, r3, #8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d107      	bne.n	80075ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075e4:	f043 0304 	orr.w	r3, r3, #4
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f8:	b004      	add	sp, #16
 80075fa:	4770      	bx	lr
 80075fc:	803c3800 	.word	0x803c3800

08007600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800761a:	d901      	bls.n	8007620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e01b      	b.n	8007658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	daf2      	bge.n	800760e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	019b      	lsls	r3, r3, #6
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007644:	d901      	bls.n	800764a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e006      	b.n	8007658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b20      	cmp	r3, #32
 8007654:	d0f0      	beq.n	8007638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800767c:	d901      	bls.n	8007682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e018      	b.n	80076b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	daf2      	bge.n	8007670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2210      	movs	r2, #16
 8007692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076a0:	d901      	bls.n	80076a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e006      	b.n	80076b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d0f0      	beq.n	8007694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076e0:	4313      	orrs	r3, r2
 80076e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b087      	sub	sp, #28
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0306 	and.w	r3, r3, #6
 800770a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007712:	2300      	movs	r3, #0
 8007714:	75fb      	strb	r3, [r7, #23]
 8007716:	e00a      	b.n	800772e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d002      	beq.n	8007724 <USB_GetDevSpeed+0x32>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b06      	cmp	r3, #6
 8007722:	d102      	bne.n	800772a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007724:	2302      	movs	r3, #2
 8007726:	75fb      	strb	r3, [r7, #23]
 8007728:	e001      	b.n	800772e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800772a:	230f      	movs	r3, #15
 800772c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007730:	4618      	mov	r0, r3
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d13a      	bne.n	80077ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	2101      	movs	r1, #1
 800776a:	fa01 f303 	lsl.w	r3, r1, r3
 800776e:	b29b      	uxth	r3, r3
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007776:	4313      	orrs	r3, r2
 8007778:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d155      	bne.n	800783c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	791b      	ldrb	r3, [r3, #4]
 80077aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	059b      	lsls	r3, r3, #22
 80077b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077b4:	4313      	orrs	r3, r2
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	e036      	b.n	800783c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d4:	69da      	ldr	r2, [r3, #28]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	2101      	movs	r1, #1
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077ec:	4313      	orrs	r3, r2
 80077ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d11a      	bne.n	800783c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	791b      	ldrb	r3, [r3, #4]
 8007820:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007822:	430b      	orrs	r3, r1
 8007824:	4313      	orrs	r3, r2
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	440a      	add	r2, r1
 800782e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800783a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d161      	bne.n	800792c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800787a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800787e:	d11f      	bne.n	80078c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	440a      	add	r2, r1
 8007896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800789a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800789e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	2101      	movs	r1, #1
 80078d2:	fa01 f303 	lsl.w	r3, r1, r3
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	43db      	mvns	r3, r3
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078e0:	4013      	ands	r3, r2
 80078e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ea:	69da      	ldr	r2, [r3, #28]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	2101      	movs	r1, #1
 80078f6:	fa01 f303 	lsl.w	r3, r1, r3
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	43db      	mvns	r3, r3
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007904:	4013      	ands	r3, r2
 8007906:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	0159      	lsls	r1, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	440b      	add	r3, r1
 800791e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007922:	4619      	mov	r1, r3
 8007924:	4b35      	ldr	r3, [pc, #212]	@ (80079fc <USB_DeactivateEndpoint+0x1b0>)
 8007926:	4013      	ands	r3, r2
 8007928:	600b      	str	r3, [r1, #0]
 800792a:	e060      	b.n	80079ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800793e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007942:	d11f      	bne.n	8007984 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	440a      	add	r2, r1
 800795a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800795e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007962:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800797e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	2101      	movs	r1, #1
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	43db      	mvns	r3, r3
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079a4:	4013      	ands	r3, r2
 80079a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ae:	69da      	ldr	r2, [r3, #28]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	2101      	movs	r1, #1
 80079ba:	fa01 f303 	lsl.w	r3, r1, r3
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	43db      	mvns	r3, r3
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079c8:	4013      	ands	r3, r2
 80079ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	0159      	lsls	r1, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	440b      	add	r3, r1
 80079e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e6:	4619      	mov	r1, r3
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <USB_DeactivateEndpoint+0x1b4>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	ec337800 	.word	0xec337800
 8007a00:	eff37800 	.word	0xeff37800

08007a04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08a      	sub	sp, #40	@ 0x28
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	f040 817f 	bne.w	8007d24 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d132      	bne.n	8007a94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a8c:	0cdb      	lsrs	r3, r3, #19
 8007a8e:	04db      	lsls	r3, r3, #19
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	e097      	b.n	8007bc4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aae:	0cdb      	lsrs	r3, r3, #19
 8007ab0:	04db      	lsls	r3, r3, #19
 8007ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ace:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ad2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007ad6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11a      	bne.n	8007b14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	691a      	ldr	r2, [r3, #16]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d903      	bls.n	8007af2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b10:	6113      	str	r3, [r2, #16]
 8007b12:	e044      	b.n	8007b9e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	8afb      	ldrh	r3, [r7, #22]
 8007b3a:	04d9      	lsls	r1, r3, #19
 8007b3c:	4ba4      	ldr	r3, [pc, #656]	@ (8007dd0 <USB_EPStartXfer+0x3cc>)
 8007b3e:	400b      	ands	r3, r1
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	0148      	lsls	r0, r1, #5
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	4401      	add	r1, r0
 8007b48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	791b      	ldrb	r3, [r3, #4]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d122      	bne.n	8007b9e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b72:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007b76:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	8afb      	ldrh	r3, [r7, #22]
 8007b88:	075b      	lsls	r3, r3, #29
 8007b8a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007b8e:	69b9      	ldr	r1, [r7, #24]
 8007b90:	0148      	lsls	r0, r1, #5
 8007b92:	69f9      	ldr	r1, [r7, #28]
 8007b94:	4401      	add	r1, r0
 8007b96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb4:	69b9      	ldr	r1, [r7, #24]
 8007bb6:	0148      	lsls	r0, r1, #5
 8007bb8:	69f9      	ldr	r1, [r7, #28]
 8007bba:	4401      	add	r1, r0
 8007bbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d14b      	bne.n	8007c62 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bde:	461a      	mov	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	791b      	ldrb	r3, [r3, #4]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d128      	bne.n	8007c40 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d110      	bne.n	8007c20 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e00f      	b.n	8007c40 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c3e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	e166      	b.n	8007f30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	791b      	ldrb	r3, [r3, #4]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d015      	beq.n	8007cb6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 814e 	beq.w	8007f30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8007caa:	69f9      	ldr	r1, [r7, #28]
 8007cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	634b      	str	r3, [r1, #52]	@ 0x34
 8007cb4:	e13c      	b.n	8007f30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d110      	bne.n	8007ce8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	e00f      	b.n	8007d08 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	68d9      	ldr	r1, [r3, #12]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	b298      	uxth	r0, r3
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f9b9 	bl	8008094 <USB_WritePacket>
 8007d22:	e105      	b.n	8007f30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3e:	0cdb      	lsrs	r3, r3, #19
 8007d40:	04db      	lsls	r3, r3, #19
 8007d42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d66:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d132      	bne.n	8007dd4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d9c:	69b9      	ldr	r1, [r7, #24]
 8007d9e:	0148      	lsls	r0, r1, #5
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	4401      	add	r1, r0
 8007da4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007da8:	4313      	orrs	r3, r2
 8007daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dca:	6113      	str	r3, [r2, #16]
 8007dcc:	e062      	b.n	8007e94 <USB_EPStartXfer+0x490>
 8007dce:	bf00      	nop
 8007dd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d123      	bne.n	8007e24 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de8:	691a      	ldr	r2, [r3, #16]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007df2:	69b9      	ldr	r1, [r7, #24]
 8007df4:	0148      	lsls	r0, r1, #5
 8007df6:	69f9      	ldr	r1, [r7, #28]
 8007df8:	4401      	add	r1, r0
 8007dfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e20:	6113      	str	r3, [r2, #16]
 8007e22:	e037      	b.n	8007e94 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	1e5a      	subs	r2, r3, #1
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	8afa      	ldrh	r2, [r7, #22]
 8007e40:	fb03 f202 	mul.w	r2, r3, r2
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	8afb      	ldrh	r3, [r7, #22]
 8007e58:	04d9      	lsls	r1, r3, #19
 8007e5a:	4b38      	ldr	r3, [pc, #224]	@ (8007f3c <USB_EPStartXfer+0x538>)
 8007e5c:	400b      	ands	r3, r1
 8007e5e:	69b9      	ldr	r1, [r7, #24]
 8007e60:	0148      	lsls	r0, r1, #5
 8007e62:	69f9      	ldr	r1, [r7, #28]
 8007e64:	4401      	add	r1, r0
 8007e66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e84:	69b9      	ldr	r1, [r7, #24]
 8007e86:	0148      	lsls	r0, r1, #5
 8007e88:	69f9      	ldr	r1, [r7, #28]
 8007e8a:	4401      	add	r1, r0
 8007e8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e90:	4313      	orrs	r3, r2
 8007e92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d10d      	bne.n	8007eb6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	68d9      	ldr	r1, [r3, #12]
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb2:	460a      	mov	r2, r1
 8007eb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	791b      	ldrb	r3, [r3, #4]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d128      	bne.n	8007f10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d110      	bne.n	8007ef0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	0151      	lsls	r1, r2, #5
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	440a      	add	r2, r1
 8007ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	e00f      	b.n	8007f10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	1ff80000 	.word	0x1ff80000

08007f40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d14a      	bne.n	8007ff4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f76:	f040 8086 	bne.w	8008086 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	7812      	ldrb	r2, [r2, #0]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d902      	bls.n	8007fd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd6:	e056      	b.n	8008086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ff0:	d0e7      	beq.n	8007fc2 <USB_EPStopXfer+0x82>
 8007ff2:	e048      	b.n	8008086 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800800c:	d13b      	bne.n	8008086 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	7812      	ldrb	r2, [r2, #0]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800802c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008030:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	7812      	ldrb	r2, [r2, #0]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008062:	4293      	cmp	r3, r2
 8008064:	d902      	bls.n	800806c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
          break;
 800806a:	e00c      	b.n	8008086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008084:	d0e7      	beq.n	8008056 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
}
 8008088:	4618      	mov	r0, r3
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008094:	b480      	push	{r7}
 8008096:	b089      	sub	sp, #36	@ 0x24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	460b      	mov	r3, r1
 80080a4:	71fb      	strb	r3, [r7, #7]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d123      	bne.n	8008102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080ba:	88bb      	ldrh	r3, [r7, #4]
 80080bc:	3303      	adds	r3, #3
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	e018      	b.n	80080fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	031a      	lsls	r2, r3, #12
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080d4:	461a      	mov	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	3301      	adds	r3, #1
 80080e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	3301      	adds	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	3301      	adds	r3, #1
 80080f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	3301      	adds	r3, #1
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3e2      	bcc.n	80080c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3724      	adds	r7, #36	@ 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008110:	b480      	push	{r7}
 8008112:	b08b      	sub	sp, #44	@ 0x2c
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	089b      	lsrs	r3, r3, #2
 800812a:	b29b      	uxth	r3, r3
 800812c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
 800813a:	e014      	b.n	8008166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	601a      	str	r2, [r3, #0]
    pDest++;
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	3301      	adds	r3, #1
 800814c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	3301      	adds	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008156:	3301      	adds	r3, #1
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	3301      	adds	r3, #1
 800815e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	3301      	adds	r3, #1
 8008164:	623b      	str	r3, [r7, #32]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	429a      	cmp	r2, r3
 800816c:	d3e6      	bcc.n	800813c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800816e:	8bfb      	ldrh	r3, [r7, #30]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01e      	beq.n	80081b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817e:	461a      	mov	r2, r3
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	b2da      	uxtb	r2, r3
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	701a      	strb	r2, [r3, #0]
      i++;
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	3301      	adds	r3, #1
 800819e:	623b      	str	r3, [r7, #32]
      pDest++;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	3301      	adds	r3, #1
 80081a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80081a6:	8bfb      	ldrh	r3, [r7, #30]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081ac:	8bfb      	ldrh	r3, [r7, #30]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1ea      	bne.n	8008188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	372c      	adds	r7, #44	@ 0x2c
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d12c      	bne.n	8008236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db12      	blt.n	8008214 <USB_EPSetStall+0x54>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00f      	beq.n	8008214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0151      	lsls	r1, r2, #5
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	440a      	add	r2, r1
 800820a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800820e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800822e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	e02b      	b.n	800828e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	db12      	blt.n	800826e <USB_EPSetStall+0xae>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00f      	beq.n	800826e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008268:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800826c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800828c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d128      	bne.n	800830a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	791b      	ldrb	r3, [r3, #4]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d003      	beq.n	80082e8 <USB_EPClearStall+0x4c>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	791b      	ldrb	r3, [r3, #4]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d138      	bne.n	800835a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	e027      	b.n	800835a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008324:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	2b03      	cmp	r3, #3
 8008330:	d003      	beq.n	800833a <USB_EPClearStall+0x9e>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	791b      	ldrb	r3, [r3, #4]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d10f      	bne.n	800835a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	0151      	lsls	r1, r2, #5
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	440a      	add	r2, r1
 8008350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008386:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800838a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800839c:	68f9      	ldr	r1, [r7, #12]
 800839e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083a2:	4313      	orrs	r3, r2
 80083a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083ce:	f023 0303 	bic.w	r3, r3, #3
 80083d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083e2:	f023 0302 	bic.w	r3, r3, #2
 80083e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008410:	f023 0303 	bic.w	r3, r3, #3
 8008414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4013      	ands	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	4013      	ands	r3, r2
 8008480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	0c1b      	lsrs	r3, r3, #16
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	4013      	ands	r3, r2
 80084b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	b29b      	uxth	r3, r3
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	4013      	ands	r3, r2
 80084f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084f4:	68bb      	ldr	r3, [r7, #8]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008502:	b480      	push	{r7}
 8008504:	b087      	sub	sp, #28
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	01db      	lsls	r3, r3, #7
 8008534:	b2db      	uxtb	r3, r3
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	4313      	orrs	r3, r2
 800853a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4013      	ands	r3, r2
 800854e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008550:	68bb      	ldr	r3, [r7, #8]
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	f003 0301 	and.w	r3, r3, #1
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008594:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008598:	f023 0307 	bic.w	r3, r3, #7
 800859c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	460b      	mov	r3, r1
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	333c      	adds	r3, #60	@ 0x3c
 80085d6:	3304      	adds	r3, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	4a26      	ldr	r2, [pc, #152]	@ (8008678 <USB_EP0_OutStart+0xb8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d90a      	bls.n	80085fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085f4:	d101      	bne.n	80085fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	e037      	b.n	800866a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	461a      	mov	r2, r3
 8008602:	2300      	movs	r3, #0
 8008604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008628:	f043 0318 	orr.w	r3, r3, #24
 800862c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800863c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008642:	7afb      	ldrb	r3, [r7, #11]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d10f      	bne.n	8008668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008662:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	4f54300a 	.word	0x4f54300a

0800867c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008694:	d901      	bls.n	800869a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e022      	b.n	80086e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	daf2      	bge.n	8008688 <USB_CoreReset+0xc>

  count = 10U;
 80086a2:	230a      	movs	r3, #10
 80086a4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80086a6:	e002      	b.n	80086ae <USB_CoreReset+0x32>
  {
    count--;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f9      	bne.n	80086a8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	f043 0201 	orr.w	r2, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086cc:	d901      	bls.n	80086d2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e006      	b.n	80086e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d0f0      	beq.n	80086c0 <USB_CoreReset+0x44>

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80086fc:	f002 fd5c 	bl	800b1b8 <USBD_static_malloc>
 8008700:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d109      	bne.n	800871c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	32b0      	adds	r2, #176	@ 0xb0
 8008712:	2100      	movs	r1, #0
 8008714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008718:	2302      	movs	r3, #2
 800871a:	e0d4      	b.n	80088c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800871c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008720:	2100      	movs	r1, #0
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f003 fafc 	bl	800bd20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	@ 0xb0
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	32b0      	adds	r2, #176	@ 0xb0
 8008742:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7c1b      	ldrb	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d138      	bne.n	80087c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008754:	4b5e      	ldr	r3, [pc, #376]	@ (80088d0 <USBD_CDC_Init+0x1e4>)
 8008756:	7819      	ldrb	r1, [r3, #0]
 8008758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800875c:	2202      	movs	r2, #2
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f002 fbb9 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008764:	4b5a      	ldr	r3, [pc, #360]	@ (80088d0 <USBD_CDC_Init+0x1e4>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 020f 	and.w	r2, r3, #15
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	3323      	adds	r3, #35	@ 0x23
 800877a:	2201      	movs	r2, #1
 800877c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800877e:	4b55      	ldr	r3, [pc, #340]	@ (80088d4 <USBD_CDC_Init+0x1e8>)
 8008780:	7819      	ldrb	r1, [r3, #0]
 8008782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008786:	2202      	movs	r2, #2
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f002 fba4 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800878e:	4b51      	ldr	r3, [pc, #324]	@ (80088d4 <USBD_CDC_Init+0x1e8>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80087a6:	2201      	movs	r2, #1
 80087a8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087aa:	4b4b      	ldr	r3, [pc, #300]	@ (80088d8 <USBD_CDC_Init+0x1ec>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 020f 	and.w	r2, r3, #15
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	331c      	adds	r3, #28
 80087c0:	2210      	movs	r2, #16
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e035      	b.n	8008832 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087c6:	4b42      	ldr	r3, [pc, #264]	@ (80088d0 <USBD_CDC_Init+0x1e4>)
 80087c8:	7819      	ldrb	r1, [r3, #0]
 80087ca:	2340      	movs	r3, #64	@ 0x40
 80087cc:	2202      	movs	r2, #2
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f002 fb81 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087d4:	4b3e      	ldr	r3, [pc, #248]	@ (80088d0 <USBD_CDC_Init+0x1e4>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	f003 020f 	and.w	r2, r3, #15
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	3323      	adds	r3, #35	@ 0x23
 80087ea:	2201      	movs	r2, #1
 80087ec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087ee:	4b39      	ldr	r3, [pc, #228]	@ (80088d4 <USBD_CDC_Init+0x1e8>)
 80087f0:	7819      	ldrb	r1, [r3, #0]
 80087f2:	2340      	movs	r3, #64	@ 0x40
 80087f4:	2202      	movs	r2, #2
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 fb6d 	bl	800aed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087fc:	4b35      	ldr	r3, [pc, #212]	@ (80088d4 <USBD_CDC_Init+0x1e8>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008814:	2201      	movs	r2, #1
 8008816:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008818:	4b2f      	ldr	r3, [pc, #188]	@ (80088d8 <USBD_CDC_Init+0x1ec>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	331c      	adds	r3, #28
 800882e:	2210      	movs	r2, #16
 8008830:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008832:	4b29      	ldr	r3, [pc, #164]	@ (80088d8 <USBD_CDC_Init+0x1ec>)
 8008834:	7819      	ldrb	r1, [r3, #0]
 8008836:	2308      	movs	r3, #8
 8008838:	2203      	movs	r2, #3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f002 fb4b 	bl	800aed6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008840:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <USBD_CDC_Init+0x1ec>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3323      	adds	r3, #35	@ 0x23
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	33b0      	adds	r3, #176	@ 0xb0
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008890:	2302      	movs	r3, #2
 8008892:	e018      	b.n	80088c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7c1b      	ldrb	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800889c:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <USBD_CDC_Init+0x1e8>)
 800889e:	7819      	ldrb	r1, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f002 fc02 	bl	800b0b4 <USBD_LL_PrepareReceive>
 80088b0:	e008      	b.n	80088c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088b2:	4b08      	ldr	r3, [pc, #32]	@ (80088d4 <USBD_CDC_Init+0x1e8>)
 80088b4:	7819      	ldrb	r1, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088bc:	2340      	movs	r3, #64	@ 0x40
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 fbf8 	bl	800b0b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000093 	.word	0x20000093
 80088d4:	20000094 	.word	0x20000094
 80088d8:	20000095 	.word	0x20000095

080088dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80088e8:	4b3a      	ldr	r3, [pc, #232]	@ (80089d4 <USBD_CDC_DeInit+0xf8>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f002 fb17 	bl	800af22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80088f4:	4b37      	ldr	r3, [pc, #220]	@ (80089d4 <USBD_CDC_DeInit+0xf8>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 020f 	and.w	r2, r3, #15
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	440b      	add	r3, r1
 8008908:	3323      	adds	r3, #35	@ 0x23
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800890e:	4b32      	ldr	r3, [pc, #200]	@ (80089d8 <USBD_CDC_DeInit+0xfc>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f002 fb04 	bl	800af22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800891a:	4b2f      	ldr	r3, [pc, #188]	@ (80089d8 <USBD_CDC_DeInit+0xfc>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008932:	2200      	movs	r2, #0
 8008934:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008936:	4b29      	ldr	r3, [pc, #164]	@ (80089dc <USBD_CDC_DeInit+0x100>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f002 faf0 	bl	800af22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008942:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <USBD_CDC_DeInit+0x100>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 020f 	and.w	r2, r3, #15
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	3323      	adds	r3, #35	@ 0x23
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800895c:	4b1f      	ldr	r3, [pc, #124]	@ (80089dc <USBD_CDC_DeInit+0x100>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	331c      	adds	r3, #28
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	32b0      	adds	r2, #176	@ 0xb0
 8008980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01f      	beq.n	80089c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	33b0      	adds	r3, #176	@ 0xb0
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	32b0      	adds	r2, #176	@ 0xb0
 80089a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f002 fc12 	bl	800b1d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	32b0      	adds	r2, #176	@ 0xb0
 80089ba:	2100      	movs	r1, #0
 80089bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000093 	.word	0x20000093
 80089d8:	20000094 	.word	0x20000094
 80089dc:	20000095 	.word	0x20000095

080089e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	32b0      	adds	r2, #176	@ 0xb0
 80089f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e0bf      	b.n	8008b90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d050      	beq.n	8008abe <USBD_CDC_Setup+0xde>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	f040 80af 	bne.w	8008b80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	88db      	ldrh	r3, [r3, #6]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d03a      	beq.n	8008aa0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da1b      	bge.n	8008a6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	33b0      	adds	r3, #176	@ 0xb0
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	88d2      	ldrh	r2, [r2, #6]
 8008a50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	bf28      	it	cs
 8008a5a:	2307      	movcs	r3, #7
 8008a5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	89fa      	ldrh	r2, [r7, #14]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 fdd3 	bl	800a610 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a6a:	e090      	b.n	8008b8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785a      	ldrb	r2, [r3, #1]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	88db      	ldrh	r3, [r3, #6]
 8008a7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a7c:	d803      	bhi.n	8008a86 <USBD_CDC_Setup+0xa6>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88db      	ldrh	r3, [r3, #6]
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	e000      	b.n	8008a88 <USBD_CDC_Setup+0xa8>
 8008a86:	2240      	movs	r2, #64	@ 0x40
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a8e:	6939      	ldr	r1, [r7, #16]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008a96:	461a      	mov	r2, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fde8 	bl	800a66e <USBD_CtlPrepareRx>
      break;
 8008a9e:	e076      	b.n	8008b8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	33b0      	adds	r3, #176	@ 0xb0
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	7850      	ldrb	r0, [r2, #1]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	4798      	blx	r3
      break;
 8008abc:	e067      	b.n	8008b8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b0b      	cmp	r3, #11
 8008ac4:	d851      	bhi.n	8008b6a <USBD_CDC_Setup+0x18a>
 8008ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <USBD_CDC_Setup+0xec>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008afd 	.word	0x08008afd
 8008ad0:	08008b79 	.word	0x08008b79
 8008ad4:	08008b6b 	.word	0x08008b6b
 8008ad8:	08008b6b 	.word	0x08008b6b
 8008adc:	08008b6b 	.word	0x08008b6b
 8008ae0:	08008b6b 	.word	0x08008b6b
 8008ae4:	08008b6b 	.word	0x08008b6b
 8008ae8:	08008b6b 	.word	0x08008b6b
 8008aec:	08008b6b 	.word	0x08008b6b
 8008af0:	08008b6b 	.word	0x08008b6b
 8008af4:	08008b27 	.word	0x08008b27
 8008af8:	08008b51 	.word	0x08008b51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d107      	bne.n	8008b18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b08:	f107 030a 	add.w	r3, r7, #10
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 fd7d 	bl	800a610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b16:	e032      	b.n	8008b7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 fcfb 	bl	800a516 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b20:	2303      	movs	r3, #3
 8008b22:	75fb      	strb	r3, [r7, #23]
          break;
 8008b24:	e02b      	b.n	8008b7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d107      	bne.n	8008b42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b32:	f107 030d 	add.w	r3, r7, #13
 8008b36:	2201      	movs	r2, #1
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 fd68 	bl	800a610 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b40:	e01d      	b.n	8008b7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fce6 	bl	800a516 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b4e:	e016      	b.n	8008b7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d00f      	beq.n	8008b7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 fcd9 	bl	800a516 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b64:	2303      	movs	r3, #3
 8008b66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b68:	e008      	b.n	8008b7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fcd2 	bl	800a516 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b72:	2303      	movs	r3, #3
 8008b74:	75fb      	strb	r3, [r7, #23]
          break;
 8008b76:	e002      	b.n	8008b7e <USBD_CDC_Setup+0x19e>
          break;
 8008b78:	bf00      	nop
 8008b7a:	e008      	b.n	8008b8e <USBD_CDC_Setup+0x1ae>
          break;
 8008b7c:	bf00      	nop
      }
      break;
 8008b7e:	e006      	b.n	8008b8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 fcc7 	bl	800a516 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008baa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32b0      	adds	r2, #176	@ 0xb0
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e065      	b.n	8008c8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	32b0      	adds	r2, #176	@ 0xb0
 8008bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	f003 020f 	and.w	r2, r3, #15
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3314      	adds	r3, #20
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02f      	beq.n	8008c4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	f003 020f 	and.w	r2, r3, #15
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	3314      	adds	r3, #20
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	f003 010f 	and.w	r1, r3, #15
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	440b      	add	r3, r1
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4403      	add	r3, r0
 8008c14:	331c      	adds	r3, #28
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c1c:	fb01 f303 	mul.w	r3, r1, r3
 8008c20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d112      	bne.n	8008c4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	f003 020f 	and.w	r2, r3, #15
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	3314      	adds	r3, #20
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c3e:	78f9      	ldrb	r1, [r7, #3]
 8008c40:	2300      	movs	r3, #0
 8008c42:	2200      	movs	r2, #0
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f002 fa14 	bl	800b072 <USBD_LL_Transmit>
 8008c4a:	e01f      	b.n	8008c8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	33b0      	adds	r3, #176	@ 0xb0
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d010      	beq.n	8008c8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	33b0      	adds	r3, #176	@ 0xb0
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	32b0      	adds	r2, #176	@ 0xb0
 8008cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	32b0      	adds	r2, #176	@ 0xb0
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e01a      	b.n	8008cfe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f002 fa12 	bl	800b0f6 <USBD_LL_GetRxDataSize>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	33b0      	adds	r3, #176	@ 0xb0
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	32b0      	adds	r2, #176	@ 0xb0
 8008d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e024      	b.n	8008d72 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	33b0      	adds	r3, #176	@ 0xb0
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d019      	beq.n	8008d70 <USBD_CDC_EP0_RxReady+0x6a>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d42:	2bff      	cmp	r3, #255	@ 0xff
 8008d44:	d014      	beq.n	8008d70 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	33b0      	adds	r3, #176	@ 0xb0
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	22ff      	movs	r2, #255	@ 0xff
 8008d6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d84:	2182      	movs	r1, #130	@ 0x82
 8008d86:	4818      	ldr	r0, [pc, #96]	@ (8008de8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d88:	f000 fd62 	bl	8009850 <USBD_GetEpDesc>
 8008d8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d8e:	2101      	movs	r1, #1
 8008d90:	4815      	ldr	r0, [pc, #84]	@ (8008de8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d92:	f000 fd5d 	bl	8009850 <USBD_GetEpDesc>
 8008d96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d98:	2181      	movs	r1, #129	@ 0x81
 8008d9a:	4813      	ldr	r0, [pc, #76]	@ (8008de8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d9c:	f000 fd58 	bl	8009850 <USBD_GetEpDesc>
 8008da0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2210      	movs	r2, #16
 8008dac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d006      	beq.n	8008dc2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dbc:	711a      	strb	r2, [r3, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dd0:	711a      	strb	r2, [r3, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2243      	movs	r2, #67	@ 0x43
 8008dda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ddc:	4b02      	ldr	r3, [pc, #8]	@ (8008de8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	20000050 	.word	0x20000050

08008dec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008df4:	2182      	movs	r1, #130	@ 0x82
 8008df6:	4818      	ldr	r0, [pc, #96]	@ (8008e58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008df8:	f000 fd2a 	bl	8009850 <USBD_GetEpDesc>
 8008dfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dfe:	2101      	movs	r1, #1
 8008e00:	4815      	ldr	r0, [pc, #84]	@ (8008e58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e02:	f000 fd25 	bl	8009850 <USBD_GetEpDesc>
 8008e06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e08:	2181      	movs	r1, #129	@ 0x81
 8008e0a:	4813      	ldr	r0, [pc, #76]	@ (8008e58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e0c:	f000 fd20 	bl	8009850 <USBD_GetEpDesc>
 8008e10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2210      	movs	r2, #16
 8008e1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2200      	movs	r2, #0
 8008e28:	711a      	strb	r2, [r3, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f042 0202 	orr.w	r2, r2, #2
 8008e30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	711a      	strb	r2, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f042 0202 	orr.w	r2, r2, #2
 8008e44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2243      	movs	r2, #67	@ 0x43
 8008e4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e4c:	4b02      	ldr	r3, [pc, #8]	@ (8008e58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000050 	.word	0x20000050

08008e5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e64:	2182      	movs	r1, #130	@ 0x82
 8008e66:	4818      	ldr	r0, [pc, #96]	@ (8008ec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e68:	f000 fcf2 	bl	8009850 <USBD_GetEpDesc>
 8008e6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e6e:	2101      	movs	r1, #1
 8008e70:	4815      	ldr	r0, [pc, #84]	@ (8008ec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e72:	f000 fced 	bl	8009850 <USBD_GetEpDesc>
 8008e76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e78:	2181      	movs	r1, #129	@ 0x81
 8008e7a:	4813      	ldr	r0, [pc, #76]	@ (8008ec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e7c:	f000 fce8 	bl	8009850 <USBD_GetEpDesc>
 8008e80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2210      	movs	r2, #16
 8008e8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e9c:	711a      	strb	r2, [r3, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d006      	beq.n	8008eb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eb0:	711a      	strb	r2, [r3, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2243      	movs	r2, #67	@ 0x43
 8008eba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ebc:	4b02      	ldr	r3, [pc, #8]	@ (8008ec8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20000050 	.word	0x20000050

08008ecc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	220a      	movs	r2, #10
 8008ed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008eda:	4b03      	ldr	r3, [pc, #12]	@ (8008ee8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	2000000c 	.word	0x2000000c

08008eec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e009      	b.n	8008f14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	33b0      	adds	r3, #176	@ 0xb0
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	32b0      	adds	r2, #176	@ 0xb0
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e008      	b.n	8008f58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	32b0      	adds	r2, #176	@ 0xb0
 8008f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e004      	b.n	8008f92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	32b0      	adds	r2, #176	@ 0xb0
 8008fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e025      	b.n	8009012 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11f      	bne.n	8009010 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008fd8:	4b10      	ldr	r3, [pc, #64]	@ (800901c <USBD_CDC_TransmitPacket+0x7c>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4403      	add	r3, r0
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ff6:	4b09      	ldr	r3, [pc, #36]	@ (800901c <USBD_CDC_TransmitPacket+0x7c>)
 8008ff8:	7819      	ldrb	r1, [r3, #0]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f002 f833 	bl	800b072 <USBD_LL_Transmit>

    ret = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000093 	.word	0x20000093

08009020 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	32b0      	adds	r2, #176	@ 0xb0
 8009032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009036:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32b0      	adds	r2, #176	@ 0xb0
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800904a:	2303      	movs	r3, #3
 800904c:	e018      	b.n	8009080 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	7c1b      	ldrb	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009056:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <USBD_CDC_ReceivePacket+0x68>)
 8009058:	7819      	ldrb	r1, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f002 f825 	bl	800b0b4 <USBD_LL_PrepareReceive>
 800906a:	e008      	b.n	800907e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800906c:	4b06      	ldr	r3, [pc, #24]	@ (8009088 <USBD_CDC_ReceivePacket+0x68>)
 800906e:	7819      	ldrb	r1, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009076:	2340      	movs	r3, #64	@ 0x40
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f002 f81b 	bl	800b0b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20000094 	.word	0x20000094

0800908c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	4613      	mov	r3, r2
 8009098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e01f      	b.n	80090e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	79fa      	ldrb	r2, [r7, #7]
 80090d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f001 fe95 	bl	800ae08 <USBD_LL_Init>
 80090de:	4603      	mov	r3, r0
 80090e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009100:	2303      	movs	r3, #3
 8009102:	e025      	b.n	8009150 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	32ae      	adds	r2, #174	@ 0xae
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00f      	beq.n	8009140 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	32ae      	adds	r2, #174	@ 0xae
 800912a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009130:	f107 020e 	add.w	r2, r7, #14
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	4602      	mov	r2, r0
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 fe9d 	bl	800aea0 <USBD_LL_Start>
 8009166:	4603      	mov	r3, r0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800919c:	2b00      	cmp	r3, #0
 800919e:	d009      	beq.n	80091b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	4611      	mov	r1, r2
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	78fa      	ldrb	r2, [r7, #3]
 80091d8:	4611      	mov	r1, r2
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	4798      	blx	r3
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f94c 	bl	800a4a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009218:	461a      	mov	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	2b02      	cmp	r3, #2
 800922c:	d01a      	beq.n	8009264 <USBD_LL_SetupStage+0x72>
 800922e:	2b02      	cmp	r3, #2
 8009230:	d822      	bhi.n	8009278 <USBD_LL_SetupStage+0x86>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <USBD_LL_SetupStage+0x4a>
 8009236:	2b01      	cmp	r3, #1
 8009238:	d00a      	beq.n	8009250 <USBD_LL_SetupStage+0x5e>
 800923a:	e01d      	b.n	8009278 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fb77 	bl	8009938 <USBD_StdDevReq>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
      break;
 800924e:	e020      	b.n	8009292 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fbdf 	bl	8009a1c <USBD_StdItfReq>
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]
      break;
 8009262:	e016      	b.n	8009292 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fc41 	bl	8009af4 <USBD_StdEPReq>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
      break;
 8009276:	e00c      	b.n	8009292 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800927e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009282:	b2db      	uxtb	r3, r3
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 fe6a 	bl	800af60 <USBD_LL_StallEP>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
      break;
 8009290:	bf00      	nop
  }

  return ret;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	460b      	mov	r3, r1
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d177      	bne.n	80093a4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	f040 80a1 	bne.w	800940a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	8992      	ldrh	r2, [r2, #12]
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d91c      	bls.n	800930e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	8992      	ldrh	r2, [r2, #12]
 80092dc:	1a9a      	subs	r2, r3, r2
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	8992      	ldrh	r2, [r2, #12]
 80092ea:	441a      	add	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	6919      	ldr	r1, [r3, #16]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	899b      	ldrh	r3, [r3, #12]
 80092f8:	461a      	mov	r2, r3
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	4293      	cmp	r3, r2
 8009300:	bf38      	it	cc
 8009302:	4613      	movcc	r3, r2
 8009304:	461a      	mov	r2, r3
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f001 f9d2 	bl	800a6b0 <USBD_CtlContinueRx>
 800930c:	e07d      	b.n	800940a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009314:	f003 031f 	and.w	r3, r3, #31
 8009318:	2b02      	cmp	r3, #2
 800931a:	d014      	beq.n	8009346 <USBD_LL_DataOutStage+0xaa>
 800931c:	2b02      	cmp	r3, #2
 800931e:	d81d      	bhi.n	800935c <USBD_LL_DataOutStage+0xc0>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <USBD_LL_DataOutStage+0x8e>
 8009324:	2b01      	cmp	r3, #1
 8009326:	d003      	beq.n	8009330 <USBD_LL_DataOutStage+0x94>
 8009328:	e018      	b.n	800935c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	75bb      	strb	r3, [r7, #22]
            break;
 800932e:	e018      	b.n	8009362 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4619      	mov	r1, r3
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 fa6e 	bl	800981c <USBD_CoreFindIF>
 8009340:	4603      	mov	r3, r0
 8009342:	75bb      	strb	r3, [r7, #22]
            break;
 8009344:	e00d      	b.n	8009362 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fa70 	bl	8009836 <USBD_CoreFindEP>
 8009356:	4603      	mov	r3, r0
 8009358:	75bb      	strb	r3, [r7, #22]
            break;
 800935a:	e002      	b.n	8009362 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	75bb      	strb	r3, [r7, #22]
            break;
 8009360:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009362:	7dbb      	ldrb	r3, [r7, #22]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d119      	bne.n	800939c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b03      	cmp	r3, #3
 8009372:	d113      	bne.n	800939c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009374:	7dba      	ldrb	r2, [r7, #22]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	32ae      	adds	r2, #174	@ 0xae
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8009384:	7dba      	ldrb	r2, [r7, #22]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800938c:	7dba      	ldrb	r2, [r7, #22]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	32ae      	adds	r2, #174	@ 0xae
 8009392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f001 f998 	bl	800a6d2 <USBD_CtlSendStatus>
 80093a2:	e032      	b.n	800940a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	4619      	mov	r1, r3
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fa41 	bl	8009836 <USBD_CoreFindEP>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093b8:	7dbb      	ldrb	r3, [r7, #22]
 80093ba:	2bff      	cmp	r3, #255	@ 0xff
 80093bc:	d025      	beq.n	800940a <USBD_LL_DataOutStage+0x16e>
 80093be:	7dbb      	ldrb	r3, [r7, #22]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d122      	bne.n	800940a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d117      	bne.n	8009400 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093d0:	7dba      	ldrb	r2, [r7, #22]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	32ae      	adds	r2, #174	@ 0xae
 80093d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00f      	beq.n	8009400 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80093e0:	7dba      	ldrb	r2, [r7, #22]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093e8:	7dba      	ldrb	r2, [r7, #22]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	32ae      	adds	r2, #174	@ 0xae
 80093ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	7afa      	ldrb	r2, [r7, #11]
 80093f6:	4611      	mov	r1, r2
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	4798      	blx	r3
 80093fc:	4603      	mov	r3, r0
 80093fe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	e000      	b.n	800940c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	460b      	mov	r3, r1
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d178      	bne.n	800951a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3314      	adds	r3, #20
 800942c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009434:	2b02      	cmp	r3, #2
 8009436:	d163      	bne.n	8009500 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	8992      	ldrh	r2, [r2, #12]
 8009440:	4293      	cmp	r3, r2
 8009442:	d91c      	bls.n	800947e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	8992      	ldrh	r2, [r2, #12]
 800944c:	1a9a      	subs	r2, r3, r2
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	8992      	ldrh	r2, [r2, #12]
 800945a:	441a      	add	r2, r3
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6919      	ldr	r1, [r3, #16]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	461a      	mov	r2, r3
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f001 f8ee 	bl	800a64c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f001 fe1c 	bl	800b0b4 <USBD_LL_PrepareReceive>
 800947c:	e040      	b.n	8009500 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	899b      	ldrh	r3, [r3, #12]
 8009482:	461a      	mov	r2, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	429a      	cmp	r2, r3
 800948a:	d11c      	bne.n	80094c6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009494:	4293      	cmp	r3, r2
 8009496:	d316      	bcc.n	80094c6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d20f      	bcs.n	80094c6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094a6:	2200      	movs	r2, #0
 80094a8:	2100      	movs	r1, #0
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f001 f8ce 	bl	800a64c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f001 fdf8 	bl	800b0b4 <USBD_LL_PrepareReceive>
 80094c4:	e01c      	b.n	8009500 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d10f      	bne.n	80094f2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d009      	beq.n	80094f2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f2:	2180      	movs	r1, #128	@ 0x80
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f001 fd33 	bl	800af60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f001 f8fc 	bl	800a6f8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d03a      	beq.n	8009580 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fe30 	bl	8009170 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009518:	e032      	b.n	8009580 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009520:	b2db      	uxtb	r3, r3
 8009522:	4619      	mov	r1, r3
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f986 	bl	8009836 <USBD_CoreFindEP>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2bff      	cmp	r3, #255	@ 0xff
 8009532:	d025      	beq.n	8009580 <USBD_LL_DataInStage+0x16c>
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d122      	bne.n	8009580 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d11c      	bne.n	8009580 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009546:	7dfa      	ldrb	r2, [r7, #23]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	32ae      	adds	r2, #174	@ 0xae
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d014      	beq.n	8009580 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8009556:	7dfa      	ldrb	r2, [r7, #23]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800955e:	7dfa      	ldrb	r2, [r7, #23]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	32ae      	adds	r2, #174	@ 0xae
 8009564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	7afa      	ldrb	r2, [r7, #11]
 800956c:	4611      	mov	r1, r2
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009576:	7dbb      	ldrb	r3, [r7, #22]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	e000      	b.n	8009582 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d014      	beq.n	80095f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00e      	beq.n	80095f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	6852      	ldr	r2, [r2, #4]
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	4611      	mov	r1, r2
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095ec:	2303      	movs	r3, #3
 80095ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f0:	2340      	movs	r3, #64	@ 0x40
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 fc6d 	bl	800aed6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2240      	movs	r2, #64	@ 0x40
 8009608:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	2200      	movs	r2, #0
 8009610:	2180      	movs	r1, #128	@ 0x80
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 fc5f 	bl	800aed6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2240      	movs	r2, #64	@ 0x40
 8009624:	841a      	strh	r2, [r3, #32]

  return ret;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b04      	cmp	r3, #4
 8009662:	d006      	beq.n	8009672 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2204      	movs	r2, #4
 8009676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b04      	cmp	r3, #4
 800969a:	d106      	bne.n	80096aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d110      	bne.n	80096ee <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32ae      	adds	r2, #174	@ 0xae
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	e01c      	b.n	8009754 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d115      	bne.n	8009752 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	32ae      	adds	r2, #174	@ 0xae
 8009730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00b      	beq.n	8009752 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	32ae      	adds	r2, #174	@ 0xae
 8009744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	4611      	mov	r1, r2
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	32ae      	adds	r2, #174	@ 0xae
 8009772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800977a:	2303      	movs	r3, #3
 800977c:	e01c      	b.n	80097b8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b03      	cmp	r3, #3
 8009788:	d115      	bne.n	80097b6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	32ae      	adds	r2, #174	@ 0xae
 8009794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00b      	beq.n	80097b6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	32ae      	adds	r2, #174	@ 0xae
 80097a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	4611      	mov	r1, r2
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00e      	beq.n	8009812 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6852      	ldr	r2, [r2, #4]
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	4611      	mov	r1, r2
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800980e:	2303      	movs	r3, #3
 8009810:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009828:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800982a:	4618      	mov	r0, r3
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009842:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	885b      	ldrh	r3, [r3, #2]
 800986c:	b29b      	uxth	r3, r3
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	7812      	ldrb	r2, [r2, #0]
 8009872:	4293      	cmp	r3, r2
 8009874:	d91f      	bls.n	80098b6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800987c:	e013      	b.n	80098a6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800987e:	f107 030a 	add.w	r3, r7, #10
 8009882:	4619      	mov	r1, r3
 8009884:	6978      	ldr	r0, [r7, #20]
 8009886:	f000 f81b 	bl	80098c0 <USBD_GetNextDesc>
 800988a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b05      	cmp	r3, #5
 8009892:	d108      	bne.n	80098a6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	789b      	ldrb	r3, [r3, #2]
 800989c:	78fa      	ldrb	r2, [r7, #3]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d008      	beq.n	80098b4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	885b      	ldrh	r3, [r3, #2]
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	897b      	ldrh	r3, [r7, #10]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d8e5      	bhi.n	800987e <USBD_GetEpDesc+0x2e>
 80098b2:	e000      	b.n	80098b6 <USBD_GetEpDesc+0x66>
          break;
 80098b4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80098b6:	693b      	ldr	r3, [r7, #16]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	4413      	add	r3, r2
 80098d8:	b29a      	uxth	r2, r3
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4413      	add	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	3301      	adds	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009916:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800991a:	021b      	lsls	r3, r3, #8
 800991c:	b21a      	sxth	r2, r3
 800991e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009922:	4313      	orrs	r3, r2
 8009924:	b21b      	sxth	r3, r3
 8009926:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009928:	89fb      	ldrh	r3, [r7, #14]
}
 800992a:	4618      	mov	r0, r3
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
	...

08009938 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800994e:	2b40      	cmp	r3, #64	@ 0x40
 8009950:	d005      	beq.n	800995e <USBD_StdDevReq+0x26>
 8009952:	2b40      	cmp	r3, #64	@ 0x40
 8009954:	d857      	bhi.n	8009a06 <USBD_StdDevReq+0xce>
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00f      	beq.n	800997a <USBD_StdDevReq+0x42>
 800995a:	2b20      	cmp	r3, #32
 800995c:	d153      	bne.n	8009a06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32ae      	adds	r2, #174	@ 0xae
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
      break;
 8009978:	e04a      	b.n	8009a10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	2b09      	cmp	r3, #9
 8009980:	d83b      	bhi.n	80099fa <USBD_StdDevReq+0xc2>
 8009982:	a201      	add	r2, pc, #4	@ (adr r2, 8009988 <USBD_StdDevReq+0x50>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	080099dd 	.word	0x080099dd
 800998c:	080099f1 	.word	0x080099f1
 8009990:	080099fb 	.word	0x080099fb
 8009994:	080099e7 	.word	0x080099e7
 8009998:	080099fb 	.word	0x080099fb
 800999c:	080099bb 	.word	0x080099bb
 80099a0:	080099b1 	.word	0x080099b1
 80099a4:	080099fb 	.word	0x080099fb
 80099a8:	080099d3 	.word	0x080099d3
 80099ac:	080099c5 	.word	0x080099c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa3e 	bl	8009e34 <USBD_GetDescriptor>
          break;
 80099b8:	e024      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fbcd 	bl	800a15c <USBD_SetAddress>
          break;
 80099c2:	e01f      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fc0c 	bl	800a1e4 <USBD_SetConfig>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
          break;
 80099d0:	e018      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fcaf 	bl	800a338 <USBD_GetConfig>
          break;
 80099da:	e013      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fce0 	bl	800a3a4 <USBD_GetStatus>
          break;
 80099e4:	e00e      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fd0f 	bl	800a40c <USBD_SetFeature>
          break;
 80099ee:	e009      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fd33 	bl	800a45e <USBD_ClrFeature>
          break;
 80099f8:	e004      	b.n	8009a04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fd8a 	bl	800a516 <USBD_CtlError>
          break;
 8009a02:	bf00      	nop
      }
      break;
 8009a04:	e004      	b.n	8009a10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fd84 	bl	800a516 <USBD_CtlError>
      break;
 8009a0e:	bf00      	nop
  }

  return ret;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop

08009a1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a32:	2b40      	cmp	r3, #64	@ 0x40
 8009a34:	d005      	beq.n	8009a42 <USBD_StdItfReq+0x26>
 8009a36:	2b40      	cmp	r3, #64	@ 0x40
 8009a38:	d852      	bhi.n	8009ae0 <USBD_StdItfReq+0xc4>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <USBD_StdItfReq+0x26>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d14e      	bne.n	8009ae0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d840      	bhi.n	8009ad2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	889b      	ldrh	r3, [r3, #4]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d836      	bhi.n	8009ac8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	889b      	ldrh	r3, [r3, #4]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff feda 	bl	800981c <USBD_CoreFindIF>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2bff      	cmp	r3, #255	@ 0xff
 8009a70:	d01d      	beq.n	8009aae <USBD_StdItfReq+0x92>
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11a      	bne.n	8009aae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a78:	7bba      	ldrb	r2, [r7, #14]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	32ae      	adds	r2, #174	@ 0xae
 8009a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00f      	beq.n	8009aa8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a88:	7bba      	ldrb	r2, [r7, #14]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a90:	7bba      	ldrb	r2, [r7, #14]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	32ae      	adds	r2, #174	@ 0xae
 8009a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aa6:	e004      	b.n	8009ab2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aac:	e001      	b.n	8009ab2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	88db      	ldrh	r3, [r3, #6]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d110      	bne.n	8009adc <USBD_StdItfReq+0xc0>
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10d      	bne.n	8009adc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fe06 	bl	800a6d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ac6:	e009      	b.n	8009adc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fd23 	bl	800a516 <USBD_CtlError>
          break;
 8009ad0:	e004      	b.n	8009adc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fd1e 	bl	800a516 <USBD_CtlError>
          break;
 8009ada:	e000      	b.n	8009ade <USBD_StdItfReq+0xc2>
          break;
 8009adc:	bf00      	nop
      }
      break;
 8009ade:	e004      	b.n	8009aea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fd17 	bl	800a516 <USBD_CtlError>
      break;
 8009ae8:	bf00      	nop
  }

  return ret;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	889b      	ldrh	r3, [r3, #4]
 8009b06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b10:	2b40      	cmp	r3, #64	@ 0x40
 8009b12:	d007      	beq.n	8009b24 <USBD_StdEPReq+0x30>
 8009b14:	2b40      	cmp	r3, #64	@ 0x40
 8009b16:	f200 8181 	bhi.w	8009e1c <USBD_StdEPReq+0x328>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d02a      	beq.n	8009b74 <USBD_StdEPReq+0x80>
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	f040 817c 	bne.w	8009e1c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff fe84 	bl	8009836 <USBD_CoreFindEP>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b32:	7b7b      	ldrb	r3, [r7, #13]
 8009b34:	2bff      	cmp	r3, #255	@ 0xff
 8009b36:	f000 8176 	beq.w	8009e26 <USBD_StdEPReq+0x332>
 8009b3a:	7b7b      	ldrb	r3, [r7, #13]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 8172 	bne.w	8009e26 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009b42:	7b7a      	ldrb	r2, [r7, #13]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b4a:	7b7a      	ldrb	r2, [r7, #13]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	32ae      	adds	r2, #174	@ 0xae
 8009b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 8165 	beq.w	8009e26 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b5c:	7b7a      	ldrb	r2, [r7, #13]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	32ae      	adds	r2, #174	@ 0xae
 8009b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b72:	e158      	b.n	8009e26 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	785b      	ldrb	r3, [r3, #1]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d008      	beq.n	8009b8e <USBD_StdEPReq+0x9a>
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	f300 8147 	bgt.w	8009e10 <USBD_StdEPReq+0x31c>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 809b 	beq.w	8009cbe <USBD_StdEPReq+0x1ca>
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d03c      	beq.n	8009c06 <USBD_StdEPReq+0x112>
 8009b8c:	e140      	b.n	8009e10 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d002      	beq.n	8009ba0 <USBD_StdEPReq+0xac>
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d016      	beq.n	8009bcc <USBD_StdEPReq+0xd8>
 8009b9e:	e02c      	b.n	8009bfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00d      	beq.n	8009bc2 <USBD_StdEPReq+0xce>
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	2b80      	cmp	r3, #128	@ 0x80
 8009baa:	d00a      	beq.n	8009bc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f9d5 	bl	800af60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bb6:	2180      	movs	r1, #128	@ 0x80
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 f9d1 	bl	800af60 <USBD_LL_StallEP>
 8009bbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bc0:	e020      	b.n	8009c04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fca6 	bl	800a516 <USBD_CtlError>
              break;
 8009bca:	e01b      	b.n	8009c04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10e      	bne.n	8009bf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <USBD_StdEPReq+0xfe>
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b80      	cmp	r3, #128	@ 0x80
 8009bde:	d008      	beq.n	8009bf2 <USBD_StdEPReq+0xfe>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	88db      	ldrh	r3, [r3, #6]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f001 f9b7 	bl	800af60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fd6d 	bl	800a6d2 <USBD_CtlSendStatus>

              break;
 8009bf8:	e004      	b.n	8009c04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fc8a 	bl	800a516 <USBD_CtlError>
              break;
 8009c02:	bf00      	nop
          }
          break;
 8009c04:	e109      	b.n	8009e1a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d002      	beq.n	8009c18 <USBD_StdEPReq+0x124>
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d016      	beq.n	8009c44 <USBD_StdEPReq+0x150>
 8009c16:	e04b      	b.n	8009cb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00d      	beq.n	8009c3a <USBD_StdEPReq+0x146>
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	2b80      	cmp	r3, #128	@ 0x80
 8009c22:	d00a      	beq.n	8009c3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 f999 	bl	800af60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c2e:	2180      	movs	r1, #128	@ 0x80
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 f995 	bl	800af60 <USBD_LL_StallEP>
 8009c36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c38:	e040      	b.n	8009cbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fc6a 	bl	800a516 <USBD_CtlError>
              break;
 8009c42:	e03b      	b.n	8009cbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	885b      	ldrh	r3, [r3, #2]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d136      	bne.n	8009cba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d004      	beq.n	8009c60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 f99f 	bl	800af9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fd36 	bl	800a6d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fde3 	bl	8009836 <USBD_CoreFindEP>
 8009c70:	4603      	mov	r3, r0
 8009c72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c74:	7b7b      	ldrb	r3, [r7, #13]
 8009c76:	2bff      	cmp	r3, #255	@ 0xff
 8009c78:	d01f      	beq.n	8009cba <USBD_StdEPReq+0x1c6>
 8009c7a:	7b7b      	ldrb	r3, [r7, #13]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11c      	bne.n	8009cba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c80:	7b7a      	ldrb	r2, [r7, #13]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c88:	7b7a      	ldrb	r2, [r7, #13]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	32ae      	adds	r2, #174	@ 0xae
 8009c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d010      	beq.n	8009cba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c98:	7b7a      	ldrb	r2, [r7, #13]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32ae      	adds	r2, #174	@ 0xae
 8009c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009cae:	e004      	b.n	8009cba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fc2f 	bl	800a516 <USBD_CtlError>
              break;
 8009cb8:	e000      	b.n	8009cbc <USBD_StdEPReq+0x1c8>
              break;
 8009cba:	bf00      	nop
          }
          break;
 8009cbc:	e0ad      	b.n	8009e1a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d002      	beq.n	8009cd0 <USBD_StdEPReq+0x1dc>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d033      	beq.n	8009d36 <USBD_StdEPReq+0x242>
 8009cce:	e099      	b.n	8009e04 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d007      	beq.n	8009ce6 <USBD_StdEPReq+0x1f2>
 8009cd6:	7bbb      	ldrb	r3, [r7, #14]
 8009cd8:	2b80      	cmp	r3, #128	@ 0x80
 8009cda:	d004      	beq.n	8009ce6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fc19 	bl	800a516 <USBD_CtlError>
                break;
 8009ce4:	e093      	b.n	8009e0e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da0b      	bge.n	8009d06 <USBD_StdEPReq+0x212>
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	3310      	adds	r3, #16
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	4413      	add	r3, r2
 8009d02:	3304      	adds	r3, #4
 8009d04:	e00b      	b.n	8009d1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2200      	movs	r2, #0
 8009d24:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	330e      	adds	r3, #14
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fc6e 	bl	800a610 <USBD_CtlSendData>
              break;
 8009d34:	e06b      	b.n	8009e0e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da11      	bge.n	8009d62 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	f003 020f 	and.w	r2, r3, #15
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	3323      	adds	r3, #35	@ 0x23
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d117      	bne.n	8009d88 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fbdb 	bl	800a516 <USBD_CtlError>
                  break;
 8009d60:	e055      	b.n	8009e0e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	f003 020f 	and.w	r2, r3, #15
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d104      	bne.n	8009d88 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fbc8 	bl	800a516 <USBD_CtlError>
                  break;
 8009d86:	e042      	b.n	8009e0e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da0b      	bge.n	8009da8 <USBD_StdEPReq+0x2b4>
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	3310      	adds	r3, #16
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	4413      	add	r3, r2
 8009da4:	3304      	adds	r3, #4
 8009da6:	e00b      	b.n	8009dc0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <USBD_StdEPReq+0x2da>
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b80      	cmp	r3, #128	@ 0x80
 8009dcc:	d103      	bne.n	8009dd6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	739a      	strb	r2, [r3, #14]
 8009dd4:	e00e      	b.n	8009df4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 f8fe 	bl	800afdc <USBD_LL_IsStallEP>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2201      	movs	r2, #1
 8009dea:	739a      	strb	r2, [r3, #14]
 8009dec:	e002      	b.n	8009df4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2200      	movs	r2, #0
 8009df2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	330e      	adds	r3, #14
 8009df8:	2202      	movs	r2, #2
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc07 	bl	800a610 <USBD_CtlSendData>
              break;
 8009e02:	e004      	b.n	8009e0e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fb85 	bl	800a516 <USBD_CtlError>
              break;
 8009e0c:	bf00      	nop
          }
          break;
 8009e0e:	e004      	b.n	8009e1a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fb7f 	bl	800a516 <USBD_CtlError>
          break;
 8009e18:	bf00      	nop
      }
      break;
 8009e1a:	e005      	b.n	8009e28 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fb79 	bl	800a516 <USBD_CtlError>
      break;
 8009e24:	e000      	b.n	8009e28 <USBD_StdEPReq+0x334>
      break;
 8009e26:	bf00      	nop
  }

  return ret;
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	885b      	ldrh	r3, [r3, #2]
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	2b0e      	cmp	r3, #14
 8009e56:	f200 8152 	bhi.w	800a0fe <USBD_GetDescriptor+0x2ca>
 8009e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <USBD_GetDescriptor+0x2c>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009ed1 	.word	0x08009ed1
 8009e64:	08009ee9 	.word	0x08009ee9
 8009e68:	08009f29 	.word	0x08009f29
 8009e6c:	0800a0ff 	.word	0x0800a0ff
 8009e70:	0800a0ff 	.word	0x0800a0ff
 8009e74:	0800a09f 	.word	0x0800a09f
 8009e78:	0800a0cb 	.word	0x0800a0cb
 8009e7c:	0800a0ff 	.word	0x0800a0ff
 8009e80:	0800a0ff 	.word	0x0800a0ff
 8009e84:	0800a0ff 	.word	0x0800a0ff
 8009e88:	0800a0ff 	.word	0x0800a0ff
 8009e8c:	0800a0ff 	.word	0x0800a0ff
 8009e90:	0800a0ff 	.word	0x0800a0ff
 8009e94:	0800a0ff 	.word	0x0800a0ff
 8009e98:	08009e9d 	.word	0x08009e9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7c12      	ldrb	r2, [r2, #16]
 8009eb4:	f107 0108 	add.w	r1, r7, #8
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ebe:	e126      	b.n	800a10e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fb27 	bl	800a516 <USBD_CtlError>
        err++;
 8009ec8:	7afb      	ldrb	r3, [r7, #11]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	72fb      	strb	r3, [r7, #11]
      break;
 8009ece:	e11e      	b.n	800a10e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	7c12      	ldrb	r2, [r2, #16]
 8009edc:	f107 0108 	add.w	r1, r7, #8
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4798      	blx	r3
 8009ee4:	60f8      	str	r0, [r7, #12]
      break;
 8009ee6:	e112      	b.n	800a10e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	7c1b      	ldrb	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10d      	bne.n	8009f0c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	f107 0208 	add.w	r2, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	2202      	movs	r2, #2
 8009f08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f0a:	e100      	b.n	800a10e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f14:	f107 0208 	add.w	r2, r7, #8
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4798      	blx	r3
 8009f1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	2202      	movs	r2, #2
 8009f24:	701a      	strb	r2, [r3, #0]
      break;
 8009f26:	e0f2      	b.n	800a10e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	885b      	ldrh	r3, [r3, #2]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b05      	cmp	r3, #5
 8009f30:	f200 80ac 	bhi.w	800a08c <USBD_GetDescriptor+0x258>
 8009f34:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <USBD_GetDescriptor+0x108>)
 8009f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3a:	bf00      	nop
 8009f3c:	08009f55 	.word	0x08009f55
 8009f40:	08009f89 	.word	0x08009f89
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009ff1 	.word	0x08009ff1
 8009f4c:	0800a025 	.word	0x0800a025
 8009f50:	0800a059 	.word	0x0800a059
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	7c12      	ldrb	r2, [r2, #16]
 8009f6c:	f107 0108 	add.w	r1, r7, #8
 8009f70:	4610      	mov	r0, r2
 8009f72:	4798      	blx	r3
 8009f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f76:	e091      	b.n	800a09c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 facb 	bl	800a516 <USBD_CtlError>
            err++;
 8009f80:	7afb      	ldrb	r3, [r7, #11]
 8009f82:	3301      	adds	r3, #1
 8009f84:	72fb      	strb	r3, [r7, #11]
          break;
 8009f86:	e089      	b.n	800a09c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	7c12      	ldrb	r2, [r2, #16]
 8009fa0:	f107 0108 	add.w	r1, r7, #8
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4798      	blx	r3
 8009fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009faa:	e077      	b.n	800a09c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fab1 	bl	800a516 <USBD_CtlError>
            err++;
 8009fb4:	7afb      	ldrb	r3, [r7, #11]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fba:	e06f      	b.n	800a09c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	7c12      	ldrb	r2, [r2, #16]
 8009fd4:	f107 0108 	add.w	r1, r7, #8
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fde:	e05d      	b.n	800a09c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa97 	bl	800a516 <USBD_CtlError>
            err++;
 8009fe8:	7afb      	ldrb	r3, [r7, #11]
 8009fea:	3301      	adds	r3, #1
 8009fec:	72fb      	strb	r3, [r7, #11]
          break;
 8009fee:	e055      	b.n	800a09c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00b      	beq.n	800a014 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	7c12      	ldrb	r2, [r2, #16]
 800a008:	f107 0108 	add.w	r1, r7, #8
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a012:	e043      	b.n	800a09c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa7d 	bl	800a516 <USBD_CtlError>
            err++;
 800a01c:	7afb      	ldrb	r3, [r7, #11]
 800a01e:	3301      	adds	r3, #1
 800a020:	72fb      	strb	r3, [r7, #11]
          break;
 800a022:	e03b      	b.n	800a09c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00b      	beq.n	800a048 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	7c12      	ldrb	r2, [r2, #16]
 800a03c:	f107 0108 	add.w	r1, r7, #8
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a046:	e029      	b.n	800a09c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa63 	bl	800a516 <USBD_CtlError>
            err++;
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	3301      	adds	r3, #1
 800a054:	72fb      	strb	r3, [r7, #11]
          break;
 800a056:	e021      	b.n	800a09c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7c12      	ldrb	r2, [r2, #16]
 800a070:	f107 0108 	add.w	r1, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07a:	e00f      	b.n	800a09c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fa49 	bl	800a516 <USBD_CtlError>
            err++;
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	3301      	adds	r3, #1
 800a088:	72fb      	strb	r3, [r7, #11]
          break;
 800a08a:	e007      	b.n	800a09c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fa41 	bl	800a516 <USBD_CtlError>
          err++;
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	3301      	adds	r3, #1
 800a098:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a09a:	bf00      	nop
      }
      break;
 800a09c:	e037      	b.n	800a10e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7c1b      	ldrb	r3, [r3, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d109      	bne.n	800a0ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ae:	f107 0208 	add.w	r2, r7, #8
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4798      	blx	r3
 800a0b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0b8:	e029      	b.n	800a10e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa2a 	bl	800a516 <USBD_CtlError>
        err++;
 800a0c2:	7afb      	ldrb	r3, [r7, #11]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a0c8:	e021      	b.n	800a10e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	7c1b      	ldrb	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10d      	bne.n	800a0ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0da:	f107 0208 	add.w	r2, r7, #8
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4798      	blx	r3
 800a0e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	2207      	movs	r2, #7
 800a0ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0ec:	e00f      	b.n	800a10e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fa10 	bl	800a516 <USBD_CtlError>
        err++;
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	72fb      	strb	r3, [r7, #11]
      break;
 800a0fc:	e007      	b.n	800a10e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fa08 	bl	800a516 <USBD_CtlError>
      err++;
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	3301      	adds	r3, #1
 800a10a:	72fb      	strb	r3, [r7, #11]
      break;
 800a10c:	bf00      	nop
  }

  if (err != 0U)
 800a10e:	7afb      	ldrb	r3, [r7, #11]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11e      	bne.n	800a152 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	88db      	ldrh	r3, [r3, #6]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d016      	beq.n	800a14a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a11c:	893b      	ldrh	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00e      	beq.n	800a140 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	88da      	ldrh	r2, [r3, #6]
 800a126:	893b      	ldrh	r3, [r7, #8]
 800a128:	4293      	cmp	r3, r2
 800a12a:	bf28      	it	cs
 800a12c:	4613      	movcs	r3, r2
 800a12e:	b29b      	uxth	r3, r3
 800a130:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a132:	893b      	ldrh	r3, [r7, #8]
 800a134:	461a      	mov	r2, r3
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fa69 	bl	800a610 <USBD_CtlSendData>
 800a13e:	e009      	b.n	800a154 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f9e7 	bl	800a516 <USBD_CtlError>
 800a148:	e004      	b.n	800a154 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fac1 	bl	800a6d2 <USBD_CtlSendStatus>
 800a150:	e000      	b.n	800a154 <USBD_GetDescriptor+0x320>
    return;
 800a152:	bf00      	nop
  }
}
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop

0800a15c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	889b      	ldrh	r3, [r3, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d131      	bne.n	800a1d2 <USBD_SetAddress+0x76>
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	88db      	ldrh	r3, [r3, #6]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d12d      	bne.n	800a1d2 <USBD_SetAddress+0x76>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	885b      	ldrh	r3, [r3, #2]
 800a17a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a17c:	d829      	bhi.n	800a1d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	885b      	ldrh	r3, [r3, #2]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b03      	cmp	r3, #3
 800a194:	d104      	bne.n	800a1a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9bc 	bl	800a516 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a19e:	e01d      	b.n	800a1dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7bfa      	ldrb	r2, [r7, #15]
 800a1a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 ff41 	bl	800b034 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa8d 	bl	800a6d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d004      	beq.n	800a1c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c6:	e009      	b.n	800a1dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d0:	e004      	b.n	800a1dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f99e 	bl	800a516 <USBD_CtlError>
  }
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	885b      	ldrh	r3, [r3, #2]
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	4b4e      	ldr	r3, [pc, #312]	@ (800a334 <USBD_SetConfig+0x150>)
 800a1fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a334 <USBD_SetConfig+0x150>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d905      	bls.n	800a210 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f985 	bl	800a516 <USBD_CtlError>
    return USBD_FAIL;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e08c      	b.n	800a32a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d002      	beq.n	800a222 <USBD_SetConfig+0x3e>
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d029      	beq.n	800a274 <USBD_SetConfig+0x90>
 800a220:	e075      	b.n	800a30e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a222:	4b44      	ldr	r3, [pc, #272]	@ (800a334 <USBD_SetConfig+0x150>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d020      	beq.n	800a26c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a22a:	4b42      	ldr	r3, [pc, #264]	@ (800a334 <USBD_SetConfig+0x150>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a234:	4b3f      	ldr	r3, [pc, #252]	@ (800a334 <USBD_SetConfig+0x150>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7fe ffa3 	bl	8009186 <USBD_SetClassConfig>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d008      	beq.n	800a25c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f962 	bl	800a516 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a25a:	e065      	b.n	800a328 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fa38 	bl	800a6d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2203      	movs	r2, #3
 800a266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a26a:	e05d      	b.n	800a328 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fa30 	bl	800a6d2 <USBD_CtlSendStatus>
      break;
 800a272:	e059      	b.n	800a328 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a274:	4b2f      	ldr	r3, [pc, #188]	@ (800a334 <USBD_SetConfig+0x150>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d112      	bne.n	800a2a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a284:	4b2b      	ldr	r3, [pc, #172]	@ (800a334 <USBD_SetConfig+0x150>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a28e:	4b29      	ldr	r3, [pc, #164]	@ (800a334 <USBD_SetConfig+0x150>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7fe ff92 	bl	80091be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa19 	bl	800a6d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2a0:	e042      	b.n	800a328 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2a2:	4b24      	ldr	r3, [pc, #144]	@ (800a334 <USBD_SetConfig+0x150>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d02a      	beq.n	800a306 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7fe ff80 	bl	80091be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a2be:	4b1d      	ldr	r3, [pc, #116]	@ (800a334 <USBD_SetConfig+0x150>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a334 <USBD_SetConfig+0x150>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7fe ff59 	bl	8009186 <USBD_SetClassConfig>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00f      	beq.n	800a2fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f918 	bl	800a516 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fe ff65 	bl	80091be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2fc:	e014      	b.n	800a328 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f9e7 	bl	800a6d2 <USBD_CtlSendStatus>
      break;
 800a304:	e010      	b.n	800a328 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f9e3 	bl	800a6d2 <USBD_CtlSendStatus>
      break;
 800a30c:	e00c      	b.n	800a328 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f900 	bl	800a516 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a316:	4b07      	ldr	r3, [pc, #28]	@ (800a334 <USBD_SetConfig+0x150>)
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7fe ff4e 	bl	80091be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a322:	2303      	movs	r3, #3
 800a324:	73fb      	strb	r3, [r7, #15]
      break;
 800a326:	bf00      	nop
  }

  return ret;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20000474 	.word	0x20000474

0800a338 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	88db      	ldrh	r3, [r3, #6]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d004      	beq.n	800a354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f8e2 	bl	800a516 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a352:	e023      	b.n	800a39c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	dc02      	bgt.n	800a366 <USBD_GetConfig+0x2e>
 800a360:	2b00      	cmp	r3, #0
 800a362:	dc03      	bgt.n	800a36c <USBD_GetConfig+0x34>
 800a364:	e015      	b.n	800a392 <USBD_GetConfig+0x5a>
 800a366:	2b03      	cmp	r3, #3
 800a368:	d00b      	beq.n	800a382 <USBD_GetConfig+0x4a>
 800a36a:	e012      	b.n	800a392 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3308      	adds	r3, #8
 800a376:	2201      	movs	r2, #1
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f948 	bl	800a610 <USBD_CtlSendData>
        break;
 800a380:	e00c      	b.n	800a39c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3304      	adds	r3, #4
 800a386:	2201      	movs	r2, #1
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f940 	bl	800a610 <USBD_CtlSendData>
        break;
 800a390:	e004      	b.n	800a39c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f8be 	bl	800a516 <USBD_CtlError>
        break;
 800a39a:	bf00      	nop
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d81e      	bhi.n	800a3fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	88db      	ldrh	r3, [r3, #6]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d004      	beq.n	800a3ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f8a5 	bl	800a516 <USBD_CtlError>
        break;
 800a3cc:	e01a      	b.n	800a404 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d005      	beq.n	800a3ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	f043 0202 	orr.w	r2, r3, #2
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	330c      	adds	r3, #12
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f90c 	bl	800a610 <USBD_CtlSendData>
      break;
 800a3f8:	e004      	b.n	800a404 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f88a 	bl	800a516 <USBD_CtlError>
      break;
 800a402:	bf00      	nop
  }
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d107      	bne.n	800a42e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f953 	bl	800a6d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a42c:	e013      	b.n	800a456 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	885b      	ldrh	r3, [r3, #2]
 800a432:	2b02      	cmp	r3, #2
 800a434:	d10b      	bne.n	800a44e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	889b      	ldrh	r3, [r3, #4]
 800a43a:	0a1b      	lsrs	r3, r3, #8
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f943 	bl	800a6d2 <USBD_CtlSendStatus>
}
 800a44c:	e003      	b.n	800a456 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f860 	bl	800a516 <USBD_CtlError>
}
 800a456:	bf00      	nop
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	3b01      	subs	r3, #1
 800a472:	2b02      	cmp	r3, #2
 800a474:	d80b      	bhi.n	800a48e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	885b      	ldrh	r3, [r3, #2]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d10c      	bne.n	800a498 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f923 	bl	800a6d2 <USBD_CtlSendStatus>
      }
      break;
 800a48c:	e004      	b.n	800a498 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f840 	bl	800a516 <USBD_CtlError>
      break;
 800a496:	e000      	b.n	800a49a <USBD_ClrFeature+0x3c>
      break;
 800a498:	bf00      	nop
  }
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	781a      	ldrb	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fa13 	bl	80098f8 <SWAPBYTE>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7ff fa06 	bl	80098f8 <SWAPBYTE>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff f9f9 	bl	80098f8 <SWAPBYTE>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	80da      	strh	r2, [r3, #6]
}
 800a50e:	bf00      	nop
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a520:	2180      	movs	r1, #128	@ 0x80
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fd1c 	bl	800af60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a528:	2100      	movs	r1, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fd18 	bl	800af60 <USBD_LL_StallEP>
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d042      	beq.n	800a5d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a552:	6938      	ldr	r0, [r7, #16]
 800a554:	f000 f842 	bl	800a5dc <USBD_GetLen>
 800a558:	4603      	mov	r3, r0
 800a55a:	3301      	adds	r3, #1
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a562:	d808      	bhi.n	800a576 <USBD_GetString+0x3e>
 800a564:	6938      	ldr	r0, [r7, #16]
 800a566:	f000 f839 	bl	800a5dc <USBD_GetLen>
 800a56a:	4603      	mov	r3, r0
 800a56c:	3301      	adds	r3, #1
 800a56e:	b29b      	uxth	r3, r3
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	e001      	b.n	800a57a <USBD_GetString+0x42>
 800a576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	4413      	add	r3, r2
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	7812      	ldrb	r2, [r2, #0]
 800a588:	701a      	strb	r2, [r3, #0]
  idx++;
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	3301      	adds	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a590:	7dfb      	ldrb	r3, [r7, #23]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	4413      	add	r3, r2
 800a596:	2203      	movs	r2, #3
 800a598:	701a      	strb	r2, [r3, #0]
  idx++;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	3301      	adds	r3, #1
 800a59e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5a0:	e013      	b.n	800a5ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	7812      	ldrb	r2, [r2, #0]
 800a5ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	613b      	str	r3, [r7, #16]
    idx++;
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	4413      	add	r3, r2
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e7      	bne.n	800a5a2 <USBD_GetString+0x6a>
 800a5d2:	e000      	b.n	800a5d6 <USBD_GetString+0x9e>
    return;
 800a5d4:	bf00      	nop
  }
}
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a5ec:	e005      	b.n	800a5fa <USBD_GetLen+0x1e>
  {
    len++;
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f5      	bne.n	800a5ee <USBD_GetLen+0x12>
  }

  return len;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2202      	movs	r2, #2
 800a620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	2100      	movs	r1, #0
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 fd18 	bl	800b072 <USBD_LL_Transmit>

  return USBD_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	2100      	movs	r1, #0
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 fd07 	bl	800b072 <USBD_LL_Transmit>

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2203      	movs	r2, #3
 800a67e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	2100      	movs	r1, #0
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fd07 	bl	800b0b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 fcf6 	bl	800b0b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2204      	movs	r2, #4
 800a6de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fcc2 	bl	800b072 <USBD_LL_Transmit>

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2205      	movs	r2, #5
 800a704:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a708:	2300      	movs	r3, #0
 800a70a:	2200      	movs	r2, #0
 800a70c:	2100      	movs	r1, #0
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fcd0 	bl	800b0b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a724:	2200      	movs	r2, #0
 800a726:	4912      	ldr	r1, [pc, #72]	@ (800a770 <MX_USB_DEVICE_Init+0x50>)
 800a728:	4812      	ldr	r0, [pc, #72]	@ (800a774 <MX_USB_DEVICE_Init+0x54>)
 800a72a:	f7fe fcaf 	bl	800908c <USBD_Init>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a734:	f7f7 f846 	bl	80017c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a738:	490f      	ldr	r1, [pc, #60]	@ (800a778 <MX_USB_DEVICE_Init+0x58>)
 800a73a:	480e      	ldr	r0, [pc, #56]	@ (800a774 <MX_USB_DEVICE_Init+0x54>)
 800a73c:	f7fe fcd6 	bl	80090ec <USBD_RegisterClass>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a746:	f7f7 f83d 	bl	80017c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a74a:	490c      	ldr	r1, [pc, #48]	@ (800a77c <MX_USB_DEVICE_Init+0x5c>)
 800a74c:	4809      	ldr	r0, [pc, #36]	@ (800a774 <MX_USB_DEVICE_Init+0x54>)
 800a74e:	f7fe fbcd 	bl	8008eec <USBD_CDC_RegisterInterface>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a758:	f7f7 f834 	bl	80017c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a75c:	4805      	ldr	r0, [pc, #20]	@ (800a774 <MX_USB_DEVICE_Init+0x54>)
 800a75e:	f7fe fcfb 	bl	8009158 <USBD_Start>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a768:	f7f7 f82c 	bl	80017c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a76c:	bf00      	nop
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	200000ac 	.word	0x200000ac
 800a774:	20000478 	.word	0x20000478
 800a778:	20000018 	.word	0x20000018
 800a77c:	20000098 	.word	0x20000098

0800a780 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a784:	2200      	movs	r2, #0
 800a786:	4905      	ldr	r1, [pc, #20]	@ (800a79c <CDC_Init_FS+0x1c>)
 800a788:	4805      	ldr	r0, [pc, #20]	@ (800a7a0 <CDC_Init_FS+0x20>)
 800a78a:	f7fe fbc9 	bl	8008f20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a78e:	4905      	ldr	r1, [pc, #20]	@ (800a7a4 <CDC_Init_FS+0x24>)
 800a790:	4803      	ldr	r0, [pc, #12]	@ (800a7a0 <CDC_Init_FS+0x20>)
 800a792:	f7fe fbe7 	bl	8008f64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a796:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a798:	4618      	mov	r0, r3
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000f54 	.word	0x20000f54
 800a7a0:	20000478 	.word	0x20000478
 800a7a4:	20000754 	.word	0x20000754

0800a7a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6039      	str	r1, [r7, #0]
 800a7c2:	71fb      	strb	r3, [r7, #7]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	2b23      	cmp	r3, #35	@ 0x23
 800a7cc:	d84a      	bhi.n	800a864 <CDC_Control_FS+0xac>
 800a7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d4 <CDC_Control_FS+0x1c>)
 800a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d4:	0800a865 	.word	0x0800a865
 800a7d8:	0800a865 	.word	0x0800a865
 800a7dc:	0800a865 	.word	0x0800a865
 800a7e0:	0800a865 	.word	0x0800a865
 800a7e4:	0800a865 	.word	0x0800a865
 800a7e8:	0800a865 	.word	0x0800a865
 800a7ec:	0800a865 	.word	0x0800a865
 800a7f0:	0800a865 	.word	0x0800a865
 800a7f4:	0800a865 	.word	0x0800a865
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a865 	.word	0x0800a865
 800a800:	0800a865 	.word	0x0800a865
 800a804:	0800a865 	.word	0x0800a865
 800a808:	0800a865 	.word	0x0800a865
 800a80c:	0800a865 	.word	0x0800a865
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a865 	.word	0x0800a865
 800a818:	0800a865 	.word	0x0800a865
 800a81c:	0800a865 	.word	0x0800a865
 800a820:	0800a865 	.word	0x0800a865
 800a824:	0800a865 	.word	0x0800a865
 800a828:	0800a865 	.word	0x0800a865
 800a82c:	0800a865 	.word	0x0800a865
 800a830:	0800a865 	.word	0x0800a865
 800a834:	0800a865 	.word	0x0800a865
 800a838:	0800a865 	.word	0x0800a865
 800a83c:	0800a865 	.word	0x0800a865
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a865 	.word	0x0800a865
 800a84c:	0800a865 	.word	0x0800a865
 800a850:	0800a865 	.word	0x0800a865
 800a854:	0800a865 	.word	0x0800a865
 800a858:	0800a865 	.word	0x0800a865
 800a85c:	0800a865 	.word	0x0800a865
 800a860:	0800a865 	.word	0x0800a865
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a864:	bf00      	nop
  }

  return (USBD_OK);
 800a866:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	4805      	ldr	r0, [pc, #20]	@ (800a898 <CDC_Receive_FS+0x24>)
 800a882:	f7fe fb6f 	bl	8008f64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a886:	4804      	ldr	r0, [pc, #16]	@ (800a898 <CDC_Receive_FS+0x24>)
 800a888:	f7fe fbca 	bl	8009020 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a88c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20000478 	.word	0x20000478

0800a89c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e4 <CDC_Transmit_FS+0x48>)
 800a8ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e00b      	b.n	800a8da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a8c2:	887b      	ldrh	r3, [r7, #2]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4806      	ldr	r0, [pc, #24]	@ (800a8e4 <CDC_Transmit_FS+0x48>)
 800a8ca:	f7fe fb29 	bl	8008f20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a8ce:	4805      	ldr	r0, [pc, #20]	@ (800a8e4 <CDC_Transmit_FS+0x48>)
 800a8d0:	f7fe fb66 	bl	8008fa0 <USBD_CDC_TransmitPacket>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000478 	.word	0x20000478

0800a8e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2212      	movs	r2, #18
 800a91c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a91e:	4b03      	ldr	r3, [pc, #12]	@ (800a92c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	200000cc 	.word	0x200000cc

0800a930 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	6039      	str	r1, [r7, #0]
 800a93a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	2204      	movs	r2, #4
 800a940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a942:	4b03      	ldr	r3, [pc, #12]	@ (800a950 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	200000ec 	.word	0x200000ec

0800a954 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	6039      	str	r1, [r7, #0]
 800a95e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d105      	bne.n	800a972 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	4907      	ldr	r1, [pc, #28]	@ (800a988 <USBD_FS_ProductStrDescriptor+0x34>)
 800a96a:	4808      	ldr	r0, [pc, #32]	@ (800a98c <USBD_FS_ProductStrDescriptor+0x38>)
 800a96c:	f7ff fde4 	bl	800a538 <USBD_GetString>
 800a970:	e004      	b.n	800a97c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	4904      	ldr	r1, [pc, #16]	@ (800a988 <USBD_FS_ProductStrDescriptor+0x34>)
 800a976:	4805      	ldr	r0, [pc, #20]	@ (800a98c <USBD_FS_ProductStrDescriptor+0x38>)
 800a978:	f7ff fdde 	bl	800a538 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a97c:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20001754 	.word	0x20001754
 800a98c:	0800dfac 	.word	0x0800dfac

0800a990 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	6039      	str	r1, [r7, #0]
 800a99a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	4904      	ldr	r1, [pc, #16]	@ (800a9b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a9a0:	4804      	ldr	r0, [pc, #16]	@ (800a9b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9a2:	f7ff fdc9 	bl	800a538 <USBD_GetString>
  return USBD_StrDesc;
 800a9a6:	4b02      	ldr	r3, [pc, #8]	@ (800a9b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20001754 	.word	0x20001754
 800a9b4:	0800dfc4 	.word	0x0800dfc4

0800a9b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	6039      	str	r1, [r7, #0]
 800a9c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	221a      	movs	r2, #26
 800a9c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9ca:	f000 f855 	bl	800aa78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9ce:	4b02      	ldr	r3, [pc, #8]	@ (800a9d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	200000f0 	.word	0x200000f0

0800a9dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	6039      	str	r1, [r7, #0]
 800a9e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d105      	bne.n	800a9fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4907      	ldr	r1, [pc, #28]	@ (800aa10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9f2:	4808      	ldr	r0, [pc, #32]	@ (800aa14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9f4:	f7ff fda0 	bl	800a538 <USBD_GetString>
 800a9f8:	e004      	b.n	800aa04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	4904      	ldr	r1, [pc, #16]	@ (800aa10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9fe:	4805      	ldr	r0, [pc, #20]	@ (800aa14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa00:	f7ff fd9a 	bl	800a538 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa04:	4b02      	ldr	r3, [pc, #8]	@ (800aa10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20001754 	.word	0x20001754
 800aa14:	0800dfd8 	.word	0x0800dfd8

0800aa18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d105      	bne.n	800aa36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	4907      	ldr	r1, [pc, #28]	@ (800aa4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa2e:	4808      	ldr	r0, [pc, #32]	@ (800aa50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa30:	f7ff fd82 	bl	800a538 <USBD_GetString>
 800aa34:	e004      	b.n	800aa40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4904      	ldr	r1, [pc, #16]	@ (800aa4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa3a:	4805      	ldr	r0, [pc, #20]	@ (800aa50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa3c:	f7ff fd7c 	bl	800a538 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa40:	4b02      	ldr	r3, [pc, #8]	@ (800aa4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20001754 	.word	0x20001754
 800aa50:	0800dfe4 	.word	0x0800dfe4

0800aa54 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	220c      	movs	r2, #12
 800aa64:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800aa66:	4b03      	ldr	r3, [pc, #12]	@ (800aa74 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	200000e0 	.word	0x200000e0

0800aa78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa7e:	4b0f      	ldr	r3, [pc, #60]	@ (800aabc <Get_SerialNum+0x44>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa84:	4b0e      	ldr	r3, [pc, #56]	@ (800aac0 <Get_SerialNum+0x48>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa8a:	4b0e      	ldr	r3, [pc, #56]	@ (800aac4 <Get_SerialNum+0x4c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4413      	add	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d009      	beq.n	800aab2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa9e:	2208      	movs	r2, #8
 800aaa0:	4909      	ldr	r1, [pc, #36]	@ (800aac8 <Get_SerialNum+0x50>)
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 f814 	bl	800aad0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaa8:	2204      	movs	r2, #4
 800aaaa:	4908      	ldr	r1, [pc, #32]	@ (800aacc <Get_SerialNum+0x54>)
 800aaac:	68b8      	ldr	r0, [r7, #8]
 800aaae:	f000 f80f 	bl	800aad0 <IntToUnicode>
  }
}
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	1fff7a10 	.word	0x1fff7a10
 800aac0:	1fff7a14 	.word	0x1fff7a14
 800aac4:	1fff7a18 	.word	0x1fff7a18
 800aac8:	200000f2 	.word	0x200000f2
 800aacc:	20000102 	.word	0x20000102

0800aad0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aae2:	2300      	movs	r3, #0
 800aae4:	75fb      	strb	r3, [r7, #23]
 800aae6:	e027      	b.n	800ab38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	0f1b      	lsrs	r3, r3, #28
 800aaec:	2b09      	cmp	r3, #9
 800aaee:	d80b      	bhi.n	800ab08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	0f1b      	lsrs	r3, r3, #28
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4619      	mov	r1, r3
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	440b      	add	r3, r1
 800ab00:	3230      	adds	r2, #48	@ 0x30
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	701a      	strb	r2, [r3, #0]
 800ab06:	e00a      	b.n	800ab1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	0f1b      	lsrs	r3, r3, #28
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	4619      	mov	r1, r3
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	440b      	add	r3, r1
 800ab18:	3237      	adds	r2, #55	@ 0x37
 800ab1a:	b2d2      	uxtb	r2, r2
 800ab1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	3301      	adds	r3, #1
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	3301      	adds	r3, #1
 800ab36:	75fb      	strb	r3, [r7, #23]
 800ab38:	7dfa      	ldrb	r2, [r7, #23]
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d3d3      	bcc.n	800aae8 <IntToUnicode+0x18>
  }
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
	...

0800ab50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b0a0      	sub	sp, #128	@ 0x80
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	605a      	str	r2, [r3, #4]
 800ab62:	609a      	str	r2, [r3, #8]
 800ab64:	60da      	str	r2, [r3, #12]
 800ab66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	225c      	movs	r2, #92	@ 0x5c
 800ab6e:	2100      	movs	r1, #0
 800ab70:	4618      	mov	r0, r3
 800ab72:	f001 f8d5 	bl	800bd20 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab7e:	d149      	bne.n	800ac14 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ab80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800ab86:	2300      	movs	r3, #0
 800ab88:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ab8a:	f107 0310 	add.w	r3, r7, #16
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fa fe60 	bl	8005854 <HAL_RCCEx_PeriphCLKConfig>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ab9a:	f7f6 fe13 	bl	80017c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	4b1e      	ldr	r3, [pc, #120]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800aba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba6:	4a1d      	ldr	r2, [pc, #116]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800aba8:	f043 0301 	orr.w	r3, r3, #1
 800abac:	6313      	str	r3, [r2, #48]	@ 0x30
 800abae:	4b1b      	ldr	r3, [pc, #108]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800abb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800abba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800abbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abc0:	2302      	movs	r3, #2
 800abc2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc4:	2300      	movs	r3, #0
 800abc6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abc8:	2303      	movs	r3, #3
 800abca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abcc:	230a      	movs	r3, #10
 800abce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abd0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800abd4:	4619      	mov	r1, r3
 800abd6:	4812      	ldr	r0, [pc, #72]	@ (800ac20 <HAL_PCD_MspInit+0xd0>)
 800abd8:	f7f7 fdb6 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abdc:	4b0f      	ldr	r3, [pc, #60]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800abde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe0:	4a0e      	ldr	r2, [pc, #56]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800abe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abe6:	6353      	str	r3, [r2, #52]	@ 0x34
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
 800abec:	4b0b      	ldr	r3, [pc, #44]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800abee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abf0:	4a0a      	ldr	r2, [pc, #40]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800abf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abf6:	6453      	str	r3, [r2, #68]	@ 0x44
 800abf8:	4b08      	ldr	r3, [pc, #32]	@ (800ac1c <HAL_PCD_MspInit+0xcc>)
 800abfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac00:	60bb      	str	r3, [r7, #8]
 800ac02:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac04:	2200      	movs	r2, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	2043      	movs	r0, #67	@ 0x43
 800ac0a:	f7f7 f9c8 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac0e:	2043      	movs	r0, #67	@ 0x43
 800ac10:	f7f7 f9e1 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac14:	bf00      	nop
 800ac16:	3780      	adds	r7, #128	@ 0x80
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	40023800 	.word	0x40023800
 800ac20:	40020000 	.word	0x40020000

0800ac24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fe fad9 	bl	80091f2 <USBD_LL_SetupStage>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac5a:	78fa      	ldrb	r2, [r7, #3]
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	00db      	lsls	r3, r3, #3
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	4619      	mov	r1, r3
 800ac72:	f7fe fb13 	bl	800929c <USBD_LL_DataOutStage>
}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac90:	78fa      	ldrb	r2, [r7, #3]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	3320      	adds	r3, #32
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7fe fbb5 	bl	8009414 <USBD_LL_DataInStage>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe fcf9 	bl	80096b8 <USBD_LL_SOF>
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acd6:	2301      	movs	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	79db      	ldrb	r3, [r3, #7]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]
 800ace6:	e008      	b.n	800acfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	79db      	ldrb	r3, [r3, #7]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d102      	bne.n	800acf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
 800acf4:	e001      	b.n	800acfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800acf6:	f7f6 fd65 	bl	80017c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad00:	7bfa      	ldrb	r2, [r7, #15]
 800ad02:	4611      	mov	r1, r2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe fc93 	bl	8009630 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fc3a 	bl	800958a <USBD_LL_Reset>
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fe fc8e 	bl	8009650 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	6812      	ldr	r2, [r2, #0]
 800ad42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7adb      	ldrb	r3, [r3, #11]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d005      	beq.n	800ad60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad54:	4b04      	ldr	r3, [pc, #16]	@ (800ad68 <HAL_PCD_SuspendCallback+0x48>)
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	4a03      	ldr	r2, [pc, #12]	@ (800ad68 <HAL_PCD_SuspendCallback+0x48>)
 800ad5a:	f043 0306 	orr.w	r3, r3, #6
 800ad5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	e000ed00 	.word	0xe000ed00

0800ad6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fc84 	bl	8009688 <USBD_LL_Resume>
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fcdc 	bl	800975c <USBD_LL_IsoOUTIncomplete>
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adbe:	78fa      	ldrb	r2, [r7, #3]
 800adc0:	4611      	mov	r1, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fc98 	bl	80096f8 <USBD_LL_IsoINIncomplete>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe fcee 	bl	80097c0 <USBD_LL_DevConnected>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe fceb 	bl	80097d6 <USBD_LL_DevDisconnected>
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d13c      	bne.n	800ae92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae18:	4a20      	ldr	r2, [pc, #128]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4a1e      	ldr	r2, [pc, #120]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae28:	4b1c      	ldr	r3, [pc, #112]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ae30:	4b1a      	ldr	r3, [pc, #104]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae32:	2206      	movs	r2, #6
 800ae34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae36:	4b19      	ldr	r3, [pc, #100]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae38:	2202      	movs	r2, #2
 800ae3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae3c:	4b17      	ldr	r3, [pc, #92]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae42:	4b16      	ldr	r3, [pc, #88]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae44:	2202      	movs	r2, #2
 800ae46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae48:	4b14      	ldr	r3, [pc, #80]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae4e:	4b13      	ldr	r3, [pc, #76]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae54:	4b11      	ldr	r3, [pc, #68]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ae5a:	4b10      	ldr	r3, [pc, #64]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae60:	4b0e      	ldr	r3, [pc, #56]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae66:	480d      	ldr	r0, [pc, #52]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae68:	f7f9 f93c 	bl	80040e4 <HAL_PCD_Init>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae72:	f7f6 fca7 	bl	80017c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae76:	2180      	movs	r1, #128	@ 0x80
 800ae78:	4808      	ldr	r0, [pc, #32]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae7a:	f7fa fb9c 	bl	80055b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae7e:	2240      	movs	r2, #64	@ 0x40
 800ae80:	2100      	movs	r1, #0
 800ae82:	4806      	ldr	r0, [pc, #24]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae84:	f7fa fb50 	bl	8005528 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae88:	2280      	movs	r2, #128	@ 0x80
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	4803      	ldr	r0, [pc, #12]	@ (800ae9c <USBD_LL_Init+0x94>)
 800ae8e:	f7fa fb4b 	bl	8005528 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	20001954 	.word	0x20001954

0800aea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7f9 fa2a 	bl	8004310 <HAL_PCD_Start>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 f990 	bl	800b1e8 <USBD_Get_USB_Status>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	461a      	mov	r2, r3
 800aee4:	4603      	mov	r3, r0
 800aee6:	70fb      	strb	r3, [r7, #3]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70bb      	strb	r3, [r7, #2]
 800aeec:	4613      	mov	r3, r2
 800aeee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aefe:	78bb      	ldrb	r3, [r7, #2]
 800af00:	883a      	ldrh	r2, [r7, #0]
 800af02:	78f9      	ldrb	r1, [r7, #3]
 800af04:	f7f9 ff2b 	bl	8004d5e <HAL_PCD_EP_Open>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f96a 	bl	800b1e8 <USBD_Get_USB_Status>
 800af14:	4603      	mov	r3, r0
 800af16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af3c:	78fa      	ldrb	r2, [r7, #3]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7f9 ff76 	bl	8004e32 <HAL_PCD_EP_Close>
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 f94b 	bl	800b1e8 <USBD_Get_USB_Status>
 800af52:	4603      	mov	r3, r0
 800af54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af56:	7bbb      	ldrb	r3, [r7, #14]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	4611      	mov	r1, r2
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fa f82e 	bl	8004fe0 <HAL_PCD_EP_SetStall>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f92c 	bl	800b1e8 <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fa f872 	bl	80050a6 <HAL_PCD_EP_ClrStall>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f90d 	bl	800b1e8 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da0b      	bge.n	800b010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aff8:	78fb      	ldrb	r3, [r7, #3]
 800affa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800affe:	68f9      	ldr	r1, [r7, #12]
 800b000:	4613      	mov	r3, r2
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	440b      	add	r3, r1
 800b00a:	3316      	adds	r3, #22
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	e00b      	b.n	800b028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	4613      	mov	r3, r2
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	4413      	add	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	440b      	add	r3, r1
 800b022:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b026:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b04e:	78fa      	ldrb	r2, [r7, #3]
 800b050:	4611      	mov	r1, r2
 800b052:	4618      	mov	r0, r3
 800b054:	f7f9 fe5f 	bl	8004d16 <HAL_PCD_SetAddress>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 f8c2 	bl	800b1e8 <USBD_Get_USB_Status>
 800b064:	4603      	mov	r3, r0
 800b066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b068:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b086      	sub	sp, #24
 800b076:	af00      	add	r7, sp, #0
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	603b      	str	r3, [r7, #0]
 800b07e:	460b      	mov	r3, r1
 800b080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b090:	7af9      	ldrb	r1, [r7, #11]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	f7f9 ff69 	bl	8004f6c <HAL_PCD_EP_Transmit>
 800b09a:	4603      	mov	r3, r0
 800b09c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f8a1 	bl	800b1e8 <USBD_Get_USB_Status>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	607a      	str	r2, [r7, #4]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b0d2:	7af9      	ldrb	r1, [r7, #11]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	f7f9 fef5 	bl	8004ec6 <HAL_PCD_EP_Receive>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f880 	bl	800b1e8 <USBD_Get_USB_Status>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b108:	78fa      	ldrb	r2, [r7, #3]
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f9 ff15 	bl	8004f3c <HAL_PCD_EP_GetRxCount>
 800b112:	4603      	mov	r3, r0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <HAL_PCDEx_LPM_Callback+0x18>
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d01f      	beq.n	800b172 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b132:	e03b      	b.n	800b1ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7adb      	ldrb	r3, [r3, #11]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d007      	beq.n	800b14c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b13c:	f7f6 f9d2 	bl	80014e4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b140:	4b1c      	ldr	r3, [pc, #112]	@ (800b1b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	4a1b      	ldr	r2, [pc, #108]	@ (800b1b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b146:	f023 0306 	bic.w	r3, r3, #6
 800b14a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6812      	ldr	r2, [r2, #0]
 800b15a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b15e:	f023 0301 	bic.w	r3, r3, #1
 800b162:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe fa8c 	bl	8009688 <USBD_LL_Resume>
    break;
 800b170:	e01c      	b.n	800b1ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b184:	f043 0301 	orr.w	r3, r3, #1
 800b188:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fa5d 	bl	8009650 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	7adb      	ldrb	r3, [r3, #11]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b19e:	4b05      	ldr	r3, [pc, #20]	@ (800b1b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	4a04      	ldr	r2, [pc, #16]	@ (800b1b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b1a4:	f043 0306 	orr.w	r3, r3, #6
 800b1a8:	6113      	str	r3, [r2, #16]
    break;
 800b1aa:	bf00      	nop
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	e000ed00 	.word	0xe000ed00

0800b1b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1c0:	4b03      	ldr	r3, [pc, #12]	@ (800b1d0 <USBD_static_malloc+0x18>)
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	20001e38 	.word	0x20001e38

0800b1d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]

}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d817      	bhi.n	800b22c <USBD_Get_USB_Status+0x44>
 800b1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <USBD_Get_USB_Status+0x1c>)
 800b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b202:	bf00      	nop
 800b204:	0800b215 	.word	0x0800b215
 800b208:	0800b21b 	.word	0x0800b21b
 800b20c:	0800b221 	.word	0x0800b221
 800b210:	0800b227 	.word	0x0800b227
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]
    break;
 800b218:	e00b      	b.n	800b232 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b21a:	2303      	movs	r3, #3
 800b21c:	73fb      	strb	r3, [r7, #15]
    break;
 800b21e:	e008      	b.n	800b232 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b220:	2301      	movs	r3, #1
 800b222:	73fb      	strb	r3, [r7, #15]
    break;
 800b224:	e005      	b.n	800b232 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b226:	2303      	movs	r3, #3
 800b228:	73fb      	strb	r3, [r7, #15]
    break;
 800b22a:	e002      	b.n	800b232 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	73fb      	strb	r3, [r7, #15]
    break;
 800b230:	bf00      	nop
  }
  return usb_status;
 800b232:	7bfb      	ldrb	r3, [r7, #15]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <__cvt>:
 800b240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b244:	ec57 6b10 	vmov	r6, r7, d0
 800b248:	2f00      	cmp	r7, #0
 800b24a:	460c      	mov	r4, r1
 800b24c:	4619      	mov	r1, r3
 800b24e:	463b      	mov	r3, r7
 800b250:	bfbb      	ittet	lt
 800b252:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b256:	461f      	movlt	r7, r3
 800b258:	2300      	movge	r3, #0
 800b25a:	232d      	movlt	r3, #45	@ 0x2d
 800b25c:	700b      	strb	r3, [r1, #0]
 800b25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b260:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b264:	4691      	mov	r9, r2
 800b266:	f023 0820 	bic.w	r8, r3, #32
 800b26a:	bfbc      	itt	lt
 800b26c:	4632      	movlt	r2, r6
 800b26e:	4616      	movlt	r6, r2
 800b270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b274:	d005      	beq.n	800b282 <__cvt+0x42>
 800b276:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b27a:	d100      	bne.n	800b27e <__cvt+0x3e>
 800b27c:	3401      	adds	r4, #1
 800b27e:	2102      	movs	r1, #2
 800b280:	e000      	b.n	800b284 <__cvt+0x44>
 800b282:	2103      	movs	r1, #3
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	ab02      	add	r3, sp, #8
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	ec47 6b10 	vmov	d0, r6, r7
 800b290:	4653      	mov	r3, sl
 800b292:	4622      	mov	r2, r4
 800b294:	f000 fe08 	bl	800bea8 <_dtoa_r>
 800b298:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b29c:	4605      	mov	r5, r0
 800b29e:	d119      	bne.n	800b2d4 <__cvt+0x94>
 800b2a0:	f019 0f01 	tst.w	r9, #1
 800b2a4:	d00e      	beq.n	800b2c4 <__cvt+0x84>
 800b2a6:	eb00 0904 	add.w	r9, r0, r4
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc29 	bl	8000b08 <__aeabi_dcmpeq>
 800b2b6:	b108      	cbz	r0, 800b2bc <__cvt+0x7c>
 800b2b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2bc:	2230      	movs	r2, #48	@ 0x30
 800b2be:	9b03      	ldr	r3, [sp, #12]
 800b2c0:	454b      	cmp	r3, r9
 800b2c2:	d31e      	bcc.n	800b302 <__cvt+0xc2>
 800b2c4:	9b03      	ldr	r3, [sp, #12]
 800b2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2c8:	1b5b      	subs	r3, r3, r5
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	b004      	add	sp, #16
 800b2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2d8:	eb00 0904 	add.w	r9, r0, r4
 800b2dc:	d1e5      	bne.n	800b2aa <__cvt+0x6a>
 800b2de:	7803      	ldrb	r3, [r0, #0]
 800b2e0:	2b30      	cmp	r3, #48	@ 0x30
 800b2e2:	d10a      	bne.n	800b2fa <__cvt+0xba>
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 800b2f0:	b918      	cbnz	r0, 800b2fa <__cvt+0xba>
 800b2f2:	f1c4 0401 	rsb	r4, r4, #1
 800b2f6:	f8ca 4000 	str.w	r4, [sl]
 800b2fa:	f8da 3000 	ldr.w	r3, [sl]
 800b2fe:	4499      	add	r9, r3
 800b300:	e7d3      	b.n	800b2aa <__cvt+0x6a>
 800b302:	1c59      	adds	r1, r3, #1
 800b304:	9103      	str	r1, [sp, #12]
 800b306:	701a      	strb	r2, [r3, #0]
 800b308:	e7d9      	b.n	800b2be <__cvt+0x7e>

0800b30a <__exponent>:
 800b30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b30c:	2900      	cmp	r1, #0
 800b30e:	bfba      	itte	lt
 800b310:	4249      	neglt	r1, r1
 800b312:	232d      	movlt	r3, #45	@ 0x2d
 800b314:	232b      	movge	r3, #43	@ 0x2b
 800b316:	2909      	cmp	r1, #9
 800b318:	7002      	strb	r2, [r0, #0]
 800b31a:	7043      	strb	r3, [r0, #1]
 800b31c:	dd29      	ble.n	800b372 <__exponent+0x68>
 800b31e:	f10d 0307 	add.w	r3, sp, #7
 800b322:	461d      	mov	r5, r3
 800b324:	270a      	movs	r7, #10
 800b326:	461a      	mov	r2, r3
 800b328:	fbb1 f6f7 	udiv	r6, r1, r7
 800b32c:	fb07 1416 	mls	r4, r7, r6, r1
 800b330:	3430      	adds	r4, #48	@ 0x30
 800b332:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b336:	460c      	mov	r4, r1
 800b338:	2c63      	cmp	r4, #99	@ 0x63
 800b33a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b33e:	4631      	mov	r1, r6
 800b340:	dcf1      	bgt.n	800b326 <__exponent+0x1c>
 800b342:	3130      	adds	r1, #48	@ 0x30
 800b344:	1e94      	subs	r4, r2, #2
 800b346:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b34a:	1c41      	adds	r1, r0, #1
 800b34c:	4623      	mov	r3, r4
 800b34e:	42ab      	cmp	r3, r5
 800b350:	d30a      	bcc.n	800b368 <__exponent+0x5e>
 800b352:	f10d 0309 	add.w	r3, sp, #9
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	42ac      	cmp	r4, r5
 800b35a:	bf88      	it	hi
 800b35c:	2300      	movhi	r3, #0
 800b35e:	3302      	adds	r3, #2
 800b360:	4403      	add	r3, r0
 800b362:	1a18      	subs	r0, r3, r0
 800b364:	b003      	add	sp, #12
 800b366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b368:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b36c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b370:	e7ed      	b.n	800b34e <__exponent+0x44>
 800b372:	2330      	movs	r3, #48	@ 0x30
 800b374:	3130      	adds	r1, #48	@ 0x30
 800b376:	7083      	strb	r3, [r0, #2]
 800b378:	70c1      	strb	r1, [r0, #3]
 800b37a:	1d03      	adds	r3, r0, #4
 800b37c:	e7f1      	b.n	800b362 <__exponent+0x58>
	...

0800b380 <_printf_float>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	b08d      	sub	sp, #52	@ 0x34
 800b386:	460c      	mov	r4, r1
 800b388:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b38c:	4616      	mov	r6, r2
 800b38e:	461f      	mov	r7, r3
 800b390:	4605      	mov	r5, r0
 800b392:	f000 fcfb 	bl	800bd8c <_localeconv_r>
 800b396:	6803      	ldr	r3, [r0, #0]
 800b398:	9304      	str	r3, [sp, #16]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7f4 ff88 	bl	80002b0 <strlen>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a8:	9005      	str	r0, [sp, #20]
 800b3aa:	3307      	adds	r3, #7
 800b3ac:	f023 0307 	bic.w	r3, r3, #7
 800b3b0:	f103 0208 	add.w	r2, r3, #8
 800b3b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3b8:	f8d4 b000 	ldr.w	fp, [r4]
 800b3bc:	f8c8 2000 	str.w	r2, [r8]
 800b3c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3c8:	9307      	str	r3, [sp, #28]
 800b3ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3d6:	4b9c      	ldr	r3, [pc, #624]	@ (800b648 <_printf_float+0x2c8>)
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3dc:	f7f5 fbc6 	bl	8000b6c <__aeabi_dcmpun>
 800b3e0:	bb70      	cbnz	r0, 800b440 <_printf_float+0xc0>
 800b3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3e6:	4b98      	ldr	r3, [pc, #608]	@ (800b648 <_printf_float+0x2c8>)
 800b3e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3ec:	f7f5 fba0 	bl	8000b30 <__aeabi_dcmple>
 800b3f0:	bb30      	cbnz	r0, 800b440 <_printf_float+0xc0>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	f7f5 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 800b3fe:	b110      	cbz	r0, 800b406 <_printf_float+0x86>
 800b400:	232d      	movs	r3, #45	@ 0x2d
 800b402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b406:	4a91      	ldr	r2, [pc, #580]	@ (800b64c <_printf_float+0x2cc>)
 800b408:	4b91      	ldr	r3, [pc, #580]	@ (800b650 <_printf_float+0x2d0>)
 800b40a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b40e:	bf8c      	ite	hi
 800b410:	4690      	movhi	r8, r2
 800b412:	4698      	movls	r8, r3
 800b414:	2303      	movs	r3, #3
 800b416:	6123      	str	r3, [r4, #16]
 800b418:	f02b 0304 	bic.w	r3, fp, #4
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	f04f 0900 	mov.w	r9, #0
 800b422:	9700      	str	r7, [sp, #0]
 800b424:	4633      	mov	r3, r6
 800b426:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b428:	4621      	mov	r1, r4
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 f9d2 	bl	800b7d4 <_printf_common>
 800b430:	3001      	adds	r0, #1
 800b432:	f040 808d 	bne.w	800b550 <_printf_float+0x1d0>
 800b436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b43a:	b00d      	add	sp, #52	@ 0x34
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b440:	4642      	mov	r2, r8
 800b442:	464b      	mov	r3, r9
 800b444:	4640      	mov	r0, r8
 800b446:	4649      	mov	r1, r9
 800b448:	f7f5 fb90 	bl	8000b6c <__aeabi_dcmpun>
 800b44c:	b140      	cbz	r0, 800b460 <_printf_float+0xe0>
 800b44e:	464b      	mov	r3, r9
 800b450:	2b00      	cmp	r3, #0
 800b452:	bfbc      	itt	lt
 800b454:	232d      	movlt	r3, #45	@ 0x2d
 800b456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b45a:	4a7e      	ldr	r2, [pc, #504]	@ (800b654 <_printf_float+0x2d4>)
 800b45c:	4b7e      	ldr	r3, [pc, #504]	@ (800b658 <_printf_float+0x2d8>)
 800b45e:	e7d4      	b.n	800b40a <_printf_float+0x8a>
 800b460:	6863      	ldr	r3, [r4, #4]
 800b462:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b466:	9206      	str	r2, [sp, #24]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	d13b      	bne.n	800b4e4 <_printf_float+0x164>
 800b46c:	2306      	movs	r3, #6
 800b46e:	6063      	str	r3, [r4, #4]
 800b470:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b474:	2300      	movs	r3, #0
 800b476:	6022      	str	r2, [r4, #0]
 800b478:	9303      	str	r3, [sp, #12]
 800b47a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b47c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b480:	ab09      	add	r3, sp, #36	@ 0x24
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	6861      	ldr	r1, [r4, #4]
 800b486:	ec49 8b10 	vmov	d0, r8, r9
 800b48a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b48e:	4628      	mov	r0, r5
 800b490:	f7ff fed6 	bl	800b240 <__cvt>
 800b494:	9b06      	ldr	r3, [sp, #24]
 800b496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b498:	2b47      	cmp	r3, #71	@ 0x47
 800b49a:	4680      	mov	r8, r0
 800b49c:	d129      	bne.n	800b4f2 <_printf_float+0x172>
 800b49e:	1cc8      	adds	r0, r1, #3
 800b4a0:	db02      	blt.n	800b4a8 <_printf_float+0x128>
 800b4a2:	6863      	ldr	r3, [r4, #4]
 800b4a4:	4299      	cmp	r1, r3
 800b4a6:	dd41      	ble.n	800b52c <_printf_float+0x1ac>
 800b4a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4ac:	fa5f fa8a 	uxtb.w	sl, sl
 800b4b0:	3901      	subs	r1, #1
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4ba:	f7ff ff26 	bl	800b30a <__exponent>
 800b4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4c0:	1813      	adds	r3, r2, r0
 800b4c2:	2a01      	cmp	r2, #1
 800b4c4:	4681      	mov	r9, r0
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	dc02      	bgt.n	800b4d0 <_printf_float+0x150>
 800b4ca:	6822      	ldr	r2, [r4, #0]
 800b4cc:	07d2      	lsls	r2, r2, #31
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_float+0x154>
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0a2      	beq.n	800b422 <_printf_float+0xa2>
 800b4dc:	232d      	movs	r3, #45	@ 0x2d
 800b4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e2:	e79e      	b.n	800b422 <_printf_float+0xa2>
 800b4e4:	9a06      	ldr	r2, [sp, #24]
 800b4e6:	2a47      	cmp	r2, #71	@ 0x47
 800b4e8:	d1c2      	bne.n	800b470 <_printf_float+0xf0>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1c0      	bne.n	800b470 <_printf_float+0xf0>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e7bd      	b.n	800b46e <_printf_float+0xee>
 800b4f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4f6:	d9db      	bls.n	800b4b0 <_printf_float+0x130>
 800b4f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4fc:	d118      	bne.n	800b530 <_printf_float+0x1b0>
 800b4fe:	2900      	cmp	r1, #0
 800b500:	6863      	ldr	r3, [r4, #4]
 800b502:	dd0b      	ble.n	800b51c <_printf_float+0x19c>
 800b504:	6121      	str	r1, [r4, #16]
 800b506:	b913      	cbnz	r3, 800b50e <_printf_float+0x18e>
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	07d0      	lsls	r0, r2, #31
 800b50c:	d502      	bpl.n	800b514 <_printf_float+0x194>
 800b50e:	3301      	adds	r3, #1
 800b510:	440b      	add	r3, r1
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	e7db      	b.n	800b4d4 <_printf_float+0x154>
 800b51c:	b913      	cbnz	r3, 800b524 <_printf_float+0x1a4>
 800b51e:	6822      	ldr	r2, [r4, #0]
 800b520:	07d2      	lsls	r2, r2, #31
 800b522:	d501      	bpl.n	800b528 <_printf_float+0x1a8>
 800b524:	3302      	adds	r3, #2
 800b526:	e7f4      	b.n	800b512 <_printf_float+0x192>
 800b528:	2301      	movs	r3, #1
 800b52a:	e7f2      	b.n	800b512 <_printf_float+0x192>
 800b52c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b532:	4299      	cmp	r1, r3
 800b534:	db05      	blt.n	800b542 <_printf_float+0x1c2>
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	6121      	str	r1, [r4, #16]
 800b53a:	07d8      	lsls	r0, r3, #31
 800b53c:	d5ea      	bpl.n	800b514 <_printf_float+0x194>
 800b53e:	1c4b      	adds	r3, r1, #1
 800b540:	e7e7      	b.n	800b512 <_printf_float+0x192>
 800b542:	2900      	cmp	r1, #0
 800b544:	bfd4      	ite	le
 800b546:	f1c1 0202 	rsble	r2, r1, #2
 800b54a:	2201      	movgt	r2, #1
 800b54c:	4413      	add	r3, r2
 800b54e:	e7e0      	b.n	800b512 <_printf_float+0x192>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	055a      	lsls	r2, r3, #21
 800b554:	d407      	bmi.n	800b566 <_printf_float+0x1e6>
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	4642      	mov	r2, r8
 800b55a:	4631      	mov	r1, r6
 800b55c:	4628      	mov	r0, r5
 800b55e:	47b8      	blx	r7
 800b560:	3001      	adds	r0, #1
 800b562:	d12b      	bne.n	800b5bc <_printf_float+0x23c>
 800b564:	e767      	b.n	800b436 <_printf_float+0xb6>
 800b566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b56a:	f240 80dd 	bls.w	800b728 <_printf_float+0x3a8>
 800b56e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b572:	2200      	movs	r2, #0
 800b574:	2300      	movs	r3, #0
 800b576:	f7f5 fac7 	bl	8000b08 <__aeabi_dcmpeq>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d033      	beq.n	800b5e6 <_printf_float+0x266>
 800b57e:	4a37      	ldr	r2, [pc, #220]	@ (800b65c <_printf_float+0x2dc>)
 800b580:	2301      	movs	r3, #1
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	47b8      	blx	r7
 800b588:	3001      	adds	r0, #1
 800b58a:	f43f af54 	beq.w	800b436 <_printf_float+0xb6>
 800b58e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b592:	4543      	cmp	r3, r8
 800b594:	db02      	blt.n	800b59c <_printf_float+0x21c>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	07d8      	lsls	r0, r3, #31
 800b59a:	d50f      	bpl.n	800b5bc <_printf_float+0x23c>
 800b59c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	47b8      	blx	r7
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	f43f af45 	beq.w	800b436 <_printf_float+0xb6>
 800b5ac:	f04f 0900 	mov.w	r9, #0
 800b5b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b5b4:	f104 0a1a 	add.w	sl, r4, #26
 800b5b8:	45c8      	cmp	r8, r9
 800b5ba:	dc09      	bgt.n	800b5d0 <_printf_float+0x250>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	079b      	lsls	r3, r3, #30
 800b5c0:	f100 8103 	bmi.w	800b7ca <_printf_float+0x44a>
 800b5c4:	68e0      	ldr	r0, [r4, #12]
 800b5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c8:	4298      	cmp	r0, r3
 800b5ca:	bfb8      	it	lt
 800b5cc:	4618      	movlt	r0, r3
 800b5ce:	e734      	b.n	800b43a <_printf_float+0xba>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4652      	mov	r2, sl
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	47b8      	blx	r7
 800b5da:	3001      	adds	r0, #1
 800b5dc:	f43f af2b 	beq.w	800b436 <_printf_float+0xb6>
 800b5e0:	f109 0901 	add.w	r9, r9, #1
 800b5e4:	e7e8      	b.n	800b5b8 <_printf_float+0x238>
 800b5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc39      	bgt.n	800b660 <_printf_float+0x2e0>
 800b5ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b65c <_printf_float+0x2dc>)
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b8      	blx	r7
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f43f af1d 	beq.w	800b436 <_printf_float+0xb6>
 800b5fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b600:	ea59 0303 	orrs.w	r3, r9, r3
 800b604:	d102      	bne.n	800b60c <_printf_float+0x28c>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	07d9      	lsls	r1, r3, #31
 800b60a:	d5d7      	bpl.n	800b5bc <_printf_float+0x23c>
 800b60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	f43f af0d 	beq.w	800b436 <_printf_float+0xb6>
 800b61c:	f04f 0a00 	mov.w	sl, #0
 800b620:	f104 0b1a 	add.w	fp, r4, #26
 800b624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b626:	425b      	negs	r3, r3
 800b628:	4553      	cmp	r3, sl
 800b62a:	dc01      	bgt.n	800b630 <_printf_float+0x2b0>
 800b62c:	464b      	mov	r3, r9
 800b62e:	e793      	b.n	800b558 <_printf_float+0x1d8>
 800b630:	2301      	movs	r3, #1
 800b632:	465a      	mov	r2, fp
 800b634:	4631      	mov	r1, r6
 800b636:	4628      	mov	r0, r5
 800b638:	47b8      	blx	r7
 800b63a:	3001      	adds	r0, #1
 800b63c:	f43f aefb 	beq.w	800b436 <_printf_float+0xb6>
 800b640:	f10a 0a01 	add.w	sl, sl, #1
 800b644:	e7ee      	b.n	800b624 <_printf_float+0x2a4>
 800b646:	bf00      	nop
 800b648:	7fefffff 	.word	0x7fefffff
 800b64c:	0800e018 	.word	0x0800e018
 800b650:	0800e014 	.word	0x0800e014
 800b654:	0800e020 	.word	0x0800e020
 800b658:	0800e01c 	.word	0x0800e01c
 800b65c:	0800e024 	.word	0x0800e024
 800b660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b662:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b666:	4553      	cmp	r3, sl
 800b668:	bfa8      	it	ge
 800b66a:	4653      	movge	r3, sl
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	4699      	mov	r9, r3
 800b670:	dc36      	bgt.n	800b6e0 <_printf_float+0x360>
 800b672:	f04f 0b00 	mov.w	fp, #0
 800b676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b67a:	f104 021a 	add.w	r2, r4, #26
 800b67e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b680:	9306      	str	r3, [sp, #24]
 800b682:	eba3 0309 	sub.w	r3, r3, r9
 800b686:	455b      	cmp	r3, fp
 800b688:	dc31      	bgt.n	800b6ee <_printf_float+0x36e>
 800b68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68c:	459a      	cmp	sl, r3
 800b68e:	dc3a      	bgt.n	800b706 <_printf_float+0x386>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	07da      	lsls	r2, r3, #31
 800b694:	d437      	bmi.n	800b706 <_printf_float+0x386>
 800b696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b698:	ebaa 0903 	sub.w	r9, sl, r3
 800b69c:	9b06      	ldr	r3, [sp, #24]
 800b69e:	ebaa 0303 	sub.w	r3, sl, r3
 800b6a2:	4599      	cmp	r9, r3
 800b6a4:	bfa8      	it	ge
 800b6a6:	4699      	movge	r9, r3
 800b6a8:	f1b9 0f00 	cmp.w	r9, #0
 800b6ac:	dc33      	bgt.n	800b716 <_printf_float+0x396>
 800b6ae:	f04f 0800 	mov.w	r8, #0
 800b6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6b6:	f104 0b1a 	add.w	fp, r4, #26
 800b6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b6c0:	eba3 0309 	sub.w	r3, r3, r9
 800b6c4:	4543      	cmp	r3, r8
 800b6c6:	f77f af79 	ble.w	800b5bc <_printf_float+0x23c>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	465a      	mov	r2, fp
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	47b8      	blx	r7
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f43f aeae 	beq.w	800b436 <_printf_float+0xb6>
 800b6da:	f108 0801 	add.w	r8, r8, #1
 800b6de:	e7ec      	b.n	800b6ba <_printf_float+0x33a>
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d1c2      	bne.n	800b672 <_printf_float+0x2f2>
 800b6ec:	e6a3      	b.n	800b436 <_printf_float+0xb6>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	9206      	str	r2, [sp, #24]
 800b6f6:	47b8      	blx	r7
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	f43f ae9c 	beq.w	800b436 <_printf_float+0xb6>
 800b6fe:	9a06      	ldr	r2, [sp, #24]
 800b700:	f10b 0b01 	add.w	fp, fp, #1
 800b704:	e7bb      	b.n	800b67e <_printf_float+0x2fe>
 800b706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	d1c0      	bne.n	800b696 <_printf_float+0x316>
 800b714:	e68f      	b.n	800b436 <_printf_float+0xb6>
 800b716:	9a06      	ldr	r2, [sp, #24]
 800b718:	464b      	mov	r3, r9
 800b71a:	4442      	add	r2, r8
 800b71c:	4631      	mov	r1, r6
 800b71e:	4628      	mov	r0, r5
 800b720:	47b8      	blx	r7
 800b722:	3001      	adds	r0, #1
 800b724:	d1c3      	bne.n	800b6ae <_printf_float+0x32e>
 800b726:	e686      	b.n	800b436 <_printf_float+0xb6>
 800b728:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b72c:	f1ba 0f01 	cmp.w	sl, #1
 800b730:	dc01      	bgt.n	800b736 <_printf_float+0x3b6>
 800b732:	07db      	lsls	r3, r3, #31
 800b734:	d536      	bpl.n	800b7a4 <_printf_float+0x424>
 800b736:	2301      	movs	r3, #1
 800b738:	4642      	mov	r2, r8
 800b73a:	4631      	mov	r1, r6
 800b73c:	4628      	mov	r0, r5
 800b73e:	47b8      	blx	r7
 800b740:	3001      	adds	r0, #1
 800b742:	f43f ae78 	beq.w	800b436 <_printf_float+0xb6>
 800b746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b8      	blx	r7
 800b750:	3001      	adds	r0, #1
 800b752:	f43f ae70 	beq.w	800b436 <_printf_float+0xb6>
 800b756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b75a:	2200      	movs	r2, #0
 800b75c:	2300      	movs	r3, #0
 800b75e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b762:	f7f5 f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 800b766:	b9c0      	cbnz	r0, 800b79a <_printf_float+0x41a>
 800b768:	4653      	mov	r3, sl
 800b76a:	f108 0201 	add.w	r2, r8, #1
 800b76e:	4631      	mov	r1, r6
 800b770:	4628      	mov	r0, r5
 800b772:	47b8      	blx	r7
 800b774:	3001      	adds	r0, #1
 800b776:	d10c      	bne.n	800b792 <_printf_float+0x412>
 800b778:	e65d      	b.n	800b436 <_printf_float+0xb6>
 800b77a:	2301      	movs	r3, #1
 800b77c:	465a      	mov	r2, fp
 800b77e:	4631      	mov	r1, r6
 800b780:	4628      	mov	r0, r5
 800b782:	47b8      	blx	r7
 800b784:	3001      	adds	r0, #1
 800b786:	f43f ae56 	beq.w	800b436 <_printf_float+0xb6>
 800b78a:	f108 0801 	add.w	r8, r8, #1
 800b78e:	45d0      	cmp	r8, sl
 800b790:	dbf3      	blt.n	800b77a <_printf_float+0x3fa>
 800b792:	464b      	mov	r3, r9
 800b794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b798:	e6df      	b.n	800b55a <_printf_float+0x1da>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	f104 0b1a 	add.w	fp, r4, #26
 800b7a2:	e7f4      	b.n	800b78e <_printf_float+0x40e>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	4642      	mov	r2, r8
 800b7a8:	e7e1      	b.n	800b76e <_printf_float+0x3ee>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	464a      	mov	r2, r9
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f43f ae3e 	beq.w	800b436 <_printf_float+0xb6>
 800b7ba:	f108 0801 	add.w	r8, r8, #1
 800b7be:	68e3      	ldr	r3, [r4, #12]
 800b7c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7c2:	1a5b      	subs	r3, r3, r1
 800b7c4:	4543      	cmp	r3, r8
 800b7c6:	dcf0      	bgt.n	800b7aa <_printf_float+0x42a>
 800b7c8:	e6fc      	b.n	800b5c4 <_printf_float+0x244>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	f104 0919 	add.w	r9, r4, #25
 800b7d2:	e7f4      	b.n	800b7be <_printf_float+0x43e>

0800b7d4 <_printf_common>:
 800b7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d8:	4616      	mov	r6, r2
 800b7da:	4698      	mov	r8, r3
 800b7dc:	688a      	ldr	r2, [r1, #8]
 800b7de:	690b      	ldr	r3, [r1, #16]
 800b7e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bfb8      	it	lt
 800b7e8:	4613      	movlt	r3, r2
 800b7ea:	6033      	str	r3, [r6, #0]
 800b7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b10a      	cbz	r2, 800b7fa <_printf_common+0x26>
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	6033      	str	r3, [r6, #0]
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	0699      	lsls	r1, r3, #26
 800b7fe:	bf42      	ittt	mi
 800b800:	6833      	ldrmi	r3, [r6, #0]
 800b802:	3302      	addmi	r3, #2
 800b804:	6033      	strmi	r3, [r6, #0]
 800b806:	6825      	ldr	r5, [r4, #0]
 800b808:	f015 0506 	ands.w	r5, r5, #6
 800b80c:	d106      	bne.n	800b81c <_printf_common+0x48>
 800b80e:	f104 0a19 	add.w	sl, r4, #25
 800b812:	68e3      	ldr	r3, [r4, #12]
 800b814:	6832      	ldr	r2, [r6, #0]
 800b816:	1a9b      	subs	r3, r3, r2
 800b818:	42ab      	cmp	r3, r5
 800b81a:	dc26      	bgt.n	800b86a <_printf_common+0x96>
 800b81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	3b00      	subs	r3, #0
 800b824:	bf18      	it	ne
 800b826:	2301      	movne	r3, #1
 800b828:	0692      	lsls	r2, r2, #26
 800b82a:	d42b      	bmi.n	800b884 <_printf_common+0xb0>
 800b82c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b830:	4641      	mov	r1, r8
 800b832:	4638      	mov	r0, r7
 800b834:	47c8      	blx	r9
 800b836:	3001      	adds	r0, #1
 800b838:	d01e      	beq.n	800b878 <_printf_common+0xa4>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	6922      	ldr	r2, [r4, #16]
 800b83e:	f003 0306 	and.w	r3, r3, #6
 800b842:	2b04      	cmp	r3, #4
 800b844:	bf02      	ittt	eq
 800b846:	68e5      	ldreq	r5, [r4, #12]
 800b848:	6833      	ldreq	r3, [r6, #0]
 800b84a:	1aed      	subeq	r5, r5, r3
 800b84c:	68a3      	ldr	r3, [r4, #8]
 800b84e:	bf0c      	ite	eq
 800b850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b854:	2500      	movne	r5, #0
 800b856:	4293      	cmp	r3, r2
 800b858:	bfc4      	itt	gt
 800b85a:	1a9b      	subgt	r3, r3, r2
 800b85c:	18ed      	addgt	r5, r5, r3
 800b85e:	2600      	movs	r6, #0
 800b860:	341a      	adds	r4, #26
 800b862:	42b5      	cmp	r5, r6
 800b864:	d11a      	bne.n	800b89c <_printf_common+0xc8>
 800b866:	2000      	movs	r0, #0
 800b868:	e008      	b.n	800b87c <_printf_common+0xa8>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4652      	mov	r2, sl
 800b86e:	4641      	mov	r1, r8
 800b870:	4638      	mov	r0, r7
 800b872:	47c8      	blx	r9
 800b874:	3001      	adds	r0, #1
 800b876:	d103      	bne.n	800b880 <_printf_common+0xac>
 800b878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b880:	3501      	adds	r5, #1
 800b882:	e7c6      	b.n	800b812 <_printf_common+0x3e>
 800b884:	18e1      	adds	r1, r4, r3
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	2030      	movs	r0, #48	@ 0x30
 800b88a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b88e:	4422      	add	r2, r4
 800b890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b898:	3302      	adds	r3, #2
 800b89a:	e7c7      	b.n	800b82c <_printf_common+0x58>
 800b89c:	2301      	movs	r3, #1
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4641      	mov	r1, r8
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	47c8      	blx	r9
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d0e6      	beq.n	800b878 <_printf_common+0xa4>
 800b8aa:	3601      	adds	r6, #1
 800b8ac:	e7d9      	b.n	800b862 <_printf_common+0x8e>
	...

0800b8b0 <_printf_i>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	7e0f      	ldrb	r7, [r1, #24]
 800b8b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8b8:	2f78      	cmp	r7, #120	@ 0x78
 800b8ba:	4691      	mov	r9, r2
 800b8bc:	4680      	mov	r8, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	469a      	mov	sl, r3
 800b8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8c6:	d807      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8c8:	2f62      	cmp	r7, #98	@ 0x62
 800b8ca:	d80a      	bhi.n	800b8e2 <_printf_i+0x32>
 800b8cc:	2f00      	cmp	r7, #0
 800b8ce:	f000 80d1 	beq.w	800ba74 <_printf_i+0x1c4>
 800b8d2:	2f58      	cmp	r7, #88	@ 0x58
 800b8d4:	f000 80b8 	beq.w	800ba48 <_printf_i+0x198>
 800b8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8e0:	e03a      	b.n	800b958 <_printf_i+0xa8>
 800b8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8e6:	2b15      	cmp	r3, #21
 800b8e8:	d8f6      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b8f0 <_printf_i+0x40>)
 800b8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8f0:	0800b949 	.word	0x0800b949
 800b8f4:	0800b95d 	.word	0x0800b95d
 800b8f8:	0800b8d9 	.word	0x0800b8d9
 800b8fc:	0800b8d9 	.word	0x0800b8d9
 800b900:	0800b8d9 	.word	0x0800b8d9
 800b904:	0800b8d9 	.word	0x0800b8d9
 800b908:	0800b95d 	.word	0x0800b95d
 800b90c:	0800b8d9 	.word	0x0800b8d9
 800b910:	0800b8d9 	.word	0x0800b8d9
 800b914:	0800b8d9 	.word	0x0800b8d9
 800b918:	0800b8d9 	.word	0x0800b8d9
 800b91c:	0800ba5b 	.word	0x0800ba5b
 800b920:	0800b987 	.word	0x0800b987
 800b924:	0800ba15 	.word	0x0800ba15
 800b928:	0800b8d9 	.word	0x0800b8d9
 800b92c:	0800b8d9 	.word	0x0800b8d9
 800b930:	0800ba7d 	.word	0x0800ba7d
 800b934:	0800b8d9 	.word	0x0800b8d9
 800b938:	0800b987 	.word	0x0800b987
 800b93c:	0800b8d9 	.word	0x0800b8d9
 800b940:	0800b8d9 	.word	0x0800b8d9
 800b944:	0800ba1d 	.word	0x0800ba1d
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6032      	str	r2, [r6, #0]
 800b950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b958:	2301      	movs	r3, #1
 800b95a:	e09c      	b.n	800ba96 <_printf_i+0x1e6>
 800b95c:	6833      	ldr	r3, [r6, #0]
 800b95e:	6820      	ldr	r0, [r4, #0]
 800b960:	1d19      	adds	r1, r3, #4
 800b962:	6031      	str	r1, [r6, #0]
 800b964:	0606      	lsls	r6, r0, #24
 800b966:	d501      	bpl.n	800b96c <_printf_i+0xbc>
 800b968:	681d      	ldr	r5, [r3, #0]
 800b96a:	e003      	b.n	800b974 <_printf_i+0xc4>
 800b96c:	0645      	lsls	r5, r0, #25
 800b96e:	d5fb      	bpl.n	800b968 <_printf_i+0xb8>
 800b970:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b974:	2d00      	cmp	r5, #0
 800b976:	da03      	bge.n	800b980 <_printf_i+0xd0>
 800b978:	232d      	movs	r3, #45	@ 0x2d
 800b97a:	426d      	negs	r5, r5
 800b97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b980:	4858      	ldr	r0, [pc, #352]	@ (800bae4 <_printf_i+0x234>)
 800b982:	230a      	movs	r3, #10
 800b984:	e011      	b.n	800b9aa <_printf_i+0xfa>
 800b986:	6821      	ldr	r1, [r4, #0]
 800b988:	6833      	ldr	r3, [r6, #0]
 800b98a:	0608      	lsls	r0, r1, #24
 800b98c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b990:	d402      	bmi.n	800b998 <_printf_i+0xe8>
 800b992:	0649      	lsls	r1, r1, #25
 800b994:	bf48      	it	mi
 800b996:	b2ad      	uxthmi	r5, r5
 800b998:	2f6f      	cmp	r7, #111	@ 0x6f
 800b99a:	4852      	ldr	r0, [pc, #328]	@ (800bae4 <_printf_i+0x234>)
 800b99c:	6033      	str	r3, [r6, #0]
 800b99e:	bf14      	ite	ne
 800b9a0:	230a      	movne	r3, #10
 800b9a2:	2308      	moveq	r3, #8
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9aa:	6866      	ldr	r6, [r4, #4]
 800b9ac:	60a6      	str	r6, [r4, #8]
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	db05      	blt.n	800b9be <_printf_i+0x10e>
 800b9b2:	6821      	ldr	r1, [r4, #0]
 800b9b4:	432e      	orrs	r6, r5
 800b9b6:	f021 0104 	bic.w	r1, r1, #4
 800b9ba:	6021      	str	r1, [r4, #0]
 800b9bc:	d04b      	beq.n	800ba56 <_printf_i+0x1a6>
 800b9be:	4616      	mov	r6, r2
 800b9c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9c4:	fb03 5711 	mls	r7, r3, r1, r5
 800b9c8:	5dc7      	ldrb	r7, [r0, r7]
 800b9ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9ce:	462f      	mov	r7, r5
 800b9d0:	42bb      	cmp	r3, r7
 800b9d2:	460d      	mov	r5, r1
 800b9d4:	d9f4      	bls.n	800b9c0 <_printf_i+0x110>
 800b9d6:	2b08      	cmp	r3, #8
 800b9d8:	d10b      	bne.n	800b9f2 <_printf_i+0x142>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	07df      	lsls	r7, r3, #31
 800b9de:	d508      	bpl.n	800b9f2 <_printf_i+0x142>
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	6861      	ldr	r1, [r4, #4]
 800b9e4:	4299      	cmp	r1, r3
 800b9e6:	bfde      	ittt	le
 800b9e8:	2330      	movle	r3, #48	@ 0x30
 800b9ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b9f2:	1b92      	subs	r2, r2, r6
 800b9f4:	6122      	str	r2, [r4, #16]
 800b9f6:	f8cd a000 	str.w	sl, [sp]
 800b9fa:	464b      	mov	r3, r9
 800b9fc:	aa03      	add	r2, sp, #12
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4640      	mov	r0, r8
 800ba02:	f7ff fee7 	bl	800b7d4 <_printf_common>
 800ba06:	3001      	adds	r0, #1
 800ba08:	d14a      	bne.n	800baa0 <_printf_i+0x1f0>
 800ba0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba0e:	b004      	add	sp, #16
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	f043 0320 	orr.w	r3, r3, #32
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	4832      	ldr	r0, [pc, #200]	@ (800bae8 <_printf_i+0x238>)
 800ba1e:	2778      	movs	r7, #120	@ 0x78
 800ba20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	6831      	ldr	r1, [r6, #0]
 800ba28:	061f      	lsls	r7, r3, #24
 800ba2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba2e:	d402      	bmi.n	800ba36 <_printf_i+0x186>
 800ba30:	065f      	lsls	r7, r3, #25
 800ba32:	bf48      	it	mi
 800ba34:	b2ad      	uxthmi	r5, r5
 800ba36:	6031      	str	r1, [r6, #0]
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	bf44      	itt	mi
 800ba3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba40:	6023      	strmi	r3, [r4, #0]
 800ba42:	b11d      	cbz	r5, 800ba4c <_printf_i+0x19c>
 800ba44:	2310      	movs	r3, #16
 800ba46:	e7ad      	b.n	800b9a4 <_printf_i+0xf4>
 800ba48:	4826      	ldr	r0, [pc, #152]	@ (800bae4 <_printf_i+0x234>)
 800ba4a:	e7e9      	b.n	800ba20 <_printf_i+0x170>
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	f023 0320 	bic.w	r3, r3, #32
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	e7f6      	b.n	800ba44 <_printf_i+0x194>
 800ba56:	4616      	mov	r6, r2
 800ba58:	e7bd      	b.n	800b9d6 <_printf_i+0x126>
 800ba5a:	6833      	ldr	r3, [r6, #0]
 800ba5c:	6825      	ldr	r5, [r4, #0]
 800ba5e:	6961      	ldr	r1, [r4, #20]
 800ba60:	1d18      	adds	r0, r3, #4
 800ba62:	6030      	str	r0, [r6, #0]
 800ba64:	062e      	lsls	r6, r5, #24
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	d501      	bpl.n	800ba6e <_printf_i+0x1be>
 800ba6a:	6019      	str	r1, [r3, #0]
 800ba6c:	e002      	b.n	800ba74 <_printf_i+0x1c4>
 800ba6e:	0668      	lsls	r0, r5, #25
 800ba70:	d5fb      	bpl.n	800ba6a <_printf_i+0x1ba>
 800ba72:	8019      	strh	r1, [r3, #0]
 800ba74:	2300      	movs	r3, #0
 800ba76:	6123      	str	r3, [r4, #16]
 800ba78:	4616      	mov	r6, r2
 800ba7a:	e7bc      	b.n	800b9f6 <_printf_i+0x146>
 800ba7c:	6833      	ldr	r3, [r6, #0]
 800ba7e:	1d1a      	adds	r2, r3, #4
 800ba80:	6032      	str	r2, [r6, #0]
 800ba82:	681e      	ldr	r6, [r3, #0]
 800ba84:	6862      	ldr	r2, [r4, #4]
 800ba86:	2100      	movs	r1, #0
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f7f4 fbc1 	bl	8000210 <memchr>
 800ba8e:	b108      	cbz	r0, 800ba94 <_printf_i+0x1e4>
 800ba90:	1b80      	subs	r0, r0, r6
 800ba92:	6060      	str	r0, [r4, #4]
 800ba94:	6863      	ldr	r3, [r4, #4]
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba9e:	e7aa      	b.n	800b9f6 <_printf_i+0x146>
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	4632      	mov	r2, r6
 800baa4:	4649      	mov	r1, r9
 800baa6:	4640      	mov	r0, r8
 800baa8:	47d0      	blx	sl
 800baaa:	3001      	adds	r0, #1
 800baac:	d0ad      	beq.n	800ba0a <_printf_i+0x15a>
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	079b      	lsls	r3, r3, #30
 800bab2:	d413      	bmi.n	800badc <_printf_i+0x22c>
 800bab4:	68e0      	ldr	r0, [r4, #12]
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	4298      	cmp	r0, r3
 800baba:	bfb8      	it	lt
 800babc:	4618      	movlt	r0, r3
 800babe:	e7a6      	b.n	800ba0e <_printf_i+0x15e>
 800bac0:	2301      	movs	r3, #1
 800bac2:	4632      	mov	r2, r6
 800bac4:	4649      	mov	r1, r9
 800bac6:	4640      	mov	r0, r8
 800bac8:	47d0      	blx	sl
 800baca:	3001      	adds	r0, #1
 800bacc:	d09d      	beq.n	800ba0a <_printf_i+0x15a>
 800bace:	3501      	adds	r5, #1
 800bad0:	68e3      	ldr	r3, [r4, #12]
 800bad2:	9903      	ldr	r1, [sp, #12]
 800bad4:	1a5b      	subs	r3, r3, r1
 800bad6:	42ab      	cmp	r3, r5
 800bad8:	dcf2      	bgt.n	800bac0 <_printf_i+0x210>
 800bada:	e7eb      	b.n	800bab4 <_printf_i+0x204>
 800badc:	2500      	movs	r5, #0
 800bade:	f104 0619 	add.w	r6, r4, #25
 800bae2:	e7f5      	b.n	800bad0 <_printf_i+0x220>
 800bae4:	0800e026 	.word	0x0800e026
 800bae8:	0800e037 	.word	0x0800e037

0800baec <sniprintf>:
 800baec:	b40c      	push	{r2, r3}
 800baee:	b530      	push	{r4, r5, lr}
 800baf0:	4b18      	ldr	r3, [pc, #96]	@ (800bb54 <sniprintf+0x68>)
 800baf2:	1e0c      	subs	r4, r1, #0
 800baf4:	681d      	ldr	r5, [r3, #0]
 800baf6:	b09d      	sub	sp, #116	@ 0x74
 800baf8:	da08      	bge.n	800bb0c <sniprintf+0x20>
 800bafa:	238b      	movs	r3, #139	@ 0x8b
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb02:	b01d      	add	sp, #116	@ 0x74
 800bb04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb08:	b002      	add	sp, #8
 800bb0a:	4770      	bx	lr
 800bb0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb14:	f04f 0300 	mov.w	r3, #0
 800bb18:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb1a:	bf14      	ite	ne
 800bb1c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bb20:	4623      	moveq	r3, r4
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	9307      	str	r3, [sp, #28]
 800bb26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb2a:	9002      	str	r0, [sp, #8]
 800bb2c:	9006      	str	r0, [sp, #24]
 800bb2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb34:	ab21      	add	r3, sp, #132	@ 0x84
 800bb36:	a902      	add	r1, sp, #8
 800bb38:	4628      	mov	r0, r5
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	f000 ffe0 	bl	800cb00 <_svfiprintf_r>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	bfbc      	itt	lt
 800bb44:	238b      	movlt	r3, #139	@ 0x8b
 800bb46:	602b      	strlt	r3, [r5, #0]
 800bb48:	2c00      	cmp	r4, #0
 800bb4a:	d0da      	beq.n	800bb02 <sniprintf+0x16>
 800bb4c:	9b02      	ldr	r3, [sp, #8]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e7d6      	b.n	800bb02 <sniprintf+0x16>
 800bb54:	20000118 	.word	0x20000118

0800bb58 <siprintf>:
 800bb58:	b40e      	push	{r1, r2, r3}
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	b09d      	sub	sp, #116	@ 0x74
 800bb5e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb60:	9002      	str	r0, [sp, #8]
 800bb62:	9006      	str	r0, [sp, #24]
 800bb64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb68:	480a      	ldr	r0, [pc, #40]	@ (800bb94 <siprintf+0x3c>)
 800bb6a:	9107      	str	r1, [sp, #28]
 800bb6c:	9104      	str	r1, [sp, #16]
 800bb6e:	490a      	ldr	r1, [pc, #40]	@ (800bb98 <siprintf+0x40>)
 800bb70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb74:	9105      	str	r1, [sp, #20]
 800bb76:	2400      	movs	r4, #0
 800bb78:	a902      	add	r1, sp, #8
 800bb7a:	6800      	ldr	r0, [r0, #0]
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb80:	f000 ffbe 	bl	800cb00 <_svfiprintf_r>
 800bb84:	9b02      	ldr	r3, [sp, #8]
 800bb86:	701c      	strb	r4, [r3, #0]
 800bb88:	b01d      	add	sp, #116	@ 0x74
 800bb8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb8e:	b003      	add	sp, #12
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	20000118 	.word	0x20000118
 800bb98:	ffff0208 	.word	0xffff0208

0800bb9c <std>:
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	4604      	mov	r4, r0
 800bba2:	e9c0 3300 	strd	r3, r3, [r0]
 800bba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbaa:	6083      	str	r3, [r0, #8]
 800bbac:	8181      	strh	r1, [r0, #12]
 800bbae:	6643      	str	r3, [r0, #100]	@ 0x64
 800bbb0:	81c2      	strh	r2, [r0, #14]
 800bbb2:	6183      	str	r3, [r0, #24]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	2208      	movs	r2, #8
 800bbb8:	305c      	adds	r0, #92	@ 0x5c
 800bbba:	f000 f8b1 	bl	800bd20 <memset>
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf4 <std+0x58>)
 800bbc0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <std+0x5c>)
 800bbc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbfc <std+0x60>)
 800bbc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bbca:	4b0d      	ldr	r3, [pc, #52]	@ (800bc00 <std+0x64>)
 800bbcc:	6323      	str	r3, [r4, #48]	@ 0x30
 800bbce:	4b0d      	ldr	r3, [pc, #52]	@ (800bc04 <std+0x68>)
 800bbd0:	6224      	str	r4, [r4, #32]
 800bbd2:	429c      	cmp	r4, r3
 800bbd4:	d006      	beq.n	800bbe4 <std+0x48>
 800bbd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bbda:	4294      	cmp	r4, r2
 800bbdc:	d002      	beq.n	800bbe4 <std+0x48>
 800bbde:	33d0      	adds	r3, #208	@ 0xd0
 800bbe0:	429c      	cmp	r4, r3
 800bbe2:	d105      	bne.n	800bbf0 <std+0x54>
 800bbe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbec:	f000 b8ca 	b.w	800bd84 <__retarget_lock_init_recursive>
 800bbf0:	bd10      	pop	{r4, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0800d6b1 	.word	0x0800d6b1
 800bbf8:	0800d6d3 	.word	0x0800d6d3
 800bbfc:	0800d70b 	.word	0x0800d70b
 800bc00:	0800d72f 	.word	0x0800d72f
 800bc04:	20002058 	.word	0x20002058

0800bc08 <stdio_exit_handler>:
 800bc08:	4a02      	ldr	r2, [pc, #8]	@ (800bc14 <stdio_exit_handler+0xc>)
 800bc0a:	4903      	ldr	r1, [pc, #12]	@ (800bc18 <stdio_exit_handler+0x10>)
 800bc0c:	4803      	ldr	r0, [pc, #12]	@ (800bc1c <stdio_exit_handler+0x14>)
 800bc0e:	f000 b869 	b.w	800bce4 <_fwalk_sglue>
 800bc12:	bf00      	nop
 800bc14:	2000010c 	.word	0x2000010c
 800bc18:	0800cf55 	.word	0x0800cf55
 800bc1c:	2000011c 	.word	0x2000011c

0800bc20 <cleanup_stdio>:
 800bc20:	6841      	ldr	r1, [r0, #4]
 800bc22:	4b0c      	ldr	r3, [pc, #48]	@ (800bc54 <cleanup_stdio+0x34>)
 800bc24:	4299      	cmp	r1, r3
 800bc26:	b510      	push	{r4, lr}
 800bc28:	4604      	mov	r4, r0
 800bc2a:	d001      	beq.n	800bc30 <cleanup_stdio+0x10>
 800bc2c:	f001 f992 	bl	800cf54 <_fflush_r>
 800bc30:	68a1      	ldr	r1, [r4, #8]
 800bc32:	4b09      	ldr	r3, [pc, #36]	@ (800bc58 <cleanup_stdio+0x38>)
 800bc34:	4299      	cmp	r1, r3
 800bc36:	d002      	beq.n	800bc3e <cleanup_stdio+0x1e>
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f001 f98b 	bl	800cf54 <_fflush_r>
 800bc3e:	68e1      	ldr	r1, [r4, #12]
 800bc40:	4b06      	ldr	r3, [pc, #24]	@ (800bc5c <cleanup_stdio+0x3c>)
 800bc42:	4299      	cmp	r1, r3
 800bc44:	d004      	beq.n	800bc50 <cleanup_stdio+0x30>
 800bc46:	4620      	mov	r0, r4
 800bc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc4c:	f001 b982 	b.w	800cf54 <_fflush_r>
 800bc50:	bd10      	pop	{r4, pc}
 800bc52:	bf00      	nop
 800bc54:	20002058 	.word	0x20002058
 800bc58:	200020c0 	.word	0x200020c0
 800bc5c:	20002128 	.word	0x20002128

0800bc60 <global_stdio_init.part.0>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4b0b      	ldr	r3, [pc, #44]	@ (800bc90 <global_stdio_init.part.0+0x30>)
 800bc64:	4c0b      	ldr	r4, [pc, #44]	@ (800bc94 <global_stdio_init.part.0+0x34>)
 800bc66:	4a0c      	ldr	r2, [pc, #48]	@ (800bc98 <global_stdio_init.part.0+0x38>)
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2104      	movs	r1, #4
 800bc70:	f7ff ff94 	bl	800bb9c <std>
 800bc74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc78:	2201      	movs	r2, #1
 800bc7a:	2109      	movs	r1, #9
 800bc7c:	f7ff ff8e 	bl	800bb9c <std>
 800bc80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc84:	2202      	movs	r2, #2
 800bc86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc8a:	2112      	movs	r1, #18
 800bc8c:	f7ff bf86 	b.w	800bb9c <std>
 800bc90:	20002190 	.word	0x20002190
 800bc94:	20002058 	.word	0x20002058
 800bc98:	0800bc09 	.word	0x0800bc09

0800bc9c <__sfp_lock_acquire>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	@ (800bca4 <__sfp_lock_acquire+0x8>)
 800bc9e:	f000 b872 	b.w	800bd86 <__retarget_lock_acquire_recursive>
 800bca2:	bf00      	nop
 800bca4:	20002195 	.word	0x20002195

0800bca8 <__sfp_lock_release>:
 800bca8:	4801      	ldr	r0, [pc, #4]	@ (800bcb0 <__sfp_lock_release+0x8>)
 800bcaa:	f000 b86d 	b.w	800bd88 <__retarget_lock_release_recursive>
 800bcae:	bf00      	nop
 800bcb0:	20002195 	.word	0x20002195

0800bcb4 <__sinit>:
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	f7ff fff0 	bl	800bc9c <__sfp_lock_acquire>
 800bcbc:	6a23      	ldr	r3, [r4, #32]
 800bcbe:	b11b      	cbz	r3, 800bcc8 <__sinit+0x14>
 800bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc4:	f7ff bff0 	b.w	800bca8 <__sfp_lock_release>
 800bcc8:	4b04      	ldr	r3, [pc, #16]	@ (800bcdc <__sinit+0x28>)
 800bcca:	6223      	str	r3, [r4, #32]
 800bccc:	4b04      	ldr	r3, [pc, #16]	@ (800bce0 <__sinit+0x2c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1f5      	bne.n	800bcc0 <__sinit+0xc>
 800bcd4:	f7ff ffc4 	bl	800bc60 <global_stdio_init.part.0>
 800bcd8:	e7f2      	b.n	800bcc0 <__sinit+0xc>
 800bcda:	bf00      	nop
 800bcdc:	0800bc21 	.word	0x0800bc21
 800bce0:	20002190 	.word	0x20002190

0800bce4 <_fwalk_sglue>:
 800bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce8:	4607      	mov	r7, r0
 800bcea:	4688      	mov	r8, r1
 800bcec:	4614      	mov	r4, r2
 800bcee:	2600      	movs	r6, #0
 800bcf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcf4:	f1b9 0901 	subs.w	r9, r9, #1
 800bcf8:	d505      	bpl.n	800bd06 <_fwalk_sglue+0x22>
 800bcfa:	6824      	ldr	r4, [r4, #0]
 800bcfc:	2c00      	cmp	r4, #0
 800bcfe:	d1f7      	bne.n	800bcf0 <_fwalk_sglue+0xc>
 800bd00:	4630      	mov	r0, r6
 800bd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d907      	bls.n	800bd1c <_fwalk_sglue+0x38>
 800bd0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd10:	3301      	adds	r3, #1
 800bd12:	d003      	beq.n	800bd1c <_fwalk_sglue+0x38>
 800bd14:	4629      	mov	r1, r5
 800bd16:	4638      	mov	r0, r7
 800bd18:	47c0      	blx	r8
 800bd1a:	4306      	orrs	r6, r0
 800bd1c:	3568      	adds	r5, #104	@ 0x68
 800bd1e:	e7e9      	b.n	800bcf4 <_fwalk_sglue+0x10>

0800bd20 <memset>:
 800bd20:	4402      	add	r2, r0
 800bd22:	4603      	mov	r3, r0
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d100      	bne.n	800bd2a <memset+0xa>
 800bd28:	4770      	bx	lr
 800bd2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd2e:	e7f9      	b.n	800bd24 <memset+0x4>

0800bd30 <__errno>:
 800bd30:	4b01      	ldr	r3, [pc, #4]	@ (800bd38 <__errno+0x8>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	20000118 	.word	0x20000118

0800bd3c <__libc_init_array>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	4d0d      	ldr	r5, [pc, #52]	@ (800bd74 <__libc_init_array+0x38>)
 800bd40:	4c0d      	ldr	r4, [pc, #52]	@ (800bd78 <__libc_init_array+0x3c>)
 800bd42:	1b64      	subs	r4, r4, r5
 800bd44:	10a4      	asrs	r4, r4, #2
 800bd46:	2600      	movs	r6, #0
 800bd48:	42a6      	cmp	r6, r4
 800bd4a:	d109      	bne.n	800bd60 <__libc_init_array+0x24>
 800bd4c:	4d0b      	ldr	r5, [pc, #44]	@ (800bd7c <__libc_init_array+0x40>)
 800bd4e:	4c0c      	ldr	r4, [pc, #48]	@ (800bd80 <__libc_init_array+0x44>)
 800bd50:	f002 f8f8 	bl	800df44 <_init>
 800bd54:	1b64      	subs	r4, r4, r5
 800bd56:	10a4      	asrs	r4, r4, #2
 800bd58:	2600      	movs	r6, #0
 800bd5a:	42a6      	cmp	r6, r4
 800bd5c:	d105      	bne.n	800bd6a <__libc_init_array+0x2e>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd64:	4798      	blx	r3
 800bd66:	3601      	adds	r6, #1
 800bd68:	e7ee      	b.n	800bd48 <__libc_init_array+0xc>
 800bd6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd6e:	4798      	blx	r3
 800bd70:	3601      	adds	r6, #1
 800bd72:	e7f2      	b.n	800bd5a <__libc_init_array+0x1e>
 800bd74:	0800e394 	.word	0x0800e394
 800bd78:	0800e394 	.word	0x0800e394
 800bd7c:	0800e394 	.word	0x0800e394
 800bd80:	0800e398 	.word	0x0800e398

0800bd84 <__retarget_lock_init_recursive>:
 800bd84:	4770      	bx	lr

0800bd86 <__retarget_lock_acquire_recursive>:
 800bd86:	4770      	bx	lr

0800bd88 <__retarget_lock_release_recursive>:
 800bd88:	4770      	bx	lr
	...

0800bd8c <_localeconv_r>:
 800bd8c:	4800      	ldr	r0, [pc, #0]	@ (800bd90 <_localeconv_r+0x4>)
 800bd8e:	4770      	bx	lr
 800bd90:	20000258 	.word	0x20000258

0800bd94 <quorem>:
 800bd94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	6903      	ldr	r3, [r0, #16]
 800bd9a:	690c      	ldr	r4, [r1, #16]
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	4607      	mov	r7, r0
 800bda0:	db7e      	blt.n	800bea0 <quorem+0x10c>
 800bda2:	3c01      	subs	r4, #1
 800bda4:	f101 0814 	add.w	r8, r1, #20
 800bda8:	00a3      	lsls	r3, r4, #2
 800bdaa:	f100 0514 	add.w	r5, r0, #20
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdc6:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdca:	d32e      	bcc.n	800be2a <quorem+0x96>
 800bdcc:	f04f 0a00 	mov.w	sl, #0
 800bdd0:	46c4      	mov	ip, r8
 800bdd2:	46ae      	mov	lr, r5
 800bdd4:	46d3      	mov	fp, sl
 800bdd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdda:	b298      	uxth	r0, r3
 800bddc:	fb06 a000 	mla	r0, r6, r0, sl
 800bde0:	0c02      	lsrs	r2, r0, #16
 800bde2:	0c1b      	lsrs	r3, r3, #16
 800bde4:	fb06 2303 	mla	r3, r6, r3, r2
 800bde8:	f8de 2000 	ldr.w	r2, [lr]
 800bdec:	b280      	uxth	r0, r0
 800bdee:	b292      	uxth	r2, r2
 800bdf0:	1a12      	subs	r2, r2, r0
 800bdf2:	445a      	add	r2, fp
 800bdf4:	f8de 0000 	ldr.w	r0, [lr]
 800bdf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be06:	b292      	uxth	r2, r2
 800be08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be0c:	45e1      	cmp	r9, ip
 800be0e:	f84e 2b04 	str.w	r2, [lr], #4
 800be12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be16:	d2de      	bcs.n	800bdd6 <quorem+0x42>
 800be18:	9b00      	ldr	r3, [sp, #0]
 800be1a:	58eb      	ldr	r3, [r5, r3]
 800be1c:	b92b      	cbnz	r3, 800be2a <quorem+0x96>
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	3b04      	subs	r3, #4
 800be22:	429d      	cmp	r5, r3
 800be24:	461a      	mov	r2, r3
 800be26:	d32f      	bcc.n	800be88 <quorem+0xf4>
 800be28:	613c      	str	r4, [r7, #16]
 800be2a:	4638      	mov	r0, r7
 800be2c:	f001 fb38 	bl	800d4a0 <__mcmp>
 800be30:	2800      	cmp	r0, #0
 800be32:	db25      	blt.n	800be80 <quorem+0xec>
 800be34:	4629      	mov	r1, r5
 800be36:	2000      	movs	r0, #0
 800be38:	f858 2b04 	ldr.w	r2, [r8], #4
 800be3c:	f8d1 c000 	ldr.w	ip, [r1]
 800be40:	fa1f fe82 	uxth.w	lr, r2
 800be44:	fa1f f38c 	uxth.w	r3, ip
 800be48:	eba3 030e 	sub.w	r3, r3, lr
 800be4c:	4403      	add	r3, r0
 800be4e:	0c12      	lsrs	r2, r2, #16
 800be50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be58:	b29b      	uxth	r3, r3
 800be5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be5e:	45c1      	cmp	r9, r8
 800be60:	f841 3b04 	str.w	r3, [r1], #4
 800be64:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be68:	d2e6      	bcs.n	800be38 <quorem+0xa4>
 800be6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be72:	b922      	cbnz	r2, 800be7e <quorem+0xea>
 800be74:	3b04      	subs	r3, #4
 800be76:	429d      	cmp	r5, r3
 800be78:	461a      	mov	r2, r3
 800be7a:	d30b      	bcc.n	800be94 <quorem+0x100>
 800be7c:	613c      	str	r4, [r7, #16]
 800be7e:	3601      	adds	r6, #1
 800be80:	4630      	mov	r0, r6
 800be82:	b003      	add	sp, #12
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	3b04      	subs	r3, #4
 800be8c:	2a00      	cmp	r2, #0
 800be8e:	d1cb      	bne.n	800be28 <quorem+0x94>
 800be90:	3c01      	subs	r4, #1
 800be92:	e7c6      	b.n	800be22 <quorem+0x8e>
 800be94:	6812      	ldr	r2, [r2, #0]
 800be96:	3b04      	subs	r3, #4
 800be98:	2a00      	cmp	r2, #0
 800be9a:	d1ef      	bne.n	800be7c <quorem+0xe8>
 800be9c:	3c01      	subs	r4, #1
 800be9e:	e7ea      	b.n	800be76 <quorem+0xe2>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7ee      	b.n	800be82 <quorem+0xee>
 800bea4:	0000      	movs	r0, r0
	...

0800bea8 <_dtoa_r>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	69c7      	ldr	r7, [r0, #28]
 800beae:	b097      	sub	sp, #92	@ 0x5c
 800beb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800beb4:	ec55 4b10 	vmov	r4, r5, d0
 800beb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800beba:	9107      	str	r1, [sp, #28]
 800bebc:	4681      	mov	r9, r0
 800bebe:	920c      	str	r2, [sp, #48]	@ 0x30
 800bec0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bec2:	b97f      	cbnz	r7, 800bee4 <_dtoa_r+0x3c>
 800bec4:	2010      	movs	r0, #16
 800bec6:	f000 ff17 	bl	800ccf8 <malloc>
 800beca:	4602      	mov	r2, r0
 800becc:	f8c9 001c 	str.w	r0, [r9, #28]
 800bed0:	b920      	cbnz	r0, 800bedc <_dtoa_r+0x34>
 800bed2:	4ba9      	ldr	r3, [pc, #676]	@ (800c178 <_dtoa_r+0x2d0>)
 800bed4:	21ef      	movs	r1, #239	@ 0xef
 800bed6:	48a9      	ldr	r0, [pc, #676]	@ (800c17c <_dtoa_r+0x2d4>)
 800bed8:	f001 fcda 	bl	800d890 <__assert_func>
 800bedc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bee0:	6007      	str	r7, [r0, #0]
 800bee2:	60c7      	str	r7, [r0, #12]
 800bee4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bee8:	6819      	ldr	r1, [r3, #0]
 800beea:	b159      	cbz	r1, 800bf04 <_dtoa_r+0x5c>
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	604a      	str	r2, [r1, #4]
 800bef0:	2301      	movs	r3, #1
 800bef2:	4093      	lsls	r3, r2
 800bef4:	608b      	str	r3, [r1, #8]
 800bef6:	4648      	mov	r0, r9
 800bef8:	f001 f8a0 	bl	800d03c <_Bfree>
 800befc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	1e2b      	subs	r3, r5, #0
 800bf06:	bfb9      	ittee	lt
 800bf08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf0c:	9305      	strlt	r3, [sp, #20]
 800bf0e:	2300      	movge	r3, #0
 800bf10:	6033      	strge	r3, [r6, #0]
 800bf12:	9f05      	ldr	r7, [sp, #20]
 800bf14:	4b9a      	ldr	r3, [pc, #616]	@ (800c180 <_dtoa_r+0x2d8>)
 800bf16:	bfbc      	itt	lt
 800bf18:	2201      	movlt	r2, #1
 800bf1a:	6032      	strlt	r2, [r6, #0]
 800bf1c:	43bb      	bics	r3, r7
 800bf1e:	d112      	bne.n	800bf46 <_dtoa_r+0x9e>
 800bf20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf22:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf26:	6013      	str	r3, [r2, #0]
 800bf28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf2c:	4323      	orrs	r3, r4
 800bf2e:	f000 855a 	beq.w	800c9e6 <_dtoa_r+0xb3e>
 800bf32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c194 <_dtoa_r+0x2ec>
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 855c 	beq.w	800c9f6 <_dtoa_r+0xb4e>
 800bf3e:	f10a 0303 	add.w	r3, sl, #3
 800bf42:	f000 bd56 	b.w	800c9f2 <_dtoa_r+0xb4a>
 800bf46:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	ec51 0b17 	vmov	r0, r1, d7
 800bf50:	2300      	movs	r3, #0
 800bf52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf56:	f7f4 fdd7 	bl	8000b08 <__aeabi_dcmpeq>
 800bf5a:	4680      	mov	r8, r0
 800bf5c:	b158      	cbz	r0, 800bf76 <_dtoa_r+0xce>
 800bf5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf60:	2301      	movs	r3, #1
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf66:	b113      	cbz	r3, 800bf6e <_dtoa_r+0xc6>
 800bf68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf6a:	4b86      	ldr	r3, [pc, #536]	@ (800c184 <_dtoa_r+0x2dc>)
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c198 <_dtoa_r+0x2f0>
 800bf72:	f000 bd40 	b.w	800c9f6 <_dtoa_r+0xb4e>
 800bf76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf7a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf7c:	a915      	add	r1, sp, #84	@ 0x54
 800bf7e:	4648      	mov	r0, r9
 800bf80:	f001 fb3e 	bl	800d600 <__d2b>
 800bf84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf88:	9002      	str	r0, [sp, #8]
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	d078      	beq.n	800c080 <_dtoa_r+0x1d8>
 800bf8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bf94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bfa0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bfa4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	2200      	movs	r2, #0
 800bfac:	4b76      	ldr	r3, [pc, #472]	@ (800c188 <_dtoa_r+0x2e0>)
 800bfae:	f7f4 f98b 	bl	80002c8 <__aeabi_dsub>
 800bfb2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c160 <_dtoa_r+0x2b8>)
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f7f4 fb3e 	bl	8000638 <__aeabi_dmul>
 800bfbc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c168 <_dtoa_r+0x2c0>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f7f4 f983 	bl	80002cc <__adddf3>
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	4630      	mov	r0, r6
 800bfca:	460d      	mov	r5, r1
 800bfcc:	f7f4 faca 	bl	8000564 <__aeabi_i2d>
 800bfd0:	a367      	add	r3, pc, #412	@ (adr r3, 800c170 <_dtoa_r+0x2c8>)
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f7f4 fb2f 	bl	8000638 <__aeabi_dmul>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f7f4 f973 	bl	80002cc <__adddf3>
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	460d      	mov	r5, r1
 800bfea:	f7f4 fdd5 	bl	8000b98 <__aeabi_d2iz>
 800bfee:	2200      	movs	r2, #0
 800bff0:	4607      	mov	r7, r0
 800bff2:	2300      	movs	r3, #0
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	f7f4 fd90 	bl	8000b1c <__aeabi_dcmplt>
 800bffc:	b140      	cbz	r0, 800c010 <_dtoa_r+0x168>
 800bffe:	4638      	mov	r0, r7
 800c000:	f7f4 fab0 	bl	8000564 <__aeabi_i2d>
 800c004:	4622      	mov	r2, r4
 800c006:	462b      	mov	r3, r5
 800c008:	f7f4 fd7e 	bl	8000b08 <__aeabi_dcmpeq>
 800c00c:	b900      	cbnz	r0, 800c010 <_dtoa_r+0x168>
 800c00e:	3f01      	subs	r7, #1
 800c010:	2f16      	cmp	r7, #22
 800c012:	d852      	bhi.n	800c0ba <_dtoa_r+0x212>
 800c014:	4b5d      	ldr	r3, [pc, #372]	@ (800c18c <_dtoa_r+0x2e4>)
 800c016:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c022:	f7f4 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 800c026:	2800      	cmp	r0, #0
 800c028:	d049      	beq.n	800c0be <_dtoa_r+0x216>
 800c02a:	3f01      	subs	r7, #1
 800c02c:	2300      	movs	r3, #0
 800c02e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c030:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c032:	1b9b      	subs	r3, r3, r6
 800c034:	1e5a      	subs	r2, r3, #1
 800c036:	bf45      	ittet	mi
 800c038:	f1c3 0301 	rsbmi	r3, r3, #1
 800c03c:	9300      	strmi	r3, [sp, #0]
 800c03e:	2300      	movpl	r3, #0
 800c040:	2300      	movmi	r3, #0
 800c042:	9206      	str	r2, [sp, #24]
 800c044:	bf54      	ite	pl
 800c046:	9300      	strpl	r3, [sp, #0]
 800c048:	9306      	strmi	r3, [sp, #24]
 800c04a:	2f00      	cmp	r7, #0
 800c04c:	db39      	blt.n	800c0c2 <_dtoa_r+0x21a>
 800c04e:	9b06      	ldr	r3, [sp, #24]
 800c050:	970d      	str	r7, [sp, #52]	@ 0x34
 800c052:	443b      	add	r3, r7
 800c054:	9306      	str	r3, [sp, #24]
 800c056:	2300      	movs	r3, #0
 800c058:	9308      	str	r3, [sp, #32]
 800c05a:	9b07      	ldr	r3, [sp, #28]
 800c05c:	2b09      	cmp	r3, #9
 800c05e:	d863      	bhi.n	800c128 <_dtoa_r+0x280>
 800c060:	2b05      	cmp	r3, #5
 800c062:	bfc4      	itt	gt
 800c064:	3b04      	subgt	r3, #4
 800c066:	9307      	strgt	r3, [sp, #28]
 800c068:	9b07      	ldr	r3, [sp, #28]
 800c06a:	f1a3 0302 	sub.w	r3, r3, #2
 800c06e:	bfcc      	ite	gt
 800c070:	2400      	movgt	r4, #0
 800c072:	2401      	movle	r4, #1
 800c074:	2b03      	cmp	r3, #3
 800c076:	d863      	bhi.n	800c140 <_dtoa_r+0x298>
 800c078:	e8df f003 	tbb	[pc, r3]
 800c07c:	2b375452 	.word	0x2b375452
 800c080:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c084:	441e      	add	r6, r3
 800c086:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c08a:	2b20      	cmp	r3, #32
 800c08c:	bfc1      	itttt	gt
 800c08e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c092:	409f      	lslgt	r7, r3
 800c094:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c098:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c09c:	bfd6      	itet	le
 800c09e:	f1c3 0320 	rsble	r3, r3, #32
 800c0a2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c0a6:	fa04 f003 	lslle.w	r0, r4, r3
 800c0aa:	f7f4 fa4b 	bl	8000544 <__aeabi_ui2d>
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0b4:	3e01      	subs	r6, #1
 800c0b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0b8:	e776      	b.n	800bfa8 <_dtoa_r+0x100>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e7b7      	b.n	800c02e <_dtoa_r+0x186>
 800c0be:	9010      	str	r0, [sp, #64]	@ 0x40
 800c0c0:	e7b6      	b.n	800c030 <_dtoa_r+0x188>
 800c0c2:	9b00      	ldr	r3, [sp, #0]
 800c0c4:	1bdb      	subs	r3, r3, r7
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	427b      	negs	r3, r7
 800c0ca:	9308      	str	r3, [sp, #32]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0d0:	e7c3      	b.n	800c05a <_dtoa_r+0x1b2>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0d8:	eb07 0b03 	add.w	fp, r7, r3
 800c0dc:	f10b 0301 	add.w	r3, fp, #1
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	bfb8      	it	lt
 800c0e6:	2301      	movlt	r3, #1
 800c0e8:	e006      	b.n	800c0f8 <_dtoa_r+0x250>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dd28      	ble.n	800c146 <_dtoa_r+0x29e>
 800c0f4:	469b      	mov	fp, r3
 800c0f6:	9303      	str	r3, [sp, #12]
 800c0f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	2204      	movs	r2, #4
 800c100:	f102 0514 	add.w	r5, r2, #20
 800c104:	429d      	cmp	r5, r3
 800c106:	d926      	bls.n	800c156 <_dtoa_r+0x2ae>
 800c108:	6041      	str	r1, [r0, #4]
 800c10a:	4648      	mov	r0, r9
 800c10c:	f000 ff56 	bl	800cfbc <_Balloc>
 800c110:	4682      	mov	sl, r0
 800c112:	2800      	cmp	r0, #0
 800c114:	d142      	bne.n	800c19c <_dtoa_r+0x2f4>
 800c116:	4b1e      	ldr	r3, [pc, #120]	@ (800c190 <_dtoa_r+0x2e8>)
 800c118:	4602      	mov	r2, r0
 800c11a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c11e:	e6da      	b.n	800bed6 <_dtoa_r+0x2e>
 800c120:	2300      	movs	r3, #0
 800c122:	e7e3      	b.n	800c0ec <_dtoa_r+0x244>
 800c124:	2300      	movs	r3, #0
 800c126:	e7d5      	b.n	800c0d4 <_dtoa_r+0x22c>
 800c128:	2401      	movs	r4, #1
 800c12a:	2300      	movs	r3, #0
 800c12c:	9307      	str	r3, [sp, #28]
 800c12e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c130:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c134:	2200      	movs	r2, #0
 800c136:	f8cd b00c 	str.w	fp, [sp, #12]
 800c13a:	2312      	movs	r3, #18
 800c13c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c13e:	e7db      	b.n	800c0f8 <_dtoa_r+0x250>
 800c140:	2301      	movs	r3, #1
 800c142:	9309      	str	r3, [sp, #36]	@ 0x24
 800c144:	e7f4      	b.n	800c130 <_dtoa_r+0x288>
 800c146:	f04f 0b01 	mov.w	fp, #1
 800c14a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c14e:	465b      	mov	r3, fp
 800c150:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c154:	e7d0      	b.n	800c0f8 <_dtoa_r+0x250>
 800c156:	3101      	adds	r1, #1
 800c158:	0052      	lsls	r2, r2, #1
 800c15a:	e7d1      	b.n	800c100 <_dtoa_r+0x258>
 800c15c:	f3af 8000 	nop.w
 800c160:	636f4361 	.word	0x636f4361
 800c164:	3fd287a7 	.word	0x3fd287a7
 800c168:	8b60c8b3 	.word	0x8b60c8b3
 800c16c:	3fc68a28 	.word	0x3fc68a28
 800c170:	509f79fb 	.word	0x509f79fb
 800c174:	3fd34413 	.word	0x3fd34413
 800c178:	0800e055 	.word	0x0800e055
 800c17c:	0800e06c 	.word	0x0800e06c
 800c180:	7ff00000 	.word	0x7ff00000
 800c184:	0800e025 	.word	0x0800e025
 800c188:	3ff80000 	.word	0x3ff80000
 800c18c:	0800e1c0 	.word	0x0800e1c0
 800c190:	0800e0c4 	.word	0x0800e0c4
 800c194:	0800e051 	.word	0x0800e051
 800c198:	0800e024 	.word	0x0800e024
 800c19c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1a0:	6018      	str	r0, [r3, #0]
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	2b0e      	cmp	r3, #14
 800c1a6:	f200 80a1 	bhi.w	800c2ec <_dtoa_r+0x444>
 800c1aa:	2c00      	cmp	r4, #0
 800c1ac:	f000 809e 	beq.w	800c2ec <_dtoa_r+0x444>
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	dd33      	ble.n	800c21c <_dtoa_r+0x374>
 800c1b4:	4b9c      	ldr	r3, [pc, #624]	@ (800c428 <_dtoa_r+0x580>)
 800c1b6:	f007 020f 	and.w	r2, r7, #15
 800c1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1be:	ed93 7b00 	vldr	d7, [r3]
 800c1c2:	05f8      	lsls	r0, r7, #23
 800c1c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c1c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1cc:	d516      	bpl.n	800c1fc <_dtoa_r+0x354>
 800c1ce:	4b97      	ldr	r3, [pc, #604]	@ (800c42c <_dtoa_r+0x584>)
 800c1d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1d8:	f7f4 fb58 	bl	800088c <__aeabi_ddiv>
 800c1dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1e0:	f004 040f 	and.w	r4, r4, #15
 800c1e4:	2603      	movs	r6, #3
 800c1e6:	4d91      	ldr	r5, [pc, #580]	@ (800c42c <_dtoa_r+0x584>)
 800c1e8:	b954      	cbnz	r4, 800c200 <_dtoa_r+0x358>
 800c1ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1f2:	f7f4 fb4b 	bl	800088c <__aeabi_ddiv>
 800c1f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1fa:	e028      	b.n	800c24e <_dtoa_r+0x3a6>
 800c1fc:	2602      	movs	r6, #2
 800c1fe:	e7f2      	b.n	800c1e6 <_dtoa_r+0x33e>
 800c200:	07e1      	lsls	r1, r4, #31
 800c202:	d508      	bpl.n	800c216 <_dtoa_r+0x36e>
 800c204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c208:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c20c:	f7f4 fa14 	bl	8000638 <__aeabi_dmul>
 800c210:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c214:	3601      	adds	r6, #1
 800c216:	1064      	asrs	r4, r4, #1
 800c218:	3508      	adds	r5, #8
 800c21a:	e7e5      	b.n	800c1e8 <_dtoa_r+0x340>
 800c21c:	f000 80af 	beq.w	800c37e <_dtoa_r+0x4d6>
 800c220:	427c      	negs	r4, r7
 800c222:	4b81      	ldr	r3, [pc, #516]	@ (800c428 <_dtoa_r+0x580>)
 800c224:	4d81      	ldr	r5, [pc, #516]	@ (800c42c <_dtoa_r+0x584>)
 800c226:	f004 020f 	and.w	r2, r4, #15
 800c22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c236:	f7f4 f9ff 	bl	8000638 <__aeabi_dmul>
 800c23a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c23e:	1124      	asrs	r4, r4, #4
 800c240:	2300      	movs	r3, #0
 800c242:	2602      	movs	r6, #2
 800c244:	2c00      	cmp	r4, #0
 800c246:	f040 808f 	bne.w	800c368 <_dtoa_r+0x4c0>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1d3      	bne.n	800c1f6 <_dtoa_r+0x34e>
 800c24e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c250:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 8094 	beq.w	800c382 <_dtoa_r+0x4da>
 800c25a:	4b75      	ldr	r3, [pc, #468]	@ (800c430 <_dtoa_r+0x588>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	f000 808b 	beq.w	800c382 <_dtoa_r+0x4da>
 800c26c:	9b03      	ldr	r3, [sp, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 8087 	beq.w	800c382 <_dtoa_r+0x4da>
 800c274:	f1bb 0f00 	cmp.w	fp, #0
 800c278:	dd34      	ble.n	800c2e4 <_dtoa_r+0x43c>
 800c27a:	4620      	mov	r0, r4
 800c27c:	4b6d      	ldr	r3, [pc, #436]	@ (800c434 <_dtoa_r+0x58c>)
 800c27e:	2200      	movs	r2, #0
 800c280:	4629      	mov	r1, r5
 800c282:	f7f4 f9d9 	bl	8000638 <__aeabi_dmul>
 800c286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c28a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c28e:	3601      	adds	r6, #1
 800c290:	465c      	mov	r4, fp
 800c292:	4630      	mov	r0, r6
 800c294:	f7f4 f966 	bl	8000564 <__aeabi_i2d>
 800c298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c29c:	f7f4 f9cc 	bl	8000638 <__aeabi_dmul>
 800c2a0:	4b65      	ldr	r3, [pc, #404]	@ (800c438 <_dtoa_r+0x590>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f7f4 f812 	bl	80002cc <__adddf3>
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	d16a      	bne.n	800c388 <_dtoa_r+0x4e0>
 800c2b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2b6:	4b61      	ldr	r3, [pc, #388]	@ (800c43c <_dtoa_r+0x594>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f805 	bl	80002c8 <__aeabi_dsub>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2c6:	462a      	mov	r2, r5
 800c2c8:	4633      	mov	r3, r6
 800c2ca:	f7f4 fc45 	bl	8000b58 <__aeabi_dcmpgt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f040 8298 	bne.w	800c804 <_dtoa_r+0x95c>
 800c2d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d8:	462a      	mov	r2, r5
 800c2da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2de:	f7f4 fc1d 	bl	8000b1c <__aeabi_dcmplt>
 800c2e2:	bb38      	cbnz	r0, 800c334 <_dtoa_r+0x48c>
 800c2e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c2e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f2c0 8157 	blt.w	800c5a2 <_dtoa_r+0x6fa>
 800c2f4:	2f0e      	cmp	r7, #14
 800c2f6:	f300 8154 	bgt.w	800c5a2 <_dtoa_r+0x6fa>
 800c2fa:	4b4b      	ldr	r3, [pc, #300]	@ (800c428 <_dtoa_r+0x580>)
 800c2fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c300:	ed93 7b00 	vldr	d7, [r3]
 800c304:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c306:	2b00      	cmp	r3, #0
 800c308:	ed8d 7b00 	vstr	d7, [sp]
 800c30c:	f280 80e5 	bge.w	800c4da <_dtoa_r+0x632>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f300 80e1 	bgt.w	800c4da <_dtoa_r+0x632>
 800c318:	d10c      	bne.n	800c334 <_dtoa_r+0x48c>
 800c31a:	4b48      	ldr	r3, [pc, #288]	@ (800c43c <_dtoa_r+0x594>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	ec51 0b17 	vmov	r0, r1, d7
 800c322:	f7f4 f989 	bl	8000638 <__aeabi_dmul>
 800c326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c32a:	f7f4 fc0b 	bl	8000b44 <__aeabi_dcmpge>
 800c32e:	2800      	cmp	r0, #0
 800c330:	f000 8266 	beq.w	800c800 <_dtoa_r+0x958>
 800c334:	2400      	movs	r4, #0
 800c336:	4625      	mov	r5, r4
 800c338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c33a:	4656      	mov	r6, sl
 800c33c:	ea6f 0803 	mvn.w	r8, r3
 800c340:	2700      	movs	r7, #0
 800c342:	4621      	mov	r1, r4
 800c344:	4648      	mov	r0, r9
 800c346:	f000 fe79 	bl	800d03c <_Bfree>
 800c34a:	2d00      	cmp	r5, #0
 800c34c:	f000 80bd 	beq.w	800c4ca <_dtoa_r+0x622>
 800c350:	b12f      	cbz	r7, 800c35e <_dtoa_r+0x4b6>
 800c352:	42af      	cmp	r7, r5
 800c354:	d003      	beq.n	800c35e <_dtoa_r+0x4b6>
 800c356:	4639      	mov	r1, r7
 800c358:	4648      	mov	r0, r9
 800c35a:	f000 fe6f 	bl	800d03c <_Bfree>
 800c35e:	4629      	mov	r1, r5
 800c360:	4648      	mov	r0, r9
 800c362:	f000 fe6b 	bl	800d03c <_Bfree>
 800c366:	e0b0      	b.n	800c4ca <_dtoa_r+0x622>
 800c368:	07e2      	lsls	r2, r4, #31
 800c36a:	d505      	bpl.n	800c378 <_dtoa_r+0x4d0>
 800c36c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c370:	f7f4 f962 	bl	8000638 <__aeabi_dmul>
 800c374:	3601      	adds	r6, #1
 800c376:	2301      	movs	r3, #1
 800c378:	1064      	asrs	r4, r4, #1
 800c37a:	3508      	adds	r5, #8
 800c37c:	e762      	b.n	800c244 <_dtoa_r+0x39c>
 800c37e:	2602      	movs	r6, #2
 800c380:	e765      	b.n	800c24e <_dtoa_r+0x3a6>
 800c382:	9c03      	ldr	r4, [sp, #12]
 800c384:	46b8      	mov	r8, r7
 800c386:	e784      	b.n	800c292 <_dtoa_r+0x3ea>
 800c388:	4b27      	ldr	r3, [pc, #156]	@ (800c428 <_dtoa_r+0x580>)
 800c38a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c38c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c394:	4454      	add	r4, sl
 800c396:	2900      	cmp	r1, #0
 800c398:	d054      	beq.n	800c444 <_dtoa_r+0x59c>
 800c39a:	4929      	ldr	r1, [pc, #164]	@ (800c440 <_dtoa_r+0x598>)
 800c39c:	2000      	movs	r0, #0
 800c39e:	f7f4 fa75 	bl	800088c <__aeabi_ddiv>
 800c3a2:	4633      	mov	r3, r6
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	f7f3 ff8f 	bl	80002c8 <__aeabi_dsub>
 800c3aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3ae:	4656      	mov	r6, sl
 800c3b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3b4:	f7f4 fbf0 	bl	8000b98 <__aeabi_d2iz>
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	f7f4 f8d3 	bl	8000564 <__aeabi_i2d>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c6:	f7f3 ff7f 	bl	80002c8 <__aeabi_dsub>
 800c3ca:	3530      	adds	r5, #48	@ 0x30
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3d4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3dc:	f7f4 fb9e 	bl	8000b1c <__aeabi_dcmplt>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d172      	bne.n	800c4ca <_dtoa_r+0x622>
 800c3e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3e8:	4911      	ldr	r1, [pc, #68]	@ (800c430 <_dtoa_r+0x588>)
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	f7f3 ff6c 	bl	80002c8 <__aeabi_dsub>
 800c3f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3f4:	f7f4 fb92 	bl	8000b1c <__aeabi_dcmplt>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	f040 80b4 	bne.w	800c566 <_dtoa_r+0x6be>
 800c3fe:	42a6      	cmp	r6, r4
 800c400:	f43f af70 	beq.w	800c2e4 <_dtoa_r+0x43c>
 800c404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c408:	4b0a      	ldr	r3, [pc, #40]	@ (800c434 <_dtoa_r+0x58c>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	f7f4 f914 	bl	8000638 <__aeabi_dmul>
 800c410:	4b08      	ldr	r3, [pc, #32]	@ (800c434 <_dtoa_r+0x58c>)
 800c412:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c416:	2200      	movs	r2, #0
 800c418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c41c:	f7f4 f90c 	bl	8000638 <__aeabi_dmul>
 800c420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c424:	e7c4      	b.n	800c3b0 <_dtoa_r+0x508>
 800c426:	bf00      	nop
 800c428:	0800e1c0 	.word	0x0800e1c0
 800c42c:	0800e198 	.word	0x0800e198
 800c430:	3ff00000 	.word	0x3ff00000
 800c434:	40240000 	.word	0x40240000
 800c438:	401c0000 	.word	0x401c0000
 800c43c:	40140000 	.word	0x40140000
 800c440:	3fe00000 	.word	0x3fe00000
 800c444:	4631      	mov	r1, r6
 800c446:	4628      	mov	r0, r5
 800c448:	f7f4 f8f6 	bl	8000638 <__aeabi_dmul>
 800c44c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c450:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c452:	4656      	mov	r6, sl
 800c454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c458:	f7f4 fb9e 	bl	8000b98 <__aeabi_d2iz>
 800c45c:	4605      	mov	r5, r0
 800c45e:	f7f4 f881 	bl	8000564 <__aeabi_i2d>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c46a:	f7f3 ff2d 	bl	80002c8 <__aeabi_dsub>
 800c46e:	3530      	adds	r5, #48	@ 0x30
 800c470:	f806 5b01 	strb.w	r5, [r6], #1
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	42a6      	cmp	r6, r4
 800c47a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	d124      	bne.n	800c4ce <_dtoa_r+0x626>
 800c484:	4baf      	ldr	r3, [pc, #700]	@ (800c744 <_dtoa_r+0x89c>)
 800c486:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c48a:	f7f3 ff1f 	bl	80002cc <__adddf3>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c496:	f7f4 fb5f 	bl	8000b58 <__aeabi_dcmpgt>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d163      	bne.n	800c566 <_dtoa_r+0x6be>
 800c49e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4a2:	49a8      	ldr	r1, [pc, #672]	@ (800c744 <_dtoa_r+0x89c>)
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f7f3 ff0f 	bl	80002c8 <__aeabi_dsub>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4b2:	f7f4 fb33 	bl	8000b1c <__aeabi_dcmplt>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f43f af14 	beq.w	800c2e4 <_dtoa_r+0x43c>
 800c4bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4be:	1e73      	subs	r3, r6, #1
 800c4c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4c6:	2b30      	cmp	r3, #48	@ 0x30
 800c4c8:	d0f8      	beq.n	800c4bc <_dtoa_r+0x614>
 800c4ca:	4647      	mov	r7, r8
 800c4cc:	e03b      	b.n	800c546 <_dtoa_r+0x69e>
 800c4ce:	4b9e      	ldr	r3, [pc, #632]	@ (800c748 <_dtoa_r+0x8a0>)
 800c4d0:	f7f4 f8b2 	bl	8000638 <__aeabi_dmul>
 800c4d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4d8:	e7bc      	b.n	800c454 <_dtoa_r+0x5ac>
 800c4da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4de:	4656      	mov	r6, sl
 800c4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7f4 f9d0 	bl	800088c <__aeabi_ddiv>
 800c4ec:	f7f4 fb54 	bl	8000b98 <__aeabi_d2iz>
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	f7f4 f837 	bl	8000564 <__aeabi_i2d>
 800c4f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4fa:	f7f4 f89d 	bl	8000638 <__aeabi_dmul>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4620      	mov	r0, r4
 800c504:	4629      	mov	r1, r5
 800c506:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c50a:	f7f3 fedd 	bl	80002c8 <__aeabi_dsub>
 800c50e:	f806 4b01 	strb.w	r4, [r6], #1
 800c512:	9d03      	ldr	r5, [sp, #12]
 800c514:	eba6 040a 	sub.w	r4, r6, sl
 800c518:	42a5      	cmp	r5, r4
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	d133      	bne.n	800c588 <_dtoa_r+0x6e0>
 800c520:	f7f3 fed4 	bl	80002cc <__adddf3>
 800c524:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c528:	4604      	mov	r4, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	f7f4 fb14 	bl	8000b58 <__aeabi_dcmpgt>
 800c530:	b9c0      	cbnz	r0, 800c564 <_dtoa_r+0x6bc>
 800c532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f4 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800c53e:	b110      	cbz	r0, 800c546 <_dtoa_r+0x69e>
 800c540:	f018 0f01 	tst.w	r8, #1
 800c544:	d10e      	bne.n	800c564 <_dtoa_r+0x6bc>
 800c546:	9902      	ldr	r1, [sp, #8]
 800c548:	4648      	mov	r0, r9
 800c54a:	f000 fd77 	bl	800d03c <_Bfree>
 800c54e:	2300      	movs	r3, #0
 800c550:	7033      	strb	r3, [r6, #0]
 800c552:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c554:	3701      	adds	r7, #1
 800c556:	601f      	str	r7, [r3, #0]
 800c558:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 824b 	beq.w	800c9f6 <_dtoa_r+0xb4e>
 800c560:	601e      	str	r6, [r3, #0]
 800c562:	e248      	b.n	800c9f6 <_dtoa_r+0xb4e>
 800c564:	46b8      	mov	r8, r7
 800c566:	4633      	mov	r3, r6
 800c568:	461e      	mov	r6, r3
 800c56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c56e:	2a39      	cmp	r2, #57	@ 0x39
 800c570:	d106      	bne.n	800c580 <_dtoa_r+0x6d8>
 800c572:	459a      	cmp	sl, r3
 800c574:	d1f8      	bne.n	800c568 <_dtoa_r+0x6c0>
 800c576:	2230      	movs	r2, #48	@ 0x30
 800c578:	f108 0801 	add.w	r8, r8, #1
 800c57c:	f88a 2000 	strb.w	r2, [sl]
 800c580:	781a      	ldrb	r2, [r3, #0]
 800c582:	3201      	adds	r2, #1
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	e7a0      	b.n	800c4ca <_dtoa_r+0x622>
 800c588:	4b6f      	ldr	r3, [pc, #444]	@ (800c748 <_dtoa_r+0x8a0>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	f7f4 f854 	bl	8000638 <__aeabi_dmul>
 800c590:	2200      	movs	r2, #0
 800c592:	2300      	movs	r3, #0
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
 800c598:	f7f4 fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d09f      	beq.n	800c4e0 <_dtoa_r+0x638>
 800c5a0:	e7d1      	b.n	800c546 <_dtoa_r+0x69e>
 800c5a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	f000 80ea 	beq.w	800c77e <_dtoa_r+0x8d6>
 800c5aa:	9a07      	ldr	r2, [sp, #28]
 800c5ac:	2a01      	cmp	r2, #1
 800c5ae:	f300 80cd 	bgt.w	800c74c <_dtoa_r+0x8a4>
 800c5b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5b4:	2a00      	cmp	r2, #0
 800c5b6:	f000 80c1 	beq.w	800c73c <_dtoa_r+0x894>
 800c5ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5be:	9c08      	ldr	r4, [sp, #32]
 800c5c0:	9e00      	ldr	r6, [sp, #0]
 800c5c2:	9a00      	ldr	r2, [sp, #0]
 800c5c4:	441a      	add	r2, r3
 800c5c6:	9200      	str	r2, [sp, #0]
 800c5c8:	9a06      	ldr	r2, [sp, #24]
 800c5ca:	2101      	movs	r1, #1
 800c5cc:	441a      	add	r2, r3
 800c5ce:	4648      	mov	r0, r9
 800c5d0:	9206      	str	r2, [sp, #24]
 800c5d2:	f000 fde7 	bl	800d1a4 <__i2b>
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	b166      	cbz	r6, 800c5f4 <_dtoa_r+0x74c>
 800c5da:	9b06      	ldr	r3, [sp, #24]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dd09      	ble.n	800c5f4 <_dtoa_r+0x74c>
 800c5e0:	42b3      	cmp	r3, r6
 800c5e2:	9a00      	ldr	r2, [sp, #0]
 800c5e4:	bfa8      	it	ge
 800c5e6:	4633      	movge	r3, r6
 800c5e8:	1ad2      	subs	r2, r2, r3
 800c5ea:	9200      	str	r2, [sp, #0]
 800c5ec:	9a06      	ldr	r2, [sp, #24]
 800c5ee:	1af6      	subs	r6, r6, r3
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	9306      	str	r3, [sp, #24]
 800c5f4:	9b08      	ldr	r3, [sp, #32]
 800c5f6:	b30b      	cbz	r3, 800c63c <_dtoa_r+0x794>
 800c5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 80c6 	beq.w	800c78c <_dtoa_r+0x8e4>
 800c600:	2c00      	cmp	r4, #0
 800c602:	f000 80c0 	beq.w	800c786 <_dtoa_r+0x8de>
 800c606:	4629      	mov	r1, r5
 800c608:	4622      	mov	r2, r4
 800c60a:	4648      	mov	r0, r9
 800c60c:	f000 fe82 	bl	800d314 <__pow5mult>
 800c610:	9a02      	ldr	r2, [sp, #8]
 800c612:	4601      	mov	r1, r0
 800c614:	4605      	mov	r5, r0
 800c616:	4648      	mov	r0, r9
 800c618:	f000 fdda 	bl	800d1d0 <__multiply>
 800c61c:	9902      	ldr	r1, [sp, #8]
 800c61e:	4680      	mov	r8, r0
 800c620:	4648      	mov	r0, r9
 800c622:	f000 fd0b 	bl	800d03c <_Bfree>
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	1b1b      	subs	r3, r3, r4
 800c62a:	9308      	str	r3, [sp, #32]
 800c62c:	f000 80b1 	beq.w	800c792 <_dtoa_r+0x8ea>
 800c630:	9a08      	ldr	r2, [sp, #32]
 800c632:	4641      	mov	r1, r8
 800c634:	4648      	mov	r0, r9
 800c636:	f000 fe6d 	bl	800d314 <__pow5mult>
 800c63a:	9002      	str	r0, [sp, #8]
 800c63c:	2101      	movs	r1, #1
 800c63e:	4648      	mov	r0, r9
 800c640:	f000 fdb0 	bl	800d1a4 <__i2b>
 800c644:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c646:	4604      	mov	r4, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 81d8 	beq.w	800c9fe <_dtoa_r+0xb56>
 800c64e:	461a      	mov	r2, r3
 800c650:	4601      	mov	r1, r0
 800c652:	4648      	mov	r0, r9
 800c654:	f000 fe5e 	bl	800d314 <__pow5mult>
 800c658:	9b07      	ldr	r3, [sp, #28]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	4604      	mov	r4, r0
 800c65e:	f300 809f 	bgt.w	800c7a0 <_dtoa_r+0x8f8>
 800c662:	9b04      	ldr	r3, [sp, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 8097 	bne.w	800c798 <_dtoa_r+0x8f0>
 800c66a:	9b05      	ldr	r3, [sp, #20]
 800c66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 8093 	bne.w	800c79c <_dtoa_r+0x8f4>
 800c676:	9b05      	ldr	r3, [sp, #20]
 800c678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c67c:	0d1b      	lsrs	r3, r3, #20
 800c67e:	051b      	lsls	r3, r3, #20
 800c680:	b133      	cbz	r3, 800c690 <_dtoa_r+0x7e8>
 800c682:	9b00      	ldr	r3, [sp, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	9b06      	ldr	r3, [sp, #24]
 800c68a:	3301      	adds	r3, #1
 800c68c:	9306      	str	r3, [sp, #24]
 800c68e:	2301      	movs	r3, #1
 800c690:	9308      	str	r3, [sp, #32]
 800c692:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 81b8 	beq.w	800ca0a <_dtoa_r+0xb62>
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6a0:	6918      	ldr	r0, [r3, #16]
 800c6a2:	f000 fd33 	bl	800d10c <__hi0bits>
 800c6a6:	f1c0 0020 	rsb	r0, r0, #32
 800c6aa:	9b06      	ldr	r3, [sp, #24]
 800c6ac:	4418      	add	r0, r3
 800c6ae:	f010 001f 	ands.w	r0, r0, #31
 800c6b2:	f000 8082 	beq.w	800c7ba <_dtoa_r+0x912>
 800c6b6:	f1c0 0320 	rsb	r3, r0, #32
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	dd73      	ble.n	800c7a6 <_dtoa_r+0x8fe>
 800c6be:	9b00      	ldr	r3, [sp, #0]
 800c6c0:	f1c0 001c 	rsb	r0, r0, #28
 800c6c4:	4403      	add	r3, r0
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	4403      	add	r3, r0
 800c6cc:	4406      	add	r6, r0
 800c6ce:	9306      	str	r3, [sp, #24]
 800c6d0:	9b00      	ldr	r3, [sp, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	dd05      	ble.n	800c6e2 <_dtoa_r+0x83a>
 800c6d6:	9902      	ldr	r1, [sp, #8]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4648      	mov	r0, r9
 800c6dc:	f000 fe74 	bl	800d3c8 <__lshift>
 800c6e0:	9002      	str	r0, [sp, #8]
 800c6e2:	9b06      	ldr	r3, [sp, #24]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dd05      	ble.n	800c6f4 <_dtoa_r+0x84c>
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4648      	mov	r0, r9
 800c6ee:	f000 fe6b 	bl	800d3c8 <__lshift>
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d061      	beq.n	800c7be <_dtoa_r+0x916>
 800c6fa:	9802      	ldr	r0, [sp, #8]
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	f000 fecf 	bl	800d4a0 <__mcmp>
 800c702:	2800      	cmp	r0, #0
 800c704:	da5b      	bge.n	800c7be <_dtoa_r+0x916>
 800c706:	2300      	movs	r3, #0
 800c708:	9902      	ldr	r1, [sp, #8]
 800c70a:	220a      	movs	r2, #10
 800c70c:	4648      	mov	r0, r9
 800c70e:	f000 fcb7 	bl	800d080 <__multadd>
 800c712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 8177 	beq.w	800ca0e <_dtoa_r+0xb66>
 800c720:	4629      	mov	r1, r5
 800c722:	2300      	movs	r3, #0
 800c724:	220a      	movs	r2, #10
 800c726:	4648      	mov	r0, r9
 800c728:	f000 fcaa 	bl	800d080 <__multadd>
 800c72c:	f1bb 0f00 	cmp.w	fp, #0
 800c730:	4605      	mov	r5, r0
 800c732:	dc6f      	bgt.n	800c814 <_dtoa_r+0x96c>
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	2b02      	cmp	r3, #2
 800c738:	dc49      	bgt.n	800c7ce <_dtoa_r+0x926>
 800c73a:	e06b      	b.n	800c814 <_dtoa_r+0x96c>
 800c73c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c73e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c742:	e73c      	b.n	800c5be <_dtoa_r+0x716>
 800c744:	3fe00000 	.word	0x3fe00000
 800c748:	40240000 	.word	0x40240000
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	1e5c      	subs	r4, r3, #1
 800c750:	9b08      	ldr	r3, [sp, #32]
 800c752:	42a3      	cmp	r3, r4
 800c754:	db09      	blt.n	800c76a <_dtoa_r+0x8c2>
 800c756:	1b1c      	subs	r4, r3, r4
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f6bf af30 	bge.w	800c5c0 <_dtoa_r+0x718>
 800c760:	9b00      	ldr	r3, [sp, #0]
 800c762:	9a03      	ldr	r2, [sp, #12]
 800c764:	1a9e      	subs	r6, r3, r2
 800c766:	2300      	movs	r3, #0
 800c768:	e72b      	b.n	800c5c2 <_dtoa_r+0x71a>
 800c76a:	9b08      	ldr	r3, [sp, #32]
 800c76c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c76e:	9408      	str	r4, [sp, #32]
 800c770:	1ae3      	subs	r3, r4, r3
 800c772:	441a      	add	r2, r3
 800c774:	9e00      	ldr	r6, [sp, #0]
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	920d      	str	r2, [sp, #52]	@ 0x34
 800c77a:	2400      	movs	r4, #0
 800c77c:	e721      	b.n	800c5c2 <_dtoa_r+0x71a>
 800c77e:	9c08      	ldr	r4, [sp, #32]
 800c780:	9e00      	ldr	r6, [sp, #0]
 800c782:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c784:	e728      	b.n	800c5d8 <_dtoa_r+0x730>
 800c786:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c78a:	e751      	b.n	800c630 <_dtoa_r+0x788>
 800c78c:	9a08      	ldr	r2, [sp, #32]
 800c78e:	9902      	ldr	r1, [sp, #8]
 800c790:	e750      	b.n	800c634 <_dtoa_r+0x78c>
 800c792:	f8cd 8008 	str.w	r8, [sp, #8]
 800c796:	e751      	b.n	800c63c <_dtoa_r+0x794>
 800c798:	2300      	movs	r3, #0
 800c79a:	e779      	b.n	800c690 <_dtoa_r+0x7e8>
 800c79c:	9b04      	ldr	r3, [sp, #16]
 800c79e:	e777      	b.n	800c690 <_dtoa_r+0x7e8>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	9308      	str	r3, [sp, #32]
 800c7a4:	e779      	b.n	800c69a <_dtoa_r+0x7f2>
 800c7a6:	d093      	beq.n	800c6d0 <_dtoa_r+0x828>
 800c7a8:	9a00      	ldr	r2, [sp, #0]
 800c7aa:	331c      	adds	r3, #28
 800c7ac:	441a      	add	r2, r3
 800c7ae:	9200      	str	r2, [sp, #0]
 800c7b0:	9a06      	ldr	r2, [sp, #24]
 800c7b2:	441a      	add	r2, r3
 800c7b4:	441e      	add	r6, r3
 800c7b6:	9206      	str	r2, [sp, #24]
 800c7b8:	e78a      	b.n	800c6d0 <_dtoa_r+0x828>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	e7f4      	b.n	800c7a8 <_dtoa_r+0x900>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	46b8      	mov	r8, r7
 800c7c4:	dc20      	bgt.n	800c808 <_dtoa_r+0x960>
 800c7c6:	469b      	mov	fp, r3
 800c7c8:	9b07      	ldr	r3, [sp, #28]
 800c7ca:	2b02      	cmp	r3, #2
 800c7cc:	dd1e      	ble.n	800c80c <_dtoa_r+0x964>
 800c7ce:	f1bb 0f00 	cmp.w	fp, #0
 800c7d2:	f47f adb1 	bne.w	800c338 <_dtoa_r+0x490>
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	465b      	mov	r3, fp
 800c7da:	2205      	movs	r2, #5
 800c7dc:	4648      	mov	r0, r9
 800c7de:	f000 fc4f 	bl	800d080 <__multadd>
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	9802      	ldr	r0, [sp, #8]
 800c7e8:	f000 fe5a 	bl	800d4a0 <__mcmp>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	f77f ada3 	ble.w	800c338 <_dtoa_r+0x490>
 800c7f2:	4656      	mov	r6, sl
 800c7f4:	2331      	movs	r3, #49	@ 0x31
 800c7f6:	f806 3b01 	strb.w	r3, [r6], #1
 800c7fa:	f108 0801 	add.w	r8, r8, #1
 800c7fe:	e59f      	b.n	800c340 <_dtoa_r+0x498>
 800c800:	9c03      	ldr	r4, [sp, #12]
 800c802:	46b8      	mov	r8, r7
 800c804:	4625      	mov	r5, r4
 800c806:	e7f4      	b.n	800c7f2 <_dtoa_r+0x94a>
 800c808:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 8101 	beq.w	800ca16 <_dtoa_r+0xb6e>
 800c814:	2e00      	cmp	r6, #0
 800c816:	dd05      	ble.n	800c824 <_dtoa_r+0x97c>
 800c818:	4629      	mov	r1, r5
 800c81a:	4632      	mov	r2, r6
 800c81c:	4648      	mov	r0, r9
 800c81e:	f000 fdd3 	bl	800d3c8 <__lshift>
 800c822:	4605      	mov	r5, r0
 800c824:	9b08      	ldr	r3, [sp, #32]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d05c      	beq.n	800c8e4 <_dtoa_r+0xa3c>
 800c82a:	6869      	ldr	r1, [r5, #4]
 800c82c:	4648      	mov	r0, r9
 800c82e:	f000 fbc5 	bl	800cfbc <_Balloc>
 800c832:	4606      	mov	r6, r0
 800c834:	b928      	cbnz	r0, 800c842 <_dtoa_r+0x99a>
 800c836:	4b82      	ldr	r3, [pc, #520]	@ (800ca40 <_dtoa_r+0xb98>)
 800c838:	4602      	mov	r2, r0
 800c83a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c83e:	f7ff bb4a 	b.w	800bed6 <_dtoa_r+0x2e>
 800c842:	692a      	ldr	r2, [r5, #16]
 800c844:	3202      	adds	r2, #2
 800c846:	0092      	lsls	r2, r2, #2
 800c848:	f105 010c 	add.w	r1, r5, #12
 800c84c:	300c      	adds	r0, #12
 800c84e:	f001 f811 	bl	800d874 <memcpy>
 800c852:	2201      	movs	r2, #1
 800c854:	4631      	mov	r1, r6
 800c856:	4648      	mov	r0, r9
 800c858:	f000 fdb6 	bl	800d3c8 <__lshift>
 800c85c:	f10a 0301 	add.w	r3, sl, #1
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	eb0a 030b 	add.w	r3, sl, fp
 800c866:	9308      	str	r3, [sp, #32]
 800c868:	9b04      	ldr	r3, [sp, #16]
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	462f      	mov	r7, r5
 800c870:	9306      	str	r3, [sp, #24]
 800c872:	4605      	mov	r5, r0
 800c874:	9b00      	ldr	r3, [sp, #0]
 800c876:	9802      	ldr	r0, [sp, #8]
 800c878:	4621      	mov	r1, r4
 800c87a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c87e:	f7ff fa89 	bl	800bd94 <quorem>
 800c882:	4603      	mov	r3, r0
 800c884:	3330      	adds	r3, #48	@ 0x30
 800c886:	9003      	str	r0, [sp, #12]
 800c888:	4639      	mov	r1, r7
 800c88a:	9802      	ldr	r0, [sp, #8]
 800c88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c88e:	f000 fe07 	bl	800d4a0 <__mcmp>
 800c892:	462a      	mov	r2, r5
 800c894:	9004      	str	r0, [sp, #16]
 800c896:	4621      	mov	r1, r4
 800c898:	4648      	mov	r0, r9
 800c89a:	f000 fe1d 	bl	800d4d8 <__mdiff>
 800c89e:	68c2      	ldr	r2, [r0, #12]
 800c8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	bb02      	cbnz	r2, 800c8e8 <_dtoa_r+0xa40>
 800c8a6:	4601      	mov	r1, r0
 800c8a8:	9802      	ldr	r0, [sp, #8]
 800c8aa:	f000 fdf9 	bl	800d4a0 <__mcmp>
 800c8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4648      	mov	r0, r9
 800c8b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ba:	f000 fbbf 	bl	800d03c <_Bfree>
 800c8be:	9b07      	ldr	r3, [sp, #28]
 800c8c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c8c2:	9e00      	ldr	r6, [sp, #0]
 800c8c4:	ea42 0103 	orr.w	r1, r2, r3
 800c8c8:	9b06      	ldr	r3, [sp, #24]
 800c8ca:	4319      	orrs	r1, r3
 800c8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ce:	d10d      	bne.n	800c8ec <_dtoa_r+0xa44>
 800c8d0:	2b39      	cmp	r3, #57	@ 0x39
 800c8d2:	d027      	beq.n	800c924 <_dtoa_r+0xa7c>
 800c8d4:	9a04      	ldr	r2, [sp, #16]
 800c8d6:	2a00      	cmp	r2, #0
 800c8d8:	dd01      	ble.n	800c8de <_dtoa_r+0xa36>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	3331      	adds	r3, #49	@ 0x31
 800c8de:	f88b 3000 	strb.w	r3, [fp]
 800c8e2:	e52e      	b.n	800c342 <_dtoa_r+0x49a>
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	e7b9      	b.n	800c85c <_dtoa_r+0x9b4>
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	e7e2      	b.n	800c8b2 <_dtoa_r+0xa0a>
 800c8ec:	9904      	ldr	r1, [sp, #16]
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	db04      	blt.n	800c8fc <_dtoa_r+0xa54>
 800c8f2:	9807      	ldr	r0, [sp, #28]
 800c8f4:	4301      	orrs	r1, r0
 800c8f6:	9806      	ldr	r0, [sp, #24]
 800c8f8:	4301      	orrs	r1, r0
 800c8fa:	d120      	bne.n	800c93e <_dtoa_r+0xa96>
 800c8fc:	2a00      	cmp	r2, #0
 800c8fe:	ddee      	ble.n	800c8de <_dtoa_r+0xa36>
 800c900:	9902      	ldr	r1, [sp, #8]
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	2201      	movs	r2, #1
 800c906:	4648      	mov	r0, r9
 800c908:	f000 fd5e 	bl	800d3c8 <__lshift>
 800c90c:	4621      	mov	r1, r4
 800c90e:	9002      	str	r0, [sp, #8]
 800c910:	f000 fdc6 	bl	800d4a0 <__mcmp>
 800c914:	2800      	cmp	r0, #0
 800c916:	9b00      	ldr	r3, [sp, #0]
 800c918:	dc02      	bgt.n	800c920 <_dtoa_r+0xa78>
 800c91a:	d1e0      	bne.n	800c8de <_dtoa_r+0xa36>
 800c91c:	07da      	lsls	r2, r3, #31
 800c91e:	d5de      	bpl.n	800c8de <_dtoa_r+0xa36>
 800c920:	2b39      	cmp	r3, #57	@ 0x39
 800c922:	d1da      	bne.n	800c8da <_dtoa_r+0xa32>
 800c924:	2339      	movs	r3, #57	@ 0x39
 800c926:	f88b 3000 	strb.w	r3, [fp]
 800c92a:	4633      	mov	r3, r6
 800c92c:	461e      	mov	r6, r3
 800c92e:	3b01      	subs	r3, #1
 800c930:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c934:	2a39      	cmp	r2, #57	@ 0x39
 800c936:	d04e      	beq.n	800c9d6 <_dtoa_r+0xb2e>
 800c938:	3201      	adds	r2, #1
 800c93a:	701a      	strb	r2, [r3, #0]
 800c93c:	e501      	b.n	800c342 <_dtoa_r+0x49a>
 800c93e:	2a00      	cmp	r2, #0
 800c940:	dd03      	ble.n	800c94a <_dtoa_r+0xaa2>
 800c942:	2b39      	cmp	r3, #57	@ 0x39
 800c944:	d0ee      	beq.n	800c924 <_dtoa_r+0xa7c>
 800c946:	3301      	adds	r3, #1
 800c948:	e7c9      	b.n	800c8de <_dtoa_r+0xa36>
 800c94a:	9a00      	ldr	r2, [sp, #0]
 800c94c:	9908      	ldr	r1, [sp, #32]
 800c94e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c952:	428a      	cmp	r2, r1
 800c954:	d028      	beq.n	800c9a8 <_dtoa_r+0xb00>
 800c956:	9902      	ldr	r1, [sp, #8]
 800c958:	2300      	movs	r3, #0
 800c95a:	220a      	movs	r2, #10
 800c95c:	4648      	mov	r0, r9
 800c95e:	f000 fb8f 	bl	800d080 <__multadd>
 800c962:	42af      	cmp	r7, r5
 800c964:	9002      	str	r0, [sp, #8]
 800c966:	f04f 0300 	mov.w	r3, #0
 800c96a:	f04f 020a 	mov.w	r2, #10
 800c96e:	4639      	mov	r1, r7
 800c970:	4648      	mov	r0, r9
 800c972:	d107      	bne.n	800c984 <_dtoa_r+0xadc>
 800c974:	f000 fb84 	bl	800d080 <__multadd>
 800c978:	4607      	mov	r7, r0
 800c97a:	4605      	mov	r5, r0
 800c97c:	9b00      	ldr	r3, [sp, #0]
 800c97e:	3301      	adds	r3, #1
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	e777      	b.n	800c874 <_dtoa_r+0x9cc>
 800c984:	f000 fb7c 	bl	800d080 <__multadd>
 800c988:	4629      	mov	r1, r5
 800c98a:	4607      	mov	r7, r0
 800c98c:	2300      	movs	r3, #0
 800c98e:	220a      	movs	r2, #10
 800c990:	4648      	mov	r0, r9
 800c992:	f000 fb75 	bl	800d080 <__multadd>
 800c996:	4605      	mov	r5, r0
 800c998:	e7f0      	b.n	800c97c <_dtoa_r+0xad4>
 800c99a:	f1bb 0f00 	cmp.w	fp, #0
 800c99e:	bfcc      	ite	gt
 800c9a0:	465e      	movgt	r6, fp
 800c9a2:	2601      	movle	r6, #1
 800c9a4:	4456      	add	r6, sl
 800c9a6:	2700      	movs	r7, #0
 800c9a8:	9902      	ldr	r1, [sp, #8]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	4648      	mov	r0, r9
 800c9b0:	f000 fd0a 	bl	800d3c8 <__lshift>
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	9002      	str	r0, [sp, #8]
 800c9b8:	f000 fd72 	bl	800d4a0 <__mcmp>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	dcb4      	bgt.n	800c92a <_dtoa_r+0xa82>
 800c9c0:	d102      	bne.n	800c9c8 <_dtoa_r+0xb20>
 800c9c2:	9b00      	ldr	r3, [sp, #0]
 800c9c4:	07db      	lsls	r3, r3, #31
 800c9c6:	d4b0      	bmi.n	800c92a <_dtoa_r+0xa82>
 800c9c8:	4633      	mov	r3, r6
 800c9ca:	461e      	mov	r6, r3
 800c9cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9d0:	2a30      	cmp	r2, #48	@ 0x30
 800c9d2:	d0fa      	beq.n	800c9ca <_dtoa_r+0xb22>
 800c9d4:	e4b5      	b.n	800c342 <_dtoa_r+0x49a>
 800c9d6:	459a      	cmp	sl, r3
 800c9d8:	d1a8      	bne.n	800c92c <_dtoa_r+0xa84>
 800c9da:	2331      	movs	r3, #49	@ 0x31
 800c9dc:	f108 0801 	add.w	r8, r8, #1
 800c9e0:	f88a 3000 	strb.w	r3, [sl]
 800c9e4:	e4ad      	b.n	800c342 <_dtoa_r+0x49a>
 800c9e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca44 <_dtoa_r+0xb9c>
 800c9ec:	b11b      	cbz	r3, 800c9f6 <_dtoa_r+0xb4e>
 800c9ee:	f10a 0308 	add.w	r3, sl, #8
 800c9f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	4650      	mov	r0, sl
 800c9f8:	b017      	add	sp, #92	@ 0x5c
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	9b07      	ldr	r3, [sp, #28]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	f77f ae2e 	ble.w	800c662 <_dtoa_r+0x7ba>
 800ca06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca08:	9308      	str	r3, [sp, #32]
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	e64d      	b.n	800c6aa <_dtoa_r+0x802>
 800ca0e:	f1bb 0f00 	cmp.w	fp, #0
 800ca12:	f77f aed9 	ble.w	800c7c8 <_dtoa_r+0x920>
 800ca16:	4656      	mov	r6, sl
 800ca18:	9802      	ldr	r0, [sp, #8]
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	f7ff f9ba 	bl	800bd94 <quorem>
 800ca20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ca24:	f806 3b01 	strb.w	r3, [r6], #1
 800ca28:	eba6 020a 	sub.w	r2, r6, sl
 800ca2c:	4593      	cmp	fp, r2
 800ca2e:	ddb4      	ble.n	800c99a <_dtoa_r+0xaf2>
 800ca30:	9902      	ldr	r1, [sp, #8]
 800ca32:	2300      	movs	r3, #0
 800ca34:	220a      	movs	r2, #10
 800ca36:	4648      	mov	r0, r9
 800ca38:	f000 fb22 	bl	800d080 <__multadd>
 800ca3c:	9002      	str	r0, [sp, #8]
 800ca3e:	e7eb      	b.n	800ca18 <_dtoa_r+0xb70>
 800ca40:	0800e0c4 	.word	0x0800e0c4
 800ca44:	0800e048 	.word	0x0800e048

0800ca48 <__ssputs_r>:
 800ca48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca4c:	688e      	ldr	r6, [r1, #8]
 800ca4e:	461f      	mov	r7, r3
 800ca50:	42be      	cmp	r6, r7
 800ca52:	680b      	ldr	r3, [r1, #0]
 800ca54:	4682      	mov	sl, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	4690      	mov	r8, r2
 800ca5a:	d82d      	bhi.n	800cab8 <__ssputs_r+0x70>
 800ca5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca64:	d026      	beq.n	800cab4 <__ssputs_r+0x6c>
 800ca66:	6965      	ldr	r5, [r4, #20]
 800ca68:	6909      	ldr	r1, [r1, #16]
 800ca6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca6e:	eba3 0901 	sub.w	r9, r3, r1
 800ca72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca76:	1c7b      	adds	r3, r7, #1
 800ca78:	444b      	add	r3, r9
 800ca7a:	106d      	asrs	r5, r5, #1
 800ca7c:	429d      	cmp	r5, r3
 800ca7e:	bf38      	it	cc
 800ca80:	461d      	movcc	r5, r3
 800ca82:	0553      	lsls	r3, r2, #21
 800ca84:	d527      	bpl.n	800cad6 <__ssputs_r+0x8e>
 800ca86:	4629      	mov	r1, r5
 800ca88:	f000 f960 	bl	800cd4c <_malloc_r>
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	b360      	cbz	r0, 800caea <__ssputs_r+0xa2>
 800ca90:	6921      	ldr	r1, [r4, #16]
 800ca92:	464a      	mov	r2, r9
 800ca94:	f000 feee 	bl	800d874 <memcpy>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caa2:	81a3      	strh	r3, [r4, #12]
 800caa4:	6126      	str	r6, [r4, #16]
 800caa6:	6165      	str	r5, [r4, #20]
 800caa8:	444e      	add	r6, r9
 800caaa:	eba5 0509 	sub.w	r5, r5, r9
 800caae:	6026      	str	r6, [r4, #0]
 800cab0:	60a5      	str	r5, [r4, #8]
 800cab2:	463e      	mov	r6, r7
 800cab4:	42be      	cmp	r6, r7
 800cab6:	d900      	bls.n	800caba <__ssputs_r+0x72>
 800cab8:	463e      	mov	r6, r7
 800caba:	6820      	ldr	r0, [r4, #0]
 800cabc:	4632      	mov	r2, r6
 800cabe:	4641      	mov	r1, r8
 800cac0:	f000 fe67 	bl	800d792 <memmove>
 800cac4:	68a3      	ldr	r3, [r4, #8]
 800cac6:	1b9b      	subs	r3, r3, r6
 800cac8:	60a3      	str	r3, [r4, #8]
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	4433      	add	r3, r6
 800cace:	6023      	str	r3, [r4, #0]
 800cad0:	2000      	movs	r0, #0
 800cad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad6:	462a      	mov	r2, r5
 800cad8:	f000 fe2d 	bl	800d736 <_realloc_r>
 800cadc:	4606      	mov	r6, r0
 800cade:	2800      	cmp	r0, #0
 800cae0:	d1e0      	bne.n	800caa4 <__ssputs_r+0x5c>
 800cae2:	6921      	ldr	r1, [r4, #16]
 800cae4:	4650      	mov	r0, sl
 800cae6:	f000 ff05 	bl	800d8f4 <_free_r>
 800caea:	230c      	movs	r3, #12
 800caec:	f8ca 3000 	str.w	r3, [sl]
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caf6:	81a3      	strh	r3, [r4, #12]
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cafc:	e7e9      	b.n	800cad2 <__ssputs_r+0x8a>
	...

0800cb00 <_svfiprintf_r>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	4698      	mov	r8, r3
 800cb06:	898b      	ldrh	r3, [r1, #12]
 800cb08:	061b      	lsls	r3, r3, #24
 800cb0a:	b09d      	sub	sp, #116	@ 0x74
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	460d      	mov	r5, r1
 800cb10:	4614      	mov	r4, r2
 800cb12:	d510      	bpl.n	800cb36 <_svfiprintf_r+0x36>
 800cb14:	690b      	ldr	r3, [r1, #16]
 800cb16:	b973      	cbnz	r3, 800cb36 <_svfiprintf_r+0x36>
 800cb18:	2140      	movs	r1, #64	@ 0x40
 800cb1a:	f000 f917 	bl	800cd4c <_malloc_r>
 800cb1e:	6028      	str	r0, [r5, #0]
 800cb20:	6128      	str	r0, [r5, #16]
 800cb22:	b930      	cbnz	r0, 800cb32 <_svfiprintf_r+0x32>
 800cb24:	230c      	movs	r3, #12
 800cb26:	603b      	str	r3, [r7, #0]
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb2c:	b01d      	add	sp, #116	@ 0x74
 800cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb32:	2340      	movs	r3, #64	@ 0x40
 800cb34:	616b      	str	r3, [r5, #20]
 800cb36:	2300      	movs	r3, #0
 800cb38:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb3a:	2320      	movs	r3, #32
 800cb3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb40:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb44:	2330      	movs	r3, #48	@ 0x30
 800cb46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cce4 <_svfiprintf_r+0x1e4>
 800cb4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb4e:	f04f 0901 	mov.w	r9, #1
 800cb52:	4623      	mov	r3, r4
 800cb54:	469a      	mov	sl, r3
 800cb56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb5a:	b10a      	cbz	r2, 800cb60 <_svfiprintf_r+0x60>
 800cb5c:	2a25      	cmp	r2, #37	@ 0x25
 800cb5e:	d1f9      	bne.n	800cb54 <_svfiprintf_r+0x54>
 800cb60:	ebba 0b04 	subs.w	fp, sl, r4
 800cb64:	d00b      	beq.n	800cb7e <_svfiprintf_r+0x7e>
 800cb66:	465b      	mov	r3, fp
 800cb68:	4622      	mov	r2, r4
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	f7ff ff6b 	bl	800ca48 <__ssputs_r>
 800cb72:	3001      	adds	r0, #1
 800cb74:	f000 80a7 	beq.w	800ccc6 <_svfiprintf_r+0x1c6>
 800cb78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb7a:	445a      	add	r2, fp
 800cb7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 809f 	beq.w	800ccc6 <_svfiprintf_r+0x1c6>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb92:	f10a 0a01 	add.w	sl, sl, #1
 800cb96:	9304      	str	r3, [sp, #16]
 800cb98:	9307      	str	r3, [sp, #28]
 800cb9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cba0:	4654      	mov	r4, sl
 800cba2:	2205      	movs	r2, #5
 800cba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba8:	484e      	ldr	r0, [pc, #312]	@ (800cce4 <_svfiprintf_r+0x1e4>)
 800cbaa:	f7f3 fb31 	bl	8000210 <memchr>
 800cbae:	9a04      	ldr	r2, [sp, #16]
 800cbb0:	b9d8      	cbnz	r0, 800cbea <_svfiprintf_r+0xea>
 800cbb2:	06d0      	lsls	r0, r2, #27
 800cbb4:	bf44      	itt	mi
 800cbb6:	2320      	movmi	r3, #32
 800cbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbbc:	0711      	lsls	r1, r2, #28
 800cbbe:	bf44      	itt	mi
 800cbc0:	232b      	movmi	r3, #43	@ 0x2b
 800cbc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbca:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbcc:	d015      	beq.n	800cbfa <_svfiprintf_r+0xfa>
 800cbce:	9a07      	ldr	r2, [sp, #28]
 800cbd0:	4654      	mov	r4, sl
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f04f 0c0a 	mov.w	ip, #10
 800cbd8:	4621      	mov	r1, r4
 800cbda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbde:	3b30      	subs	r3, #48	@ 0x30
 800cbe0:	2b09      	cmp	r3, #9
 800cbe2:	d94b      	bls.n	800cc7c <_svfiprintf_r+0x17c>
 800cbe4:	b1b0      	cbz	r0, 800cc14 <_svfiprintf_r+0x114>
 800cbe6:	9207      	str	r2, [sp, #28]
 800cbe8:	e014      	b.n	800cc14 <_svfiprintf_r+0x114>
 800cbea:	eba0 0308 	sub.w	r3, r0, r8
 800cbee:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	9304      	str	r3, [sp, #16]
 800cbf6:	46a2      	mov	sl, r4
 800cbf8:	e7d2      	b.n	800cba0 <_svfiprintf_r+0xa0>
 800cbfa:	9b03      	ldr	r3, [sp, #12]
 800cbfc:	1d19      	adds	r1, r3, #4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	9103      	str	r1, [sp, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfbb      	ittet	lt
 800cc06:	425b      	neglt	r3, r3
 800cc08:	f042 0202 	orrlt.w	r2, r2, #2
 800cc0c:	9307      	strge	r3, [sp, #28]
 800cc0e:	9307      	strlt	r3, [sp, #28]
 800cc10:	bfb8      	it	lt
 800cc12:	9204      	strlt	r2, [sp, #16]
 800cc14:	7823      	ldrb	r3, [r4, #0]
 800cc16:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc18:	d10a      	bne.n	800cc30 <_svfiprintf_r+0x130>
 800cc1a:	7863      	ldrb	r3, [r4, #1]
 800cc1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc1e:	d132      	bne.n	800cc86 <_svfiprintf_r+0x186>
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	1d1a      	adds	r2, r3, #4
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	9203      	str	r2, [sp, #12]
 800cc28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc2c:	3402      	adds	r4, #2
 800cc2e:	9305      	str	r3, [sp, #20]
 800cc30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ccf4 <_svfiprintf_r+0x1f4>
 800cc34:	7821      	ldrb	r1, [r4, #0]
 800cc36:	2203      	movs	r2, #3
 800cc38:	4650      	mov	r0, sl
 800cc3a:	f7f3 fae9 	bl	8000210 <memchr>
 800cc3e:	b138      	cbz	r0, 800cc50 <_svfiprintf_r+0x150>
 800cc40:	9b04      	ldr	r3, [sp, #16]
 800cc42:	eba0 000a 	sub.w	r0, r0, sl
 800cc46:	2240      	movs	r2, #64	@ 0x40
 800cc48:	4082      	lsls	r2, r0
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	3401      	adds	r4, #1
 800cc4e:	9304      	str	r3, [sp, #16]
 800cc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc54:	4824      	ldr	r0, [pc, #144]	@ (800cce8 <_svfiprintf_r+0x1e8>)
 800cc56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc5a:	2206      	movs	r2, #6
 800cc5c:	f7f3 fad8 	bl	8000210 <memchr>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d036      	beq.n	800ccd2 <_svfiprintf_r+0x1d2>
 800cc64:	4b21      	ldr	r3, [pc, #132]	@ (800ccec <_svfiprintf_r+0x1ec>)
 800cc66:	bb1b      	cbnz	r3, 800ccb0 <_svfiprintf_r+0x1b0>
 800cc68:	9b03      	ldr	r3, [sp, #12]
 800cc6a:	3307      	adds	r3, #7
 800cc6c:	f023 0307 	bic.w	r3, r3, #7
 800cc70:	3308      	adds	r3, #8
 800cc72:	9303      	str	r3, [sp, #12]
 800cc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc76:	4433      	add	r3, r6
 800cc78:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc7a:	e76a      	b.n	800cb52 <_svfiprintf_r+0x52>
 800cc7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc80:	460c      	mov	r4, r1
 800cc82:	2001      	movs	r0, #1
 800cc84:	e7a8      	b.n	800cbd8 <_svfiprintf_r+0xd8>
 800cc86:	2300      	movs	r3, #0
 800cc88:	3401      	adds	r4, #1
 800cc8a:	9305      	str	r3, [sp, #20]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	f04f 0c0a 	mov.w	ip, #10
 800cc92:	4620      	mov	r0, r4
 800cc94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc98:	3a30      	subs	r2, #48	@ 0x30
 800cc9a:	2a09      	cmp	r2, #9
 800cc9c:	d903      	bls.n	800cca6 <_svfiprintf_r+0x1a6>
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0c6      	beq.n	800cc30 <_svfiprintf_r+0x130>
 800cca2:	9105      	str	r1, [sp, #20]
 800cca4:	e7c4      	b.n	800cc30 <_svfiprintf_r+0x130>
 800cca6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccaa:	4604      	mov	r4, r0
 800ccac:	2301      	movs	r3, #1
 800ccae:	e7f0      	b.n	800cc92 <_svfiprintf_r+0x192>
 800ccb0:	ab03      	add	r3, sp, #12
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	462a      	mov	r2, r5
 800ccb6:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <_svfiprintf_r+0x1f0>)
 800ccb8:	a904      	add	r1, sp, #16
 800ccba:	4638      	mov	r0, r7
 800ccbc:	f7fe fb60 	bl	800b380 <_printf_float>
 800ccc0:	1c42      	adds	r2, r0, #1
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	d1d6      	bne.n	800cc74 <_svfiprintf_r+0x174>
 800ccc6:	89ab      	ldrh	r3, [r5, #12]
 800ccc8:	065b      	lsls	r3, r3, #25
 800ccca:	f53f af2d 	bmi.w	800cb28 <_svfiprintf_r+0x28>
 800ccce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccd0:	e72c      	b.n	800cb2c <_svfiprintf_r+0x2c>
 800ccd2:	ab03      	add	r3, sp, #12
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <_svfiprintf_r+0x1f0>)
 800ccda:	a904      	add	r1, sp, #16
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f7fe fde7 	bl	800b8b0 <_printf_i>
 800cce2:	e7ed      	b.n	800ccc0 <_svfiprintf_r+0x1c0>
 800cce4:	0800e0d5 	.word	0x0800e0d5
 800cce8:	0800e0df 	.word	0x0800e0df
 800ccec:	0800b381 	.word	0x0800b381
 800ccf0:	0800ca49 	.word	0x0800ca49
 800ccf4:	0800e0db 	.word	0x0800e0db

0800ccf8 <malloc>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	@ (800cd04 <malloc+0xc>)
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	f000 b825 	b.w	800cd4c <_malloc_r>
 800cd02:	bf00      	nop
 800cd04:	20000118 	.word	0x20000118

0800cd08 <sbrk_aligned>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	4e0f      	ldr	r6, [pc, #60]	@ (800cd48 <sbrk_aligned+0x40>)
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	4605      	mov	r5, r0
 800cd12:	b911      	cbnz	r1, 800cd1a <sbrk_aligned+0x12>
 800cd14:	f000 fd7c 	bl	800d810 <_sbrk_r>
 800cd18:	6030      	str	r0, [r6, #0]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 fd77 	bl	800d810 <_sbrk_r>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	d103      	bne.n	800cd2e <sbrk_aligned+0x26>
 800cd26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	bd70      	pop	{r4, r5, r6, pc}
 800cd2e:	1cc4      	adds	r4, r0, #3
 800cd30:	f024 0403 	bic.w	r4, r4, #3
 800cd34:	42a0      	cmp	r0, r4
 800cd36:	d0f8      	beq.n	800cd2a <sbrk_aligned+0x22>
 800cd38:	1a21      	subs	r1, r4, r0
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 fd68 	bl	800d810 <_sbrk_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	d1f2      	bne.n	800cd2a <sbrk_aligned+0x22>
 800cd44:	e7ef      	b.n	800cd26 <sbrk_aligned+0x1e>
 800cd46:	bf00      	nop
 800cd48:	20002198 	.word	0x20002198

0800cd4c <_malloc_r>:
 800cd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd50:	1ccd      	adds	r5, r1, #3
 800cd52:	f025 0503 	bic.w	r5, r5, #3
 800cd56:	3508      	adds	r5, #8
 800cd58:	2d0c      	cmp	r5, #12
 800cd5a:	bf38      	it	cc
 800cd5c:	250c      	movcc	r5, #12
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	4606      	mov	r6, r0
 800cd62:	db01      	blt.n	800cd68 <_malloc_r+0x1c>
 800cd64:	42a9      	cmp	r1, r5
 800cd66:	d904      	bls.n	800cd72 <_malloc_r+0x26>
 800cd68:	230c      	movs	r3, #12
 800cd6a:	6033      	str	r3, [r6, #0]
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce48 <_malloc_r+0xfc>
 800cd76:	f000 f915 	bl	800cfa4 <__malloc_lock>
 800cd7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd7e:	461c      	mov	r4, r3
 800cd80:	bb44      	cbnz	r4, 800cdd4 <_malloc_r+0x88>
 800cd82:	4629      	mov	r1, r5
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff ffbf 	bl	800cd08 <sbrk_aligned>
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	d158      	bne.n	800ce42 <_malloc_r+0xf6>
 800cd90:	f8d8 4000 	ldr.w	r4, [r8]
 800cd94:	4627      	mov	r7, r4
 800cd96:	2f00      	cmp	r7, #0
 800cd98:	d143      	bne.n	800ce22 <_malloc_r+0xd6>
 800cd9a:	2c00      	cmp	r4, #0
 800cd9c:	d04b      	beq.n	800ce36 <_malloc_r+0xea>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	4639      	mov	r1, r7
 800cda2:	4630      	mov	r0, r6
 800cda4:	eb04 0903 	add.w	r9, r4, r3
 800cda8:	f000 fd32 	bl	800d810 <_sbrk_r>
 800cdac:	4581      	cmp	r9, r0
 800cdae:	d142      	bne.n	800ce36 <_malloc_r+0xea>
 800cdb0:	6821      	ldr	r1, [r4, #0]
 800cdb2:	1a6d      	subs	r5, r5, r1
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7ff ffa6 	bl	800cd08 <sbrk_aligned>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d03a      	beq.n	800ce36 <_malloc_r+0xea>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	442b      	add	r3, r5
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	bb62      	cbnz	r2, 800ce28 <_malloc_r+0xdc>
 800cdce:	f8c8 7000 	str.w	r7, [r8]
 800cdd2:	e00f      	b.n	800cdf4 <_malloc_r+0xa8>
 800cdd4:	6822      	ldr	r2, [r4, #0]
 800cdd6:	1b52      	subs	r2, r2, r5
 800cdd8:	d420      	bmi.n	800ce1c <_malloc_r+0xd0>
 800cdda:	2a0b      	cmp	r2, #11
 800cddc:	d917      	bls.n	800ce0e <_malloc_r+0xc2>
 800cdde:	1961      	adds	r1, r4, r5
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	6025      	str	r5, [r4, #0]
 800cde4:	bf18      	it	ne
 800cde6:	6059      	strne	r1, [r3, #4]
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	bf08      	it	eq
 800cdec:	f8c8 1000 	streq.w	r1, [r8]
 800cdf0:	5162      	str	r2, [r4, r5]
 800cdf2:	604b      	str	r3, [r1, #4]
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f000 f8db 	bl	800cfb0 <__malloc_unlock>
 800cdfa:	f104 000b 	add.w	r0, r4, #11
 800cdfe:	1d23      	adds	r3, r4, #4
 800ce00:	f020 0007 	bic.w	r0, r0, #7
 800ce04:	1ac2      	subs	r2, r0, r3
 800ce06:	bf1c      	itt	ne
 800ce08:	1a1b      	subne	r3, r3, r0
 800ce0a:	50a3      	strne	r3, [r4, r2]
 800ce0c:	e7af      	b.n	800cd6e <_malloc_r+0x22>
 800ce0e:	6862      	ldr	r2, [r4, #4]
 800ce10:	42a3      	cmp	r3, r4
 800ce12:	bf0c      	ite	eq
 800ce14:	f8c8 2000 	streq.w	r2, [r8]
 800ce18:	605a      	strne	r2, [r3, #4]
 800ce1a:	e7eb      	b.n	800cdf4 <_malloc_r+0xa8>
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	6864      	ldr	r4, [r4, #4]
 800ce20:	e7ae      	b.n	800cd80 <_malloc_r+0x34>
 800ce22:	463c      	mov	r4, r7
 800ce24:	687f      	ldr	r7, [r7, #4]
 800ce26:	e7b6      	b.n	800cd96 <_malloc_r+0x4a>
 800ce28:	461a      	mov	r2, r3
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	d1fb      	bne.n	800ce28 <_malloc_r+0xdc>
 800ce30:	2300      	movs	r3, #0
 800ce32:	6053      	str	r3, [r2, #4]
 800ce34:	e7de      	b.n	800cdf4 <_malloc_r+0xa8>
 800ce36:	230c      	movs	r3, #12
 800ce38:	6033      	str	r3, [r6, #0]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f000 f8b8 	bl	800cfb0 <__malloc_unlock>
 800ce40:	e794      	b.n	800cd6c <_malloc_r+0x20>
 800ce42:	6005      	str	r5, [r0, #0]
 800ce44:	e7d6      	b.n	800cdf4 <_malloc_r+0xa8>
 800ce46:	bf00      	nop
 800ce48:	2000219c 	.word	0x2000219c

0800ce4c <__sflush_r>:
 800ce4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	0716      	lsls	r6, r2, #28
 800ce56:	4605      	mov	r5, r0
 800ce58:	460c      	mov	r4, r1
 800ce5a:	d454      	bmi.n	800cf06 <__sflush_r+0xba>
 800ce5c:	684b      	ldr	r3, [r1, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dc02      	bgt.n	800ce68 <__sflush_r+0x1c>
 800ce62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dd48      	ble.n	800cefa <__sflush_r+0xae>
 800ce68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce6a:	2e00      	cmp	r6, #0
 800ce6c:	d045      	beq.n	800cefa <__sflush_r+0xae>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce74:	682f      	ldr	r7, [r5, #0]
 800ce76:	6a21      	ldr	r1, [r4, #32]
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	d030      	beq.n	800cede <__sflush_r+0x92>
 800ce7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	0759      	lsls	r1, r3, #29
 800ce82:	d505      	bpl.n	800ce90 <__sflush_r+0x44>
 800ce84:	6863      	ldr	r3, [r4, #4]
 800ce86:	1ad2      	subs	r2, r2, r3
 800ce88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce8a:	b10b      	cbz	r3, 800ce90 <__sflush_r+0x44>
 800ce8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	2300      	movs	r3, #0
 800ce92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce94:	6a21      	ldr	r1, [r4, #32]
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b0      	blx	r6
 800ce9a:	1c43      	adds	r3, r0, #1
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	d106      	bne.n	800ceae <__sflush_r+0x62>
 800cea0:	6829      	ldr	r1, [r5, #0]
 800cea2:	291d      	cmp	r1, #29
 800cea4:	d82b      	bhi.n	800cefe <__sflush_r+0xb2>
 800cea6:	4a2a      	ldr	r2, [pc, #168]	@ (800cf50 <__sflush_r+0x104>)
 800cea8:	40ca      	lsrs	r2, r1
 800ceaa:	07d6      	lsls	r6, r2, #31
 800ceac:	d527      	bpl.n	800cefe <__sflush_r+0xb2>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	6062      	str	r2, [r4, #4]
 800ceb2:	04d9      	lsls	r1, r3, #19
 800ceb4:	6922      	ldr	r2, [r4, #16]
 800ceb6:	6022      	str	r2, [r4, #0]
 800ceb8:	d504      	bpl.n	800cec4 <__sflush_r+0x78>
 800ceba:	1c42      	adds	r2, r0, #1
 800cebc:	d101      	bne.n	800cec2 <__sflush_r+0x76>
 800cebe:	682b      	ldr	r3, [r5, #0]
 800cec0:	b903      	cbnz	r3, 800cec4 <__sflush_r+0x78>
 800cec2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cec6:	602f      	str	r7, [r5, #0]
 800cec8:	b1b9      	cbz	r1, 800cefa <__sflush_r+0xae>
 800ceca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cece:	4299      	cmp	r1, r3
 800ced0:	d002      	beq.n	800ced8 <__sflush_r+0x8c>
 800ced2:	4628      	mov	r0, r5
 800ced4:	f000 fd0e 	bl	800d8f4 <_free_r>
 800ced8:	2300      	movs	r3, #0
 800ceda:	6363      	str	r3, [r4, #52]	@ 0x34
 800cedc:	e00d      	b.n	800cefa <__sflush_r+0xae>
 800cede:	2301      	movs	r3, #1
 800cee0:	4628      	mov	r0, r5
 800cee2:	47b0      	blx	r6
 800cee4:	4602      	mov	r2, r0
 800cee6:	1c50      	adds	r0, r2, #1
 800cee8:	d1c9      	bne.n	800ce7e <__sflush_r+0x32>
 800ceea:	682b      	ldr	r3, [r5, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d0c6      	beq.n	800ce7e <__sflush_r+0x32>
 800cef0:	2b1d      	cmp	r3, #29
 800cef2:	d001      	beq.n	800cef8 <__sflush_r+0xac>
 800cef4:	2b16      	cmp	r3, #22
 800cef6:	d11e      	bne.n	800cf36 <__sflush_r+0xea>
 800cef8:	602f      	str	r7, [r5, #0]
 800cefa:	2000      	movs	r0, #0
 800cefc:	e022      	b.n	800cf44 <__sflush_r+0xf8>
 800cefe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf02:	b21b      	sxth	r3, r3
 800cf04:	e01b      	b.n	800cf3e <__sflush_r+0xf2>
 800cf06:	690f      	ldr	r7, [r1, #16]
 800cf08:	2f00      	cmp	r7, #0
 800cf0a:	d0f6      	beq.n	800cefa <__sflush_r+0xae>
 800cf0c:	0793      	lsls	r3, r2, #30
 800cf0e:	680e      	ldr	r6, [r1, #0]
 800cf10:	bf08      	it	eq
 800cf12:	694b      	ldreq	r3, [r1, #20]
 800cf14:	600f      	str	r7, [r1, #0]
 800cf16:	bf18      	it	ne
 800cf18:	2300      	movne	r3, #0
 800cf1a:	eba6 0807 	sub.w	r8, r6, r7
 800cf1e:	608b      	str	r3, [r1, #8]
 800cf20:	f1b8 0f00 	cmp.w	r8, #0
 800cf24:	dde9      	ble.n	800cefa <__sflush_r+0xae>
 800cf26:	6a21      	ldr	r1, [r4, #32]
 800cf28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf2a:	4643      	mov	r3, r8
 800cf2c:	463a      	mov	r2, r7
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b0      	blx	r6
 800cf32:	2800      	cmp	r0, #0
 800cf34:	dc08      	bgt.n	800cf48 <__sflush_r+0xfc>
 800cf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf48:	4407      	add	r7, r0
 800cf4a:	eba8 0800 	sub.w	r8, r8, r0
 800cf4e:	e7e7      	b.n	800cf20 <__sflush_r+0xd4>
 800cf50:	20400001 	.word	0x20400001

0800cf54 <_fflush_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	690b      	ldr	r3, [r1, #16]
 800cf58:	4605      	mov	r5, r0
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	b913      	cbnz	r3, 800cf64 <_fflush_r+0x10>
 800cf5e:	2500      	movs	r5, #0
 800cf60:	4628      	mov	r0, r5
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	b118      	cbz	r0, 800cf6e <_fflush_r+0x1a>
 800cf66:	6a03      	ldr	r3, [r0, #32]
 800cf68:	b90b      	cbnz	r3, 800cf6e <_fflush_r+0x1a>
 800cf6a:	f7fe fea3 	bl	800bcb4 <__sinit>
 800cf6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d0f3      	beq.n	800cf5e <_fflush_r+0xa>
 800cf76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf78:	07d0      	lsls	r0, r2, #31
 800cf7a:	d404      	bmi.n	800cf86 <_fflush_r+0x32>
 800cf7c:	0599      	lsls	r1, r3, #22
 800cf7e:	d402      	bmi.n	800cf86 <_fflush_r+0x32>
 800cf80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf82:	f7fe ff00 	bl	800bd86 <__retarget_lock_acquire_recursive>
 800cf86:	4628      	mov	r0, r5
 800cf88:	4621      	mov	r1, r4
 800cf8a:	f7ff ff5f 	bl	800ce4c <__sflush_r>
 800cf8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf90:	07da      	lsls	r2, r3, #31
 800cf92:	4605      	mov	r5, r0
 800cf94:	d4e4      	bmi.n	800cf60 <_fflush_r+0xc>
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	059b      	lsls	r3, r3, #22
 800cf9a:	d4e1      	bmi.n	800cf60 <_fflush_r+0xc>
 800cf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf9e:	f7fe fef3 	bl	800bd88 <__retarget_lock_release_recursive>
 800cfa2:	e7dd      	b.n	800cf60 <_fflush_r+0xc>

0800cfa4 <__malloc_lock>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	@ (800cfac <__malloc_lock+0x8>)
 800cfa6:	f7fe beee 	b.w	800bd86 <__retarget_lock_acquire_recursive>
 800cfaa:	bf00      	nop
 800cfac:	20002194 	.word	0x20002194

0800cfb0 <__malloc_unlock>:
 800cfb0:	4801      	ldr	r0, [pc, #4]	@ (800cfb8 <__malloc_unlock+0x8>)
 800cfb2:	f7fe bee9 	b.w	800bd88 <__retarget_lock_release_recursive>
 800cfb6:	bf00      	nop
 800cfb8:	20002194 	.word	0x20002194

0800cfbc <_Balloc>:
 800cfbc:	b570      	push	{r4, r5, r6, lr}
 800cfbe:	69c6      	ldr	r6, [r0, #28]
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	460d      	mov	r5, r1
 800cfc4:	b976      	cbnz	r6, 800cfe4 <_Balloc+0x28>
 800cfc6:	2010      	movs	r0, #16
 800cfc8:	f7ff fe96 	bl	800ccf8 <malloc>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	61e0      	str	r0, [r4, #28]
 800cfd0:	b920      	cbnz	r0, 800cfdc <_Balloc+0x20>
 800cfd2:	4b18      	ldr	r3, [pc, #96]	@ (800d034 <_Balloc+0x78>)
 800cfd4:	4818      	ldr	r0, [pc, #96]	@ (800d038 <_Balloc+0x7c>)
 800cfd6:	216b      	movs	r1, #107	@ 0x6b
 800cfd8:	f000 fc5a 	bl	800d890 <__assert_func>
 800cfdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfe0:	6006      	str	r6, [r0, #0]
 800cfe2:	60c6      	str	r6, [r0, #12]
 800cfe4:	69e6      	ldr	r6, [r4, #28]
 800cfe6:	68f3      	ldr	r3, [r6, #12]
 800cfe8:	b183      	cbz	r3, 800d00c <_Balloc+0x50>
 800cfea:	69e3      	ldr	r3, [r4, #28]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cff2:	b9b8      	cbnz	r0, 800d024 <_Balloc+0x68>
 800cff4:	2101      	movs	r1, #1
 800cff6:	fa01 f605 	lsl.w	r6, r1, r5
 800cffa:	1d72      	adds	r2, r6, #5
 800cffc:	0092      	lsls	r2, r2, #2
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 fc64 	bl	800d8cc <_calloc_r>
 800d004:	b160      	cbz	r0, 800d020 <_Balloc+0x64>
 800d006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d00a:	e00e      	b.n	800d02a <_Balloc+0x6e>
 800d00c:	2221      	movs	r2, #33	@ 0x21
 800d00e:	2104      	movs	r1, #4
 800d010:	4620      	mov	r0, r4
 800d012:	f000 fc5b 	bl	800d8cc <_calloc_r>
 800d016:	69e3      	ldr	r3, [r4, #28]
 800d018:	60f0      	str	r0, [r6, #12]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e4      	bne.n	800cfea <_Balloc+0x2e>
 800d020:	2000      	movs	r0, #0
 800d022:	bd70      	pop	{r4, r5, r6, pc}
 800d024:	6802      	ldr	r2, [r0, #0]
 800d026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d02a:	2300      	movs	r3, #0
 800d02c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d030:	e7f7      	b.n	800d022 <_Balloc+0x66>
 800d032:	bf00      	nop
 800d034:	0800e055 	.word	0x0800e055
 800d038:	0800e0e6 	.word	0x0800e0e6

0800d03c <_Bfree>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	69c6      	ldr	r6, [r0, #28]
 800d040:	4605      	mov	r5, r0
 800d042:	460c      	mov	r4, r1
 800d044:	b976      	cbnz	r6, 800d064 <_Bfree+0x28>
 800d046:	2010      	movs	r0, #16
 800d048:	f7ff fe56 	bl	800ccf8 <malloc>
 800d04c:	4602      	mov	r2, r0
 800d04e:	61e8      	str	r0, [r5, #28]
 800d050:	b920      	cbnz	r0, 800d05c <_Bfree+0x20>
 800d052:	4b09      	ldr	r3, [pc, #36]	@ (800d078 <_Bfree+0x3c>)
 800d054:	4809      	ldr	r0, [pc, #36]	@ (800d07c <_Bfree+0x40>)
 800d056:	218f      	movs	r1, #143	@ 0x8f
 800d058:	f000 fc1a 	bl	800d890 <__assert_func>
 800d05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d060:	6006      	str	r6, [r0, #0]
 800d062:	60c6      	str	r6, [r0, #12]
 800d064:	b13c      	cbz	r4, 800d076 <_Bfree+0x3a>
 800d066:	69eb      	ldr	r3, [r5, #28]
 800d068:	6862      	ldr	r2, [r4, #4]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d070:	6021      	str	r1, [r4, #0]
 800d072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d076:	bd70      	pop	{r4, r5, r6, pc}
 800d078:	0800e055 	.word	0x0800e055
 800d07c:	0800e0e6 	.word	0x0800e0e6

0800d080 <__multadd>:
 800d080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d084:	690d      	ldr	r5, [r1, #16]
 800d086:	4607      	mov	r7, r0
 800d088:	460c      	mov	r4, r1
 800d08a:	461e      	mov	r6, r3
 800d08c:	f101 0c14 	add.w	ip, r1, #20
 800d090:	2000      	movs	r0, #0
 800d092:	f8dc 3000 	ldr.w	r3, [ip]
 800d096:	b299      	uxth	r1, r3
 800d098:	fb02 6101 	mla	r1, r2, r1, r6
 800d09c:	0c1e      	lsrs	r6, r3, #16
 800d09e:	0c0b      	lsrs	r3, r1, #16
 800d0a0:	fb02 3306 	mla	r3, r2, r6, r3
 800d0a4:	b289      	uxth	r1, r1
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0ac:	4285      	cmp	r5, r0
 800d0ae:	f84c 1b04 	str.w	r1, [ip], #4
 800d0b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0b6:	dcec      	bgt.n	800d092 <__multadd+0x12>
 800d0b8:	b30e      	cbz	r6, 800d0fe <__multadd+0x7e>
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	42ab      	cmp	r3, r5
 800d0be:	dc19      	bgt.n	800d0f4 <__multadd+0x74>
 800d0c0:	6861      	ldr	r1, [r4, #4]
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	3101      	adds	r1, #1
 800d0c6:	f7ff ff79 	bl	800cfbc <_Balloc>
 800d0ca:	4680      	mov	r8, r0
 800d0cc:	b928      	cbnz	r0, 800d0da <__multadd+0x5a>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d104 <__multadd+0x84>)
 800d0d2:	480d      	ldr	r0, [pc, #52]	@ (800d108 <__multadd+0x88>)
 800d0d4:	21ba      	movs	r1, #186	@ 0xba
 800d0d6:	f000 fbdb 	bl	800d890 <__assert_func>
 800d0da:	6922      	ldr	r2, [r4, #16]
 800d0dc:	3202      	adds	r2, #2
 800d0de:	f104 010c 	add.w	r1, r4, #12
 800d0e2:	0092      	lsls	r2, r2, #2
 800d0e4:	300c      	adds	r0, #12
 800d0e6:	f000 fbc5 	bl	800d874 <memcpy>
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	f7ff ffa5 	bl	800d03c <_Bfree>
 800d0f2:	4644      	mov	r4, r8
 800d0f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0f8:	3501      	adds	r5, #1
 800d0fa:	615e      	str	r6, [r3, #20]
 800d0fc:	6125      	str	r5, [r4, #16]
 800d0fe:	4620      	mov	r0, r4
 800d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d104:	0800e0c4 	.word	0x0800e0c4
 800d108:	0800e0e6 	.word	0x0800e0e6

0800d10c <__hi0bits>:
 800d10c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d110:	4603      	mov	r3, r0
 800d112:	bf36      	itet	cc
 800d114:	0403      	lslcc	r3, r0, #16
 800d116:	2000      	movcs	r0, #0
 800d118:	2010      	movcc	r0, #16
 800d11a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d11e:	bf3c      	itt	cc
 800d120:	021b      	lslcc	r3, r3, #8
 800d122:	3008      	addcc	r0, #8
 800d124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d128:	bf3c      	itt	cc
 800d12a:	011b      	lslcc	r3, r3, #4
 800d12c:	3004      	addcc	r0, #4
 800d12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d132:	bf3c      	itt	cc
 800d134:	009b      	lslcc	r3, r3, #2
 800d136:	3002      	addcc	r0, #2
 800d138:	2b00      	cmp	r3, #0
 800d13a:	db05      	blt.n	800d148 <__hi0bits+0x3c>
 800d13c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d140:	f100 0001 	add.w	r0, r0, #1
 800d144:	bf08      	it	eq
 800d146:	2020      	moveq	r0, #32
 800d148:	4770      	bx	lr

0800d14a <__lo0bits>:
 800d14a:	6803      	ldr	r3, [r0, #0]
 800d14c:	4602      	mov	r2, r0
 800d14e:	f013 0007 	ands.w	r0, r3, #7
 800d152:	d00b      	beq.n	800d16c <__lo0bits+0x22>
 800d154:	07d9      	lsls	r1, r3, #31
 800d156:	d421      	bmi.n	800d19c <__lo0bits+0x52>
 800d158:	0798      	lsls	r0, r3, #30
 800d15a:	bf49      	itett	mi
 800d15c:	085b      	lsrmi	r3, r3, #1
 800d15e:	089b      	lsrpl	r3, r3, #2
 800d160:	2001      	movmi	r0, #1
 800d162:	6013      	strmi	r3, [r2, #0]
 800d164:	bf5c      	itt	pl
 800d166:	6013      	strpl	r3, [r2, #0]
 800d168:	2002      	movpl	r0, #2
 800d16a:	4770      	bx	lr
 800d16c:	b299      	uxth	r1, r3
 800d16e:	b909      	cbnz	r1, 800d174 <__lo0bits+0x2a>
 800d170:	0c1b      	lsrs	r3, r3, #16
 800d172:	2010      	movs	r0, #16
 800d174:	b2d9      	uxtb	r1, r3
 800d176:	b909      	cbnz	r1, 800d17c <__lo0bits+0x32>
 800d178:	3008      	adds	r0, #8
 800d17a:	0a1b      	lsrs	r3, r3, #8
 800d17c:	0719      	lsls	r1, r3, #28
 800d17e:	bf04      	itt	eq
 800d180:	091b      	lsreq	r3, r3, #4
 800d182:	3004      	addeq	r0, #4
 800d184:	0799      	lsls	r1, r3, #30
 800d186:	bf04      	itt	eq
 800d188:	089b      	lsreq	r3, r3, #2
 800d18a:	3002      	addeq	r0, #2
 800d18c:	07d9      	lsls	r1, r3, #31
 800d18e:	d403      	bmi.n	800d198 <__lo0bits+0x4e>
 800d190:	085b      	lsrs	r3, r3, #1
 800d192:	f100 0001 	add.w	r0, r0, #1
 800d196:	d003      	beq.n	800d1a0 <__lo0bits+0x56>
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	4770      	bx	lr
 800d19c:	2000      	movs	r0, #0
 800d19e:	4770      	bx	lr
 800d1a0:	2020      	movs	r0, #32
 800d1a2:	4770      	bx	lr

0800d1a4 <__i2b>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	f7ff ff07 	bl	800cfbc <_Balloc>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	b928      	cbnz	r0, 800d1be <__i2b+0x1a>
 800d1b2:	4b05      	ldr	r3, [pc, #20]	@ (800d1c8 <__i2b+0x24>)
 800d1b4:	4805      	ldr	r0, [pc, #20]	@ (800d1cc <__i2b+0x28>)
 800d1b6:	f240 1145 	movw	r1, #325	@ 0x145
 800d1ba:	f000 fb69 	bl	800d890 <__assert_func>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	6144      	str	r4, [r0, #20]
 800d1c2:	6103      	str	r3, [r0, #16]
 800d1c4:	bd10      	pop	{r4, pc}
 800d1c6:	bf00      	nop
 800d1c8:	0800e0c4 	.word	0x0800e0c4
 800d1cc:	0800e0e6 	.word	0x0800e0e6

0800d1d0 <__multiply>:
 800d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d4:	4617      	mov	r7, r2
 800d1d6:	690a      	ldr	r2, [r1, #16]
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	bfa8      	it	ge
 800d1de:	463b      	movge	r3, r7
 800d1e0:	4689      	mov	r9, r1
 800d1e2:	bfa4      	itt	ge
 800d1e4:	460f      	movge	r7, r1
 800d1e6:	4699      	movge	r9, r3
 800d1e8:	693d      	ldr	r5, [r7, #16]
 800d1ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	6879      	ldr	r1, [r7, #4]
 800d1f2:	eb05 060a 	add.w	r6, r5, sl
 800d1f6:	42b3      	cmp	r3, r6
 800d1f8:	b085      	sub	sp, #20
 800d1fa:	bfb8      	it	lt
 800d1fc:	3101      	addlt	r1, #1
 800d1fe:	f7ff fedd 	bl	800cfbc <_Balloc>
 800d202:	b930      	cbnz	r0, 800d212 <__multiply+0x42>
 800d204:	4602      	mov	r2, r0
 800d206:	4b41      	ldr	r3, [pc, #260]	@ (800d30c <__multiply+0x13c>)
 800d208:	4841      	ldr	r0, [pc, #260]	@ (800d310 <__multiply+0x140>)
 800d20a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d20e:	f000 fb3f 	bl	800d890 <__assert_func>
 800d212:	f100 0414 	add.w	r4, r0, #20
 800d216:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d21a:	4623      	mov	r3, r4
 800d21c:	2200      	movs	r2, #0
 800d21e:	4573      	cmp	r3, lr
 800d220:	d320      	bcc.n	800d264 <__multiply+0x94>
 800d222:	f107 0814 	add.w	r8, r7, #20
 800d226:	f109 0114 	add.w	r1, r9, #20
 800d22a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d22e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d232:	9302      	str	r3, [sp, #8]
 800d234:	1beb      	subs	r3, r5, r7
 800d236:	3b15      	subs	r3, #21
 800d238:	f023 0303 	bic.w	r3, r3, #3
 800d23c:	3304      	adds	r3, #4
 800d23e:	3715      	adds	r7, #21
 800d240:	42bd      	cmp	r5, r7
 800d242:	bf38      	it	cc
 800d244:	2304      	movcc	r3, #4
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	9b02      	ldr	r3, [sp, #8]
 800d24a:	9103      	str	r1, [sp, #12]
 800d24c:	428b      	cmp	r3, r1
 800d24e:	d80c      	bhi.n	800d26a <__multiply+0x9a>
 800d250:	2e00      	cmp	r6, #0
 800d252:	dd03      	ble.n	800d25c <__multiply+0x8c>
 800d254:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d055      	beq.n	800d308 <__multiply+0x138>
 800d25c:	6106      	str	r6, [r0, #16]
 800d25e:	b005      	add	sp, #20
 800d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d264:	f843 2b04 	str.w	r2, [r3], #4
 800d268:	e7d9      	b.n	800d21e <__multiply+0x4e>
 800d26a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d26e:	f1ba 0f00 	cmp.w	sl, #0
 800d272:	d01f      	beq.n	800d2b4 <__multiply+0xe4>
 800d274:	46c4      	mov	ip, r8
 800d276:	46a1      	mov	r9, r4
 800d278:	2700      	movs	r7, #0
 800d27a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d27e:	f8d9 3000 	ldr.w	r3, [r9]
 800d282:	fa1f fb82 	uxth.w	fp, r2
 800d286:	b29b      	uxth	r3, r3
 800d288:	fb0a 330b 	mla	r3, sl, fp, r3
 800d28c:	443b      	add	r3, r7
 800d28e:	f8d9 7000 	ldr.w	r7, [r9]
 800d292:	0c12      	lsrs	r2, r2, #16
 800d294:	0c3f      	lsrs	r7, r7, #16
 800d296:	fb0a 7202 	mla	r2, sl, r2, r7
 800d29a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2a4:	4565      	cmp	r5, ip
 800d2a6:	f849 3b04 	str.w	r3, [r9], #4
 800d2aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d2ae:	d8e4      	bhi.n	800d27a <__multiply+0xaa>
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	50e7      	str	r7, [r4, r3]
 800d2b4:	9b03      	ldr	r3, [sp, #12]
 800d2b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d2ba:	3104      	adds	r1, #4
 800d2bc:	f1b9 0f00 	cmp.w	r9, #0
 800d2c0:	d020      	beq.n	800d304 <__multiply+0x134>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	4647      	mov	r7, r8
 800d2c6:	46a4      	mov	ip, r4
 800d2c8:	f04f 0a00 	mov.w	sl, #0
 800d2cc:	f8b7 b000 	ldrh.w	fp, [r7]
 800d2d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d2d4:	fb09 220b 	mla	r2, r9, fp, r2
 800d2d8:	4452      	add	r2, sl
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2e0:	f84c 3b04 	str.w	r3, [ip], #4
 800d2e4:	f857 3b04 	ldr.w	r3, [r7], #4
 800d2e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2ec:	f8bc 3000 	ldrh.w	r3, [ip]
 800d2f0:	fb09 330a 	mla	r3, r9, sl, r3
 800d2f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d2f8:	42bd      	cmp	r5, r7
 800d2fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2fe:	d8e5      	bhi.n	800d2cc <__multiply+0xfc>
 800d300:	9a01      	ldr	r2, [sp, #4]
 800d302:	50a3      	str	r3, [r4, r2]
 800d304:	3404      	adds	r4, #4
 800d306:	e79f      	b.n	800d248 <__multiply+0x78>
 800d308:	3e01      	subs	r6, #1
 800d30a:	e7a1      	b.n	800d250 <__multiply+0x80>
 800d30c:	0800e0c4 	.word	0x0800e0c4
 800d310:	0800e0e6 	.word	0x0800e0e6

0800d314 <__pow5mult>:
 800d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d318:	4615      	mov	r5, r2
 800d31a:	f012 0203 	ands.w	r2, r2, #3
 800d31e:	4607      	mov	r7, r0
 800d320:	460e      	mov	r6, r1
 800d322:	d007      	beq.n	800d334 <__pow5mult+0x20>
 800d324:	4c25      	ldr	r4, [pc, #148]	@ (800d3bc <__pow5mult+0xa8>)
 800d326:	3a01      	subs	r2, #1
 800d328:	2300      	movs	r3, #0
 800d32a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d32e:	f7ff fea7 	bl	800d080 <__multadd>
 800d332:	4606      	mov	r6, r0
 800d334:	10ad      	asrs	r5, r5, #2
 800d336:	d03d      	beq.n	800d3b4 <__pow5mult+0xa0>
 800d338:	69fc      	ldr	r4, [r7, #28]
 800d33a:	b97c      	cbnz	r4, 800d35c <__pow5mult+0x48>
 800d33c:	2010      	movs	r0, #16
 800d33e:	f7ff fcdb 	bl	800ccf8 <malloc>
 800d342:	4602      	mov	r2, r0
 800d344:	61f8      	str	r0, [r7, #28]
 800d346:	b928      	cbnz	r0, 800d354 <__pow5mult+0x40>
 800d348:	4b1d      	ldr	r3, [pc, #116]	@ (800d3c0 <__pow5mult+0xac>)
 800d34a:	481e      	ldr	r0, [pc, #120]	@ (800d3c4 <__pow5mult+0xb0>)
 800d34c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d350:	f000 fa9e 	bl	800d890 <__assert_func>
 800d354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d358:	6004      	str	r4, [r0, #0]
 800d35a:	60c4      	str	r4, [r0, #12]
 800d35c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d364:	b94c      	cbnz	r4, 800d37a <__pow5mult+0x66>
 800d366:	f240 2171 	movw	r1, #625	@ 0x271
 800d36a:	4638      	mov	r0, r7
 800d36c:	f7ff ff1a 	bl	800d1a4 <__i2b>
 800d370:	2300      	movs	r3, #0
 800d372:	f8c8 0008 	str.w	r0, [r8, #8]
 800d376:	4604      	mov	r4, r0
 800d378:	6003      	str	r3, [r0, #0]
 800d37a:	f04f 0900 	mov.w	r9, #0
 800d37e:	07eb      	lsls	r3, r5, #31
 800d380:	d50a      	bpl.n	800d398 <__pow5mult+0x84>
 800d382:	4631      	mov	r1, r6
 800d384:	4622      	mov	r2, r4
 800d386:	4638      	mov	r0, r7
 800d388:	f7ff ff22 	bl	800d1d0 <__multiply>
 800d38c:	4631      	mov	r1, r6
 800d38e:	4680      	mov	r8, r0
 800d390:	4638      	mov	r0, r7
 800d392:	f7ff fe53 	bl	800d03c <_Bfree>
 800d396:	4646      	mov	r6, r8
 800d398:	106d      	asrs	r5, r5, #1
 800d39a:	d00b      	beq.n	800d3b4 <__pow5mult+0xa0>
 800d39c:	6820      	ldr	r0, [r4, #0]
 800d39e:	b938      	cbnz	r0, 800d3b0 <__pow5mult+0x9c>
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f7ff ff13 	bl	800d1d0 <__multiply>
 800d3aa:	6020      	str	r0, [r4, #0]
 800d3ac:	f8c0 9000 	str.w	r9, [r0]
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	e7e4      	b.n	800d37e <__pow5mult+0x6a>
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0800e188 	.word	0x0800e188
 800d3c0:	0800e055 	.word	0x0800e055
 800d3c4:	0800e0e6 	.word	0x0800e0e6

0800d3c8 <__lshift>:
 800d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	6849      	ldr	r1, [r1, #4]
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3d6:	68a3      	ldr	r3, [r4, #8]
 800d3d8:	4607      	mov	r7, r0
 800d3da:	4691      	mov	r9, r2
 800d3dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3e0:	f108 0601 	add.w	r6, r8, #1
 800d3e4:	42b3      	cmp	r3, r6
 800d3e6:	db0b      	blt.n	800d400 <__lshift+0x38>
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f7ff fde7 	bl	800cfbc <_Balloc>
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	b948      	cbnz	r0, 800d406 <__lshift+0x3e>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	4b28      	ldr	r3, [pc, #160]	@ (800d498 <__lshift+0xd0>)
 800d3f6:	4829      	ldr	r0, [pc, #164]	@ (800d49c <__lshift+0xd4>)
 800d3f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d3fc:	f000 fa48 	bl	800d890 <__assert_func>
 800d400:	3101      	adds	r1, #1
 800d402:	005b      	lsls	r3, r3, #1
 800d404:	e7ee      	b.n	800d3e4 <__lshift+0x1c>
 800d406:	2300      	movs	r3, #0
 800d408:	f100 0114 	add.w	r1, r0, #20
 800d40c:	f100 0210 	add.w	r2, r0, #16
 800d410:	4618      	mov	r0, r3
 800d412:	4553      	cmp	r3, sl
 800d414:	db33      	blt.n	800d47e <__lshift+0xb6>
 800d416:	6920      	ldr	r0, [r4, #16]
 800d418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d41c:	f104 0314 	add.w	r3, r4, #20
 800d420:	f019 091f 	ands.w	r9, r9, #31
 800d424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d42c:	d02b      	beq.n	800d486 <__lshift+0xbe>
 800d42e:	f1c9 0e20 	rsb	lr, r9, #32
 800d432:	468a      	mov	sl, r1
 800d434:	2200      	movs	r2, #0
 800d436:	6818      	ldr	r0, [r3, #0]
 800d438:	fa00 f009 	lsl.w	r0, r0, r9
 800d43c:	4310      	orrs	r0, r2
 800d43e:	f84a 0b04 	str.w	r0, [sl], #4
 800d442:	f853 2b04 	ldr.w	r2, [r3], #4
 800d446:	459c      	cmp	ip, r3
 800d448:	fa22 f20e 	lsr.w	r2, r2, lr
 800d44c:	d8f3      	bhi.n	800d436 <__lshift+0x6e>
 800d44e:	ebac 0304 	sub.w	r3, ip, r4
 800d452:	3b15      	subs	r3, #21
 800d454:	f023 0303 	bic.w	r3, r3, #3
 800d458:	3304      	adds	r3, #4
 800d45a:	f104 0015 	add.w	r0, r4, #21
 800d45e:	4560      	cmp	r0, ip
 800d460:	bf88      	it	hi
 800d462:	2304      	movhi	r3, #4
 800d464:	50ca      	str	r2, [r1, r3]
 800d466:	b10a      	cbz	r2, 800d46c <__lshift+0xa4>
 800d468:	f108 0602 	add.w	r6, r8, #2
 800d46c:	3e01      	subs	r6, #1
 800d46e:	4638      	mov	r0, r7
 800d470:	612e      	str	r6, [r5, #16]
 800d472:	4621      	mov	r1, r4
 800d474:	f7ff fde2 	bl	800d03c <_Bfree>
 800d478:	4628      	mov	r0, r5
 800d47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d482:	3301      	adds	r3, #1
 800d484:	e7c5      	b.n	800d412 <__lshift+0x4a>
 800d486:	3904      	subs	r1, #4
 800d488:	f853 2b04 	ldr.w	r2, [r3], #4
 800d48c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d490:	459c      	cmp	ip, r3
 800d492:	d8f9      	bhi.n	800d488 <__lshift+0xc0>
 800d494:	e7ea      	b.n	800d46c <__lshift+0xa4>
 800d496:	bf00      	nop
 800d498:	0800e0c4 	.word	0x0800e0c4
 800d49c:	0800e0e6 	.word	0x0800e0e6

0800d4a0 <__mcmp>:
 800d4a0:	690a      	ldr	r2, [r1, #16]
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	6900      	ldr	r0, [r0, #16]
 800d4a6:	1a80      	subs	r0, r0, r2
 800d4a8:	b530      	push	{r4, r5, lr}
 800d4aa:	d10e      	bne.n	800d4ca <__mcmp+0x2a>
 800d4ac:	3314      	adds	r3, #20
 800d4ae:	3114      	adds	r1, #20
 800d4b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d4b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d4b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d4bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4c0:	4295      	cmp	r5, r2
 800d4c2:	d003      	beq.n	800d4cc <__mcmp+0x2c>
 800d4c4:	d205      	bcs.n	800d4d2 <__mcmp+0x32>
 800d4c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4ca:	bd30      	pop	{r4, r5, pc}
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	d3f3      	bcc.n	800d4b8 <__mcmp+0x18>
 800d4d0:	e7fb      	b.n	800d4ca <__mcmp+0x2a>
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	e7f9      	b.n	800d4ca <__mcmp+0x2a>
	...

0800d4d8 <__mdiff>:
 800d4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	4689      	mov	r9, r1
 800d4de:	4606      	mov	r6, r0
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	4648      	mov	r0, r9
 800d4e4:	4614      	mov	r4, r2
 800d4e6:	f7ff ffdb 	bl	800d4a0 <__mcmp>
 800d4ea:	1e05      	subs	r5, r0, #0
 800d4ec:	d112      	bne.n	800d514 <__mdiff+0x3c>
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff fd63 	bl	800cfbc <_Balloc>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	b928      	cbnz	r0, 800d506 <__mdiff+0x2e>
 800d4fa:	4b3f      	ldr	r3, [pc, #252]	@ (800d5f8 <__mdiff+0x120>)
 800d4fc:	f240 2137 	movw	r1, #567	@ 0x237
 800d500:	483e      	ldr	r0, [pc, #248]	@ (800d5fc <__mdiff+0x124>)
 800d502:	f000 f9c5 	bl	800d890 <__assert_func>
 800d506:	2301      	movs	r3, #1
 800d508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d50c:	4610      	mov	r0, r2
 800d50e:	b003      	add	sp, #12
 800d510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	bfbc      	itt	lt
 800d516:	464b      	movlt	r3, r9
 800d518:	46a1      	movlt	r9, r4
 800d51a:	4630      	mov	r0, r6
 800d51c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d520:	bfba      	itte	lt
 800d522:	461c      	movlt	r4, r3
 800d524:	2501      	movlt	r5, #1
 800d526:	2500      	movge	r5, #0
 800d528:	f7ff fd48 	bl	800cfbc <_Balloc>
 800d52c:	4602      	mov	r2, r0
 800d52e:	b918      	cbnz	r0, 800d538 <__mdiff+0x60>
 800d530:	4b31      	ldr	r3, [pc, #196]	@ (800d5f8 <__mdiff+0x120>)
 800d532:	f240 2145 	movw	r1, #581	@ 0x245
 800d536:	e7e3      	b.n	800d500 <__mdiff+0x28>
 800d538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d53c:	6926      	ldr	r6, [r4, #16]
 800d53e:	60c5      	str	r5, [r0, #12]
 800d540:	f109 0310 	add.w	r3, r9, #16
 800d544:	f109 0514 	add.w	r5, r9, #20
 800d548:	f104 0e14 	add.w	lr, r4, #20
 800d54c:	f100 0b14 	add.w	fp, r0, #20
 800d550:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d554:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	46d9      	mov	r9, fp
 800d55c:	f04f 0c00 	mov.w	ip, #0
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d566:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d56a:	9301      	str	r3, [sp, #4]
 800d56c:	fa1f f38a 	uxth.w	r3, sl
 800d570:	4619      	mov	r1, r3
 800d572:	b283      	uxth	r3, r0
 800d574:	1acb      	subs	r3, r1, r3
 800d576:	0c00      	lsrs	r0, r0, #16
 800d578:	4463      	add	r3, ip
 800d57a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d57e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d582:	b29b      	uxth	r3, r3
 800d584:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d588:	4576      	cmp	r6, lr
 800d58a:	f849 3b04 	str.w	r3, [r9], #4
 800d58e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d592:	d8e5      	bhi.n	800d560 <__mdiff+0x88>
 800d594:	1b33      	subs	r3, r6, r4
 800d596:	3b15      	subs	r3, #21
 800d598:	f023 0303 	bic.w	r3, r3, #3
 800d59c:	3415      	adds	r4, #21
 800d59e:	3304      	adds	r3, #4
 800d5a0:	42a6      	cmp	r6, r4
 800d5a2:	bf38      	it	cc
 800d5a4:	2304      	movcc	r3, #4
 800d5a6:	441d      	add	r5, r3
 800d5a8:	445b      	add	r3, fp
 800d5aa:	461e      	mov	r6, r3
 800d5ac:	462c      	mov	r4, r5
 800d5ae:	4544      	cmp	r4, r8
 800d5b0:	d30e      	bcc.n	800d5d0 <__mdiff+0xf8>
 800d5b2:	f108 0103 	add.w	r1, r8, #3
 800d5b6:	1b49      	subs	r1, r1, r5
 800d5b8:	f021 0103 	bic.w	r1, r1, #3
 800d5bc:	3d03      	subs	r5, #3
 800d5be:	45a8      	cmp	r8, r5
 800d5c0:	bf38      	it	cc
 800d5c2:	2100      	movcc	r1, #0
 800d5c4:	440b      	add	r3, r1
 800d5c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5ca:	b191      	cbz	r1, 800d5f2 <__mdiff+0x11a>
 800d5cc:	6117      	str	r7, [r2, #16]
 800d5ce:	e79d      	b.n	800d50c <__mdiff+0x34>
 800d5d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d5d4:	46e6      	mov	lr, ip
 800d5d6:	0c08      	lsrs	r0, r1, #16
 800d5d8:	fa1c fc81 	uxtah	ip, ip, r1
 800d5dc:	4471      	add	r1, lr
 800d5de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d5e2:	b289      	uxth	r1, r1
 800d5e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d5e8:	f846 1b04 	str.w	r1, [r6], #4
 800d5ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5f0:	e7dd      	b.n	800d5ae <__mdiff+0xd6>
 800d5f2:	3f01      	subs	r7, #1
 800d5f4:	e7e7      	b.n	800d5c6 <__mdiff+0xee>
 800d5f6:	bf00      	nop
 800d5f8:	0800e0c4 	.word	0x0800e0c4
 800d5fc:	0800e0e6 	.word	0x0800e0e6

0800d600 <__d2b>:
 800d600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d604:	460f      	mov	r7, r1
 800d606:	2101      	movs	r1, #1
 800d608:	ec59 8b10 	vmov	r8, r9, d0
 800d60c:	4616      	mov	r6, r2
 800d60e:	f7ff fcd5 	bl	800cfbc <_Balloc>
 800d612:	4604      	mov	r4, r0
 800d614:	b930      	cbnz	r0, 800d624 <__d2b+0x24>
 800d616:	4602      	mov	r2, r0
 800d618:	4b23      	ldr	r3, [pc, #140]	@ (800d6a8 <__d2b+0xa8>)
 800d61a:	4824      	ldr	r0, [pc, #144]	@ (800d6ac <__d2b+0xac>)
 800d61c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d620:	f000 f936 	bl	800d890 <__assert_func>
 800d624:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d62c:	b10d      	cbz	r5, 800d632 <__d2b+0x32>
 800d62e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	f1b8 0300 	subs.w	r3, r8, #0
 800d638:	d023      	beq.n	800d682 <__d2b+0x82>
 800d63a:	4668      	mov	r0, sp
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	f7ff fd84 	bl	800d14a <__lo0bits>
 800d642:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d646:	b1d0      	cbz	r0, 800d67e <__d2b+0x7e>
 800d648:	f1c0 0320 	rsb	r3, r0, #32
 800d64c:	fa02 f303 	lsl.w	r3, r2, r3
 800d650:	430b      	orrs	r3, r1
 800d652:	40c2      	lsrs	r2, r0
 800d654:	6163      	str	r3, [r4, #20]
 800d656:	9201      	str	r2, [sp, #4]
 800d658:	9b01      	ldr	r3, [sp, #4]
 800d65a:	61a3      	str	r3, [r4, #24]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bf0c      	ite	eq
 800d660:	2201      	moveq	r2, #1
 800d662:	2202      	movne	r2, #2
 800d664:	6122      	str	r2, [r4, #16]
 800d666:	b1a5      	cbz	r5, 800d692 <__d2b+0x92>
 800d668:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d66c:	4405      	add	r5, r0
 800d66e:	603d      	str	r5, [r7, #0]
 800d670:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d674:	6030      	str	r0, [r6, #0]
 800d676:	4620      	mov	r0, r4
 800d678:	b003      	add	sp, #12
 800d67a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d67e:	6161      	str	r1, [r4, #20]
 800d680:	e7ea      	b.n	800d658 <__d2b+0x58>
 800d682:	a801      	add	r0, sp, #4
 800d684:	f7ff fd61 	bl	800d14a <__lo0bits>
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	6163      	str	r3, [r4, #20]
 800d68c:	3020      	adds	r0, #32
 800d68e:	2201      	movs	r2, #1
 800d690:	e7e8      	b.n	800d664 <__d2b+0x64>
 800d692:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d696:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d69a:	6038      	str	r0, [r7, #0]
 800d69c:	6918      	ldr	r0, [r3, #16]
 800d69e:	f7ff fd35 	bl	800d10c <__hi0bits>
 800d6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6a6:	e7e5      	b.n	800d674 <__d2b+0x74>
 800d6a8:	0800e0c4 	.word	0x0800e0c4
 800d6ac:	0800e0e6 	.word	0x0800e0e6

0800d6b0 <__sread>:
 800d6b0:	b510      	push	{r4, lr}
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b8:	f000 f898 	bl	800d7ec <_read_r>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	bfab      	itete	ge
 800d6c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d6c4:	181b      	addge	r3, r3, r0
 800d6c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6ca:	bfac      	ite	ge
 800d6cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6ce:	81a3      	strhlt	r3, [r4, #12]
 800d6d0:	bd10      	pop	{r4, pc}

0800d6d2 <__swrite>:
 800d6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d6:	461f      	mov	r7, r3
 800d6d8:	898b      	ldrh	r3, [r1, #12]
 800d6da:	05db      	lsls	r3, r3, #23
 800d6dc:	4605      	mov	r5, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	4616      	mov	r6, r2
 800d6e2:	d505      	bpl.n	800d6f0 <__swrite+0x1e>
 800d6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f000 f86c 	bl	800d7c8 <_lseek_r>
 800d6f0:	89a3      	ldrh	r3, [r4, #12]
 800d6f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	4632      	mov	r2, r6
 800d6fe:	463b      	mov	r3, r7
 800d700:	4628      	mov	r0, r5
 800d702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d706:	f000 b893 	b.w	800d830 <_write_r>

0800d70a <__sseek>:
 800d70a:	b510      	push	{r4, lr}
 800d70c:	460c      	mov	r4, r1
 800d70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d712:	f000 f859 	bl	800d7c8 <_lseek_r>
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	bf15      	itete	ne
 800d71c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d71e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d726:	81a3      	strheq	r3, [r4, #12]
 800d728:	bf18      	it	ne
 800d72a:	81a3      	strhne	r3, [r4, #12]
 800d72c:	bd10      	pop	{r4, pc}

0800d72e <__sclose>:
 800d72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d732:	f000 b88f 	b.w	800d854 <_close_r>

0800d736 <_realloc_r>:
 800d736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73a:	4607      	mov	r7, r0
 800d73c:	4614      	mov	r4, r2
 800d73e:	460d      	mov	r5, r1
 800d740:	b921      	cbnz	r1, 800d74c <_realloc_r+0x16>
 800d742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d746:	4611      	mov	r1, r2
 800d748:	f7ff bb00 	b.w	800cd4c <_malloc_r>
 800d74c:	b92a      	cbnz	r2, 800d75a <_realloc_r+0x24>
 800d74e:	f000 f8d1 	bl	800d8f4 <_free_r>
 800d752:	4625      	mov	r5, r4
 800d754:	4628      	mov	r0, r5
 800d756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d75a:	f000 f927 	bl	800d9ac <_malloc_usable_size_r>
 800d75e:	4284      	cmp	r4, r0
 800d760:	4606      	mov	r6, r0
 800d762:	d802      	bhi.n	800d76a <_realloc_r+0x34>
 800d764:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d768:	d8f4      	bhi.n	800d754 <_realloc_r+0x1e>
 800d76a:	4621      	mov	r1, r4
 800d76c:	4638      	mov	r0, r7
 800d76e:	f7ff faed 	bl	800cd4c <_malloc_r>
 800d772:	4680      	mov	r8, r0
 800d774:	b908      	cbnz	r0, 800d77a <_realloc_r+0x44>
 800d776:	4645      	mov	r5, r8
 800d778:	e7ec      	b.n	800d754 <_realloc_r+0x1e>
 800d77a:	42b4      	cmp	r4, r6
 800d77c:	4622      	mov	r2, r4
 800d77e:	4629      	mov	r1, r5
 800d780:	bf28      	it	cs
 800d782:	4632      	movcs	r2, r6
 800d784:	f000 f876 	bl	800d874 <memcpy>
 800d788:	4629      	mov	r1, r5
 800d78a:	4638      	mov	r0, r7
 800d78c:	f000 f8b2 	bl	800d8f4 <_free_r>
 800d790:	e7f1      	b.n	800d776 <_realloc_r+0x40>

0800d792 <memmove>:
 800d792:	4288      	cmp	r0, r1
 800d794:	b510      	push	{r4, lr}
 800d796:	eb01 0402 	add.w	r4, r1, r2
 800d79a:	d902      	bls.n	800d7a2 <memmove+0x10>
 800d79c:	4284      	cmp	r4, r0
 800d79e:	4623      	mov	r3, r4
 800d7a0:	d807      	bhi.n	800d7b2 <memmove+0x20>
 800d7a2:	1e43      	subs	r3, r0, #1
 800d7a4:	42a1      	cmp	r1, r4
 800d7a6:	d008      	beq.n	800d7ba <memmove+0x28>
 800d7a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7b0:	e7f8      	b.n	800d7a4 <memmove+0x12>
 800d7b2:	4402      	add	r2, r0
 800d7b4:	4601      	mov	r1, r0
 800d7b6:	428a      	cmp	r2, r1
 800d7b8:	d100      	bne.n	800d7bc <memmove+0x2a>
 800d7ba:	bd10      	pop	{r4, pc}
 800d7bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7c4:	e7f7      	b.n	800d7b6 <memmove+0x24>
	...

0800d7c8 <_lseek_r>:
 800d7c8:	b538      	push	{r3, r4, r5, lr}
 800d7ca:	4d07      	ldr	r5, [pc, #28]	@ (800d7e8 <_lseek_r+0x20>)
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	4608      	mov	r0, r1
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	602a      	str	r2, [r5, #0]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	f7f4 f9f1 	bl	8001bbe <_lseek>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_lseek_r+0x1e>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_lseek_r+0x1e>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	200021a0 	.word	0x200021a0

0800d7ec <_read_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d07      	ldr	r5, [pc, #28]	@ (800d80c <_read_r+0x20>)
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	4608      	mov	r0, r1
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	602a      	str	r2, [r5, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f7f4 f97f 	bl	8001afe <_read>
 800d800:	1c43      	adds	r3, r0, #1
 800d802:	d102      	bne.n	800d80a <_read_r+0x1e>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	b103      	cbz	r3, 800d80a <_read_r+0x1e>
 800d808:	6023      	str	r3, [r4, #0]
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
 800d80c:	200021a0 	.word	0x200021a0

0800d810 <_sbrk_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d06      	ldr	r5, [pc, #24]	@ (800d82c <_sbrk_r+0x1c>)
 800d814:	2300      	movs	r3, #0
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f4 f9dc 	bl	8001bd8 <_sbrk>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_sbrk_r+0x1a>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_sbrk_r+0x1a>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	200021a0 	.word	0x200021a0

0800d830 <_write_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d07      	ldr	r5, [pc, #28]	@ (800d850 <_write_r+0x20>)
 800d834:	4604      	mov	r4, r0
 800d836:	4608      	mov	r0, r1
 800d838:	4611      	mov	r1, r2
 800d83a:	2200      	movs	r2, #0
 800d83c:	602a      	str	r2, [r5, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	f7f4 f97a 	bl	8001b38 <_write>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_write_r+0x1e>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_write_r+0x1e>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	200021a0 	.word	0x200021a0

0800d854 <_close_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4d06      	ldr	r5, [pc, #24]	@ (800d870 <_close_r+0x1c>)
 800d858:	2300      	movs	r3, #0
 800d85a:	4604      	mov	r4, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	602b      	str	r3, [r5, #0]
 800d860:	f7f4 f986 	bl	8001b70 <_close>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_close_r+0x1a>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_close_r+0x1a>
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	200021a0 	.word	0x200021a0

0800d874 <memcpy>:
 800d874:	440a      	add	r2, r1
 800d876:	4291      	cmp	r1, r2
 800d878:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d87c:	d100      	bne.n	800d880 <memcpy+0xc>
 800d87e:	4770      	bx	lr
 800d880:	b510      	push	{r4, lr}
 800d882:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d88a:	4291      	cmp	r1, r2
 800d88c:	d1f9      	bne.n	800d882 <memcpy+0xe>
 800d88e:	bd10      	pop	{r4, pc}

0800d890 <__assert_func>:
 800d890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d892:	4614      	mov	r4, r2
 800d894:	461a      	mov	r2, r3
 800d896:	4b09      	ldr	r3, [pc, #36]	@ (800d8bc <__assert_func+0x2c>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4605      	mov	r5, r0
 800d89c:	68d8      	ldr	r0, [r3, #12]
 800d89e:	b14c      	cbz	r4, 800d8b4 <__assert_func+0x24>
 800d8a0:	4b07      	ldr	r3, [pc, #28]	@ (800d8c0 <__assert_func+0x30>)
 800d8a2:	9100      	str	r1, [sp, #0]
 800d8a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8a8:	4906      	ldr	r1, [pc, #24]	@ (800d8c4 <__assert_func+0x34>)
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	f000 f886 	bl	800d9bc <fiprintf>
 800d8b0:	f000 f8a3 	bl	800d9fa <abort>
 800d8b4:	4b04      	ldr	r3, [pc, #16]	@ (800d8c8 <__assert_func+0x38>)
 800d8b6:	461c      	mov	r4, r3
 800d8b8:	e7f3      	b.n	800d8a2 <__assert_func+0x12>
 800d8ba:	bf00      	nop
 800d8bc:	20000118 	.word	0x20000118
 800d8c0:	0800e149 	.word	0x0800e149
 800d8c4:	0800e156 	.word	0x0800e156
 800d8c8:	0800e184 	.word	0x0800e184

0800d8cc <_calloc_r>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	fba1 5402 	umull	r5, r4, r1, r2
 800d8d2:	b934      	cbnz	r4, 800d8e2 <_calloc_r+0x16>
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7ff fa39 	bl	800cd4c <_malloc_r>
 800d8da:	4606      	mov	r6, r0
 800d8dc:	b928      	cbnz	r0, 800d8ea <_calloc_r+0x1e>
 800d8de:	4630      	mov	r0, r6
 800d8e0:	bd70      	pop	{r4, r5, r6, pc}
 800d8e2:	220c      	movs	r2, #12
 800d8e4:	6002      	str	r2, [r0, #0]
 800d8e6:	2600      	movs	r6, #0
 800d8e8:	e7f9      	b.n	800d8de <_calloc_r+0x12>
 800d8ea:	462a      	mov	r2, r5
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	f7fe fa17 	bl	800bd20 <memset>
 800d8f2:	e7f4      	b.n	800d8de <_calloc_r+0x12>

0800d8f4 <_free_r>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	d041      	beq.n	800d980 <_free_r+0x8c>
 800d8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d900:	1f0c      	subs	r4, r1, #4
 800d902:	2b00      	cmp	r3, #0
 800d904:	bfb8      	it	lt
 800d906:	18e4      	addlt	r4, r4, r3
 800d908:	f7ff fb4c 	bl	800cfa4 <__malloc_lock>
 800d90c:	4a1d      	ldr	r2, [pc, #116]	@ (800d984 <_free_r+0x90>)
 800d90e:	6813      	ldr	r3, [r2, #0]
 800d910:	b933      	cbnz	r3, 800d920 <_free_r+0x2c>
 800d912:	6063      	str	r3, [r4, #4]
 800d914:	6014      	str	r4, [r2, #0]
 800d916:	4628      	mov	r0, r5
 800d918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d91c:	f7ff bb48 	b.w	800cfb0 <__malloc_unlock>
 800d920:	42a3      	cmp	r3, r4
 800d922:	d908      	bls.n	800d936 <_free_r+0x42>
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	1821      	adds	r1, r4, r0
 800d928:	428b      	cmp	r3, r1
 800d92a:	bf01      	itttt	eq
 800d92c:	6819      	ldreq	r1, [r3, #0]
 800d92e:	685b      	ldreq	r3, [r3, #4]
 800d930:	1809      	addeq	r1, r1, r0
 800d932:	6021      	streq	r1, [r4, #0]
 800d934:	e7ed      	b.n	800d912 <_free_r+0x1e>
 800d936:	461a      	mov	r2, r3
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	b10b      	cbz	r3, 800d940 <_free_r+0x4c>
 800d93c:	42a3      	cmp	r3, r4
 800d93e:	d9fa      	bls.n	800d936 <_free_r+0x42>
 800d940:	6811      	ldr	r1, [r2, #0]
 800d942:	1850      	adds	r0, r2, r1
 800d944:	42a0      	cmp	r0, r4
 800d946:	d10b      	bne.n	800d960 <_free_r+0x6c>
 800d948:	6820      	ldr	r0, [r4, #0]
 800d94a:	4401      	add	r1, r0
 800d94c:	1850      	adds	r0, r2, r1
 800d94e:	4283      	cmp	r3, r0
 800d950:	6011      	str	r1, [r2, #0]
 800d952:	d1e0      	bne.n	800d916 <_free_r+0x22>
 800d954:	6818      	ldr	r0, [r3, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	6053      	str	r3, [r2, #4]
 800d95a:	4408      	add	r0, r1
 800d95c:	6010      	str	r0, [r2, #0]
 800d95e:	e7da      	b.n	800d916 <_free_r+0x22>
 800d960:	d902      	bls.n	800d968 <_free_r+0x74>
 800d962:	230c      	movs	r3, #12
 800d964:	602b      	str	r3, [r5, #0]
 800d966:	e7d6      	b.n	800d916 <_free_r+0x22>
 800d968:	6820      	ldr	r0, [r4, #0]
 800d96a:	1821      	adds	r1, r4, r0
 800d96c:	428b      	cmp	r3, r1
 800d96e:	bf04      	itt	eq
 800d970:	6819      	ldreq	r1, [r3, #0]
 800d972:	685b      	ldreq	r3, [r3, #4]
 800d974:	6063      	str	r3, [r4, #4]
 800d976:	bf04      	itt	eq
 800d978:	1809      	addeq	r1, r1, r0
 800d97a:	6021      	streq	r1, [r4, #0]
 800d97c:	6054      	str	r4, [r2, #4]
 800d97e:	e7ca      	b.n	800d916 <_free_r+0x22>
 800d980:	bd38      	pop	{r3, r4, r5, pc}
 800d982:	bf00      	nop
 800d984:	2000219c 	.word	0x2000219c

0800d988 <__ascii_mbtowc>:
 800d988:	b082      	sub	sp, #8
 800d98a:	b901      	cbnz	r1, 800d98e <__ascii_mbtowc+0x6>
 800d98c:	a901      	add	r1, sp, #4
 800d98e:	b142      	cbz	r2, 800d9a2 <__ascii_mbtowc+0x1a>
 800d990:	b14b      	cbz	r3, 800d9a6 <__ascii_mbtowc+0x1e>
 800d992:	7813      	ldrb	r3, [r2, #0]
 800d994:	600b      	str	r3, [r1, #0]
 800d996:	7812      	ldrb	r2, [r2, #0]
 800d998:	1e10      	subs	r0, r2, #0
 800d99a:	bf18      	it	ne
 800d99c:	2001      	movne	r0, #1
 800d99e:	b002      	add	sp, #8
 800d9a0:	4770      	bx	lr
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	e7fb      	b.n	800d99e <__ascii_mbtowc+0x16>
 800d9a6:	f06f 0001 	mvn.w	r0, #1
 800d9aa:	e7f8      	b.n	800d99e <__ascii_mbtowc+0x16>

0800d9ac <_malloc_usable_size_r>:
 800d9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b0:	1f18      	subs	r0, r3, #4
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	bfbc      	itt	lt
 800d9b6:	580b      	ldrlt	r3, [r1, r0]
 800d9b8:	18c0      	addlt	r0, r0, r3
 800d9ba:	4770      	bx	lr

0800d9bc <fiprintf>:
 800d9bc:	b40e      	push	{r1, r2, r3}
 800d9be:	b503      	push	{r0, r1, lr}
 800d9c0:	4601      	mov	r1, r0
 800d9c2:	ab03      	add	r3, sp, #12
 800d9c4:	4805      	ldr	r0, [pc, #20]	@ (800d9dc <fiprintf+0x20>)
 800d9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ca:	6800      	ldr	r0, [r0, #0]
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	f000 f845 	bl	800da5c <_vfiprintf_r>
 800d9d2:	b002      	add	sp, #8
 800d9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9d8:	b003      	add	sp, #12
 800d9da:	4770      	bx	lr
 800d9dc:	20000118 	.word	0x20000118

0800d9e0 <__ascii_wctomb>:
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	b141      	cbz	r1, 800d9f8 <__ascii_wctomb+0x18>
 800d9e6:	2aff      	cmp	r2, #255	@ 0xff
 800d9e8:	d904      	bls.n	800d9f4 <__ascii_wctomb+0x14>
 800d9ea:	228a      	movs	r2, #138	@ 0x8a
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9f2:	4770      	bx	lr
 800d9f4:	700a      	strb	r2, [r1, #0]
 800d9f6:	2001      	movs	r0, #1
 800d9f8:	4770      	bx	lr

0800d9fa <abort>:
 800d9fa:	b508      	push	{r3, lr}
 800d9fc:	2006      	movs	r0, #6
 800d9fe:	f000 fa63 	bl	800dec8 <raise>
 800da02:	2001      	movs	r0, #1
 800da04:	f7f4 f870 	bl	8001ae8 <_exit>

0800da08 <__sfputc_r>:
 800da08:	6893      	ldr	r3, [r2, #8]
 800da0a:	3b01      	subs	r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	b410      	push	{r4}
 800da10:	6093      	str	r3, [r2, #8]
 800da12:	da08      	bge.n	800da26 <__sfputc_r+0x1e>
 800da14:	6994      	ldr	r4, [r2, #24]
 800da16:	42a3      	cmp	r3, r4
 800da18:	db01      	blt.n	800da1e <__sfputc_r+0x16>
 800da1a:	290a      	cmp	r1, #10
 800da1c:	d103      	bne.n	800da26 <__sfputc_r+0x1e>
 800da1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da22:	f000 b933 	b.w	800dc8c <__swbuf_r>
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	1c58      	adds	r0, r3, #1
 800da2a:	6010      	str	r0, [r2, #0]
 800da2c:	7019      	strb	r1, [r3, #0]
 800da2e:	4608      	mov	r0, r1
 800da30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <__sfputs_r>:
 800da36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da38:	4606      	mov	r6, r0
 800da3a:	460f      	mov	r7, r1
 800da3c:	4614      	mov	r4, r2
 800da3e:	18d5      	adds	r5, r2, r3
 800da40:	42ac      	cmp	r4, r5
 800da42:	d101      	bne.n	800da48 <__sfputs_r+0x12>
 800da44:	2000      	movs	r0, #0
 800da46:	e007      	b.n	800da58 <__sfputs_r+0x22>
 800da48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da4c:	463a      	mov	r2, r7
 800da4e:	4630      	mov	r0, r6
 800da50:	f7ff ffda 	bl	800da08 <__sfputc_r>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d1f3      	bne.n	800da40 <__sfputs_r+0xa>
 800da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da5c <_vfiprintf_r>:
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	460d      	mov	r5, r1
 800da62:	b09d      	sub	sp, #116	@ 0x74
 800da64:	4614      	mov	r4, r2
 800da66:	4698      	mov	r8, r3
 800da68:	4606      	mov	r6, r0
 800da6a:	b118      	cbz	r0, 800da74 <_vfiprintf_r+0x18>
 800da6c:	6a03      	ldr	r3, [r0, #32]
 800da6e:	b90b      	cbnz	r3, 800da74 <_vfiprintf_r+0x18>
 800da70:	f7fe f920 	bl	800bcb4 <__sinit>
 800da74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da76:	07d9      	lsls	r1, r3, #31
 800da78:	d405      	bmi.n	800da86 <_vfiprintf_r+0x2a>
 800da7a:	89ab      	ldrh	r3, [r5, #12]
 800da7c:	059a      	lsls	r2, r3, #22
 800da7e:	d402      	bmi.n	800da86 <_vfiprintf_r+0x2a>
 800da80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da82:	f7fe f980 	bl	800bd86 <__retarget_lock_acquire_recursive>
 800da86:	89ab      	ldrh	r3, [r5, #12]
 800da88:	071b      	lsls	r3, r3, #28
 800da8a:	d501      	bpl.n	800da90 <_vfiprintf_r+0x34>
 800da8c:	692b      	ldr	r3, [r5, #16]
 800da8e:	b99b      	cbnz	r3, 800dab8 <_vfiprintf_r+0x5c>
 800da90:	4629      	mov	r1, r5
 800da92:	4630      	mov	r0, r6
 800da94:	f000 f938 	bl	800dd08 <__swsetup_r>
 800da98:	b170      	cbz	r0, 800dab8 <_vfiprintf_r+0x5c>
 800da9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da9c:	07dc      	lsls	r4, r3, #31
 800da9e:	d504      	bpl.n	800daaa <_vfiprintf_r+0x4e>
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daa4:	b01d      	add	sp, #116	@ 0x74
 800daa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daaa:	89ab      	ldrh	r3, [r5, #12]
 800daac:	0598      	lsls	r0, r3, #22
 800daae:	d4f7      	bmi.n	800daa0 <_vfiprintf_r+0x44>
 800dab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dab2:	f7fe f969 	bl	800bd88 <__retarget_lock_release_recursive>
 800dab6:	e7f3      	b.n	800daa0 <_vfiprintf_r+0x44>
 800dab8:	2300      	movs	r3, #0
 800daba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dabc:	2320      	movs	r3, #32
 800dabe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dac6:	2330      	movs	r3, #48	@ 0x30
 800dac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc78 <_vfiprintf_r+0x21c>
 800dacc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dad0:	f04f 0901 	mov.w	r9, #1
 800dad4:	4623      	mov	r3, r4
 800dad6:	469a      	mov	sl, r3
 800dad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dadc:	b10a      	cbz	r2, 800dae2 <_vfiprintf_r+0x86>
 800dade:	2a25      	cmp	r2, #37	@ 0x25
 800dae0:	d1f9      	bne.n	800dad6 <_vfiprintf_r+0x7a>
 800dae2:	ebba 0b04 	subs.w	fp, sl, r4
 800dae6:	d00b      	beq.n	800db00 <_vfiprintf_r+0xa4>
 800dae8:	465b      	mov	r3, fp
 800daea:	4622      	mov	r2, r4
 800daec:	4629      	mov	r1, r5
 800daee:	4630      	mov	r0, r6
 800daf0:	f7ff ffa1 	bl	800da36 <__sfputs_r>
 800daf4:	3001      	adds	r0, #1
 800daf6:	f000 80a7 	beq.w	800dc48 <_vfiprintf_r+0x1ec>
 800dafa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dafc:	445a      	add	r2, fp
 800dafe:	9209      	str	r2, [sp, #36]	@ 0x24
 800db00:	f89a 3000 	ldrb.w	r3, [sl]
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 809f 	beq.w	800dc48 <_vfiprintf_r+0x1ec>
 800db0a:	2300      	movs	r3, #0
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db14:	f10a 0a01 	add.w	sl, sl, #1
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	9307      	str	r3, [sp, #28]
 800db1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db20:	931a      	str	r3, [sp, #104]	@ 0x68
 800db22:	4654      	mov	r4, sl
 800db24:	2205      	movs	r2, #5
 800db26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db2a:	4853      	ldr	r0, [pc, #332]	@ (800dc78 <_vfiprintf_r+0x21c>)
 800db2c:	f7f2 fb70 	bl	8000210 <memchr>
 800db30:	9a04      	ldr	r2, [sp, #16]
 800db32:	b9d8      	cbnz	r0, 800db6c <_vfiprintf_r+0x110>
 800db34:	06d1      	lsls	r1, r2, #27
 800db36:	bf44      	itt	mi
 800db38:	2320      	movmi	r3, #32
 800db3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db3e:	0713      	lsls	r3, r2, #28
 800db40:	bf44      	itt	mi
 800db42:	232b      	movmi	r3, #43	@ 0x2b
 800db44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db48:	f89a 3000 	ldrb.w	r3, [sl]
 800db4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800db4e:	d015      	beq.n	800db7c <_vfiprintf_r+0x120>
 800db50:	9a07      	ldr	r2, [sp, #28]
 800db52:	4654      	mov	r4, sl
 800db54:	2000      	movs	r0, #0
 800db56:	f04f 0c0a 	mov.w	ip, #10
 800db5a:	4621      	mov	r1, r4
 800db5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db60:	3b30      	subs	r3, #48	@ 0x30
 800db62:	2b09      	cmp	r3, #9
 800db64:	d94b      	bls.n	800dbfe <_vfiprintf_r+0x1a2>
 800db66:	b1b0      	cbz	r0, 800db96 <_vfiprintf_r+0x13a>
 800db68:	9207      	str	r2, [sp, #28]
 800db6a:	e014      	b.n	800db96 <_vfiprintf_r+0x13a>
 800db6c:	eba0 0308 	sub.w	r3, r0, r8
 800db70:	fa09 f303 	lsl.w	r3, r9, r3
 800db74:	4313      	orrs	r3, r2
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	46a2      	mov	sl, r4
 800db7a:	e7d2      	b.n	800db22 <_vfiprintf_r+0xc6>
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	1d19      	adds	r1, r3, #4
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	9103      	str	r1, [sp, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	bfbb      	ittet	lt
 800db88:	425b      	neglt	r3, r3
 800db8a:	f042 0202 	orrlt.w	r2, r2, #2
 800db8e:	9307      	strge	r3, [sp, #28]
 800db90:	9307      	strlt	r3, [sp, #28]
 800db92:	bfb8      	it	lt
 800db94:	9204      	strlt	r2, [sp, #16]
 800db96:	7823      	ldrb	r3, [r4, #0]
 800db98:	2b2e      	cmp	r3, #46	@ 0x2e
 800db9a:	d10a      	bne.n	800dbb2 <_vfiprintf_r+0x156>
 800db9c:	7863      	ldrb	r3, [r4, #1]
 800db9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dba0:	d132      	bne.n	800dc08 <_vfiprintf_r+0x1ac>
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	1d1a      	adds	r2, r3, #4
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	9203      	str	r2, [sp, #12]
 800dbaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbae:	3402      	adds	r4, #2
 800dbb0:	9305      	str	r3, [sp, #20]
 800dbb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc88 <_vfiprintf_r+0x22c>
 800dbb6:	7821      	ldrb	r1, [r4, #0]
 800dbb8:	2203      	movs	r2, #3
 800dbba:	4650      	mov	r0, sl
 800dbbc:	f7f2 fb28 	bl	8000210 <memchr>
 800dbc0:	b138      	cbz	r0, 800dbd2 <_vfiprintf_r+0x176>
 800dbc2:	9b04      	ldr	r3, [sp, #16]
 800dbc4:	eba0 000a 	sub.w	r0, r0, sl
 800dbc8:	2240      	movs	r2, #64	@ 0x40
 800dbca:	4082      	lsls	r2, r0
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	3401      	adds	r4, #1
 800dbd0:	9304      	str	r3, [sp, #16]
 800dbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd6:	4829      	ldr	r0, [pc, #164]	@ (800dc7c <_vfiprintf_r+0x220>)
 800dbd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbdc:	2206      	movs	r2, #6
 800dbde:	f7f2 fb17 	bl	8000210 <memchr>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d03f      	beq.n	800dc66 <_vfiprintf_r+0x20a>
 800dbe6:	4b26      	ldr	r3, [pc, #152]	@ (800dc80 <_vfiprintf_r+0x224>)
 800dbe8:	bb1b      	cbnz	r3, 800dc32 <_vfiprintf_r+0x1d6>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	3307      	adds	r3, #7
 800dbee:	f023 0307 	bic.w	r3, r3, #7
 800dbf2:	3308      	adds	r3, #8
 800dbf4:	9303      	str	r3, [sp, #12]
 800dbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf8:	443b      	add	r3, r7
 800dbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbfc:	e76a      	b.n	800dad4 <_vfiprintf_r+0x78>
 800dbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc02:	460c      	mov	r4, r1
 800dc04:	2001      	movs	r0, #1
 800dc06:	e7a8      	b.n	800db5a <_vfiprintf_r+0xfe>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	3401      	adds	r4, #1
 800dc0c:	9305      	str	r3, [sp, #20]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	f04f 0c0a 	mov.w	ip, #10
 800dc14:	4620      	mov	r0, r4
 800dc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc1a:	3a30      	subs	r2, #48	@ 0x30
 800dc1c:	2a09      	cmp	r2, #9
 800dc1e:	d903      	bls.n	800dc28 <_vfiprintf_r+0x1cc>
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d0c6      	beq.n	800dbb2 <_vfiprintf_r+0x156>
 800dc24:	9105      	str	r1, [sp, #20]
 800dc26:	e7c4      	b.n	800dbb2 <_vfiprintf_r+0x156>
 800dc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e7f0      	b.n	800dc14 <_vfiprintf_r+0x1b8>
 800dc32:	ab03      	add	r3, sp, #12
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	462a      	mov	r2, r5
 800dc38:	4b12      	ldr	r3, [pc, #72]	@ (800dc84 <_vfiprintf_r+0x228>)
 800dc3a:	a904      	add	r1, sp, #16
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f7fd fb9f 	bl	800b380 <_printf_float>
 800dc42:	4607      	mov	r7, r0
 800dc44:	1c78      	adds	r0, r7, #1
 800dc46:	d1d6      	bne.n	800dbf6 <_vfiprintf_r+0x19a>
 800dc48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc4a:	07d9      	lsls	r1, r3, #31
 800dc4c:	d405      	bmi.n	800dc5a <_vfiprintf_r+0x1fe>
 800dc4e:	89ab      	ldrh	r3, [r5, #12]
 800dc50:	059a      	lsls	r2, r3, #22
 800dc52:	d402      	bmi.n	800dc5a <_vfiprintf_r+0x1fe>
 800dc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc56:	f7fe f897 	bl	800bd88 <__retarget_lock_release_recursive>
 800dc5a:	89ab      	ldrh	r3, [r5, #12]
 800dc5c:	065b      	lsls	r3, r3, #25
 800dc5e:	f53f af1f 	bmi.w	800daa0 <_vfiprintf_r+0x44>
 800dc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc64:	e71e      	b.n	800daa4 <_vfiprintf_r+0x48>
 800dc66:	ab03      	add	r3, sp, #12
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	462a      	mov	r2, r5
 800dc6c:	4b05      	ldr	r3, [pc, #20]	@ (800dc84 <_vfiprintf_r+0x228>)
 800dc6e:	a904      	add	r1, sp, #16
 800dc70:	4630      	mov	r0, r6
 800dc72:	f7fd fe1d 	bl	800b8b0 <_printf_i>
 800dc76:	e7e4      	b.n	800dc42 <_vfiprintf_r+0x1e6>
 800dc78:	0800e0d5 	.word	0x0800e0d5
 800dc7c:	0800e0df 	.word	0x0800e0df
 800dc80:	0800b381 	.word	0x0800b381
 800dc84:	0800da37 	.word	0x0800da37
 800dc88:	0800e0db 	.word	0x0800e0db

0800dc8c <__swbuf_r>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	460e      	mov	r6, r1
 800dc90:	4614      	mov	r4, r2
 800dc92:	4605      	mov	r5, r0
 800dc94:	b118      	cbz	r0, 800dc9e <__swbuf_r+0x12>
 800dc96:	6a03      	ldr	r3, [r0, #32]
 800dc98:	b90b      	cbnz	r3, 800dc9e <__swbuf_r+0x12>
 800dc9a:	f7fe f80b 	bl	800bcb4 <__sinit>
 800dc9e:	69a3      	ldr	r3, [r4, #24]
 800dca0:	60a3      	str	r3, [r4, #8]
 800dca2:	89a3      	ldrh	r3, [r4, #12]
 800dca4:	071a      	lsls	r2, r3, #28
 800dca6:	d501      	bpl.n	800dcac <__swbuf_r+0x20>
 800dca8:	6923      	ldr	r3, [r4, #16]
 800dcaa:	b943      	cbnz	r3, 800dcbe <__swbuf_r+0x32>
 800dcac:	4621      	mov	r1, r4
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f000 f82a 	bl	800dd08 <__swsetup_r>
 800dcb4:	b118      	cbz	r0, 800dcbe <__swbuf_r+0x32>
 800dcb6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dcba:	4638      	mov	r0, r7
 800dcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	6922      	ldr	r2, [r4, #16]
 800dcc2:	1a98      	subs	r0, r3, r2
 800dcc4:	6963      	ldr	r3, [r4, #20]
 800dcc6:	b2f6      	uxtb	r6, r6
 800dcc8:	4283      	cmp	r3, r0
 800dcca:	4637      	mov	r7, r6
 800dccc:	dc05      	bgt.n	800dcda <__swbuf_r+0x4e>
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f7ff f93f 	bl	800cf54 <_fflush_r>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d1ed      	bne.n	800dcb6 <__swbuf_r+0x2a>
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	60a3      	str	r3, [r4, #8]
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	6022      	str	r2, [r4, #0]
 800dce6:	701e      	strb	r6, [r3, #0]
 800dce8:	6962      	ldr	r2, [r4, #20]
 800dcea:	1c43      	adds	r3, r0, #1
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d004      	beq.n	800dcfa <__swbuf_r+0x6e>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	07db      	lsls	r3, r3, #31
 800dcf4:	d5e1      	bpl.n	800dcba <__swbuf_r+0x2e>
 800dcf6:	2e0a      	cmp	r6, #10
 800dcf8:	d1df      	bne.n	800dcba <__swbuf_r+0x2e>
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f7ff f929 	bl	800cf54 <_fflush_r>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0d9      	beq.n	800dcba <__swbuf_r+0x2e>
 800dd06:	e7d6      	b.n	800dcb6 <__swbuf_r+0x2a>

0800dd08 <__swsetup_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4b29      	ldr	r3, [pc, #164]	@ (800ddb0 <__swsetup_r+0xa8>)
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	460c      	mov	r4, r1
 800dd12:	b118      	cbz	r0, 800dd1c <__swsetup_r+0x14>
 800dd14:	6a03      	ldr	r3, [r0, #32]
 800dd16:	b90b      	cbnz	r3, 800dd1c <__swsetup_r+0x14>
 800dd18:	f7fd ffcc 	bl	800bcb4 <__sinit>
 800dd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd20:	0719      	lsls	r1, r3, #28
 800dd22:	d422      	bmi.n	800dd6a <__swsetup_r+0x62>
 800dd24:	06da      	lsls	r2, r3, #27
 800dd26:	d407      	bmi.n	800dd38 <__swsetup_r+0x30>
 800dd28:	2209      	movs	r2, #9
 800dd2a:	602a      	str	r2, [r5, #0]
 800dd2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd30:	81a3      	strh	r3, [r4, #12]
 800dd32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd36:	e033      	b.n	800dda0 <__swsetup_r+0x98>
 800dd38:	0758      	lsls	r0, r3, #29
 800dd3a:	d512      	bpl.n	800dd62 <__swsetup_r+0x5a>
 800dd3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd3e:	b141      	cbz	r1, 800dd52 <__swsetup_r+0x4a>
 800dd40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd44:	4299      	cmp	r1, r3
 800dd46:	d002      	beq.n	800dd4e <__swsetup_r+0x46>
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f7ff fdd3 	bl	800d8f4 <_free_r>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd58:	81a3      	strh	r3, [r4, #12]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	6063      	str	r3, [r4, #4]
 800dd5e:	6923      	ldr	r3, [r4, #16]
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f043 0308 	orr.w	r3, r3, #8
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	b94b      	cbnz	r3, 800dd82 <__swsetup_r+0x7a>
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd78:	d003      	beq.n	800dd82 <__swsetup_r+0x7a>
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	f000 f83f 	bl	800de00 <__smakebuf_r>
 800dd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd86:	f013 0201 	ands.w	r2, r3, #1
 800dd8a:	d00a      	beq.n	800dda2 <__swsetup_r+0x9a>
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	60a2      	str	r2, [r4, #8]
 800dd90:	6962      	ldr	r2, [r4, #20]
 800dd92:	4252      	negs	r2, r2
 800dd94:	61a2      	str	r2, [r4, #24]
 800dd96:	6922      	ldr	r2, [r4, #16]
 800dd98:	b942      	cbnz	r2, 800ddac <__swsetup_r+0xa4>
 800dd9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd9e:	d1c5      	bne.n	800dd2c <__swsetup_r+0x24>
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	0799      	lsls	r1, r3, #30
 800dda4:	bf58      	it	pl
 800dda6:	6962      	ldrpl	r2, [r4, #20]
 800dda8:	60a2      	str	r2, [r4, #8]
 800ddaa:	e7f4      	b.n	800dd96 <__swsetup_r+0x8e>
 800ddac:	2000      	movs	r0, #0
 800ddae:	e7f7      	b.n	800dda0 <__swsetup_r+0x98>
 800ddb0:	20000118 	.word	0x20000118

0800ddb4 <__swhatbuf_r>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddbc:	2900      	cmp	r1, #0
 800ddbe:	b096      	sub	sp, #88	@ 0x58
 800ddc0:	4615      	mov	r5, r2
 800ddc2:	461e      	mov	r6, r3
 800ddc4:	da0d      	bge.n	800dde2 <__swhatbuf_r+0x2e>
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddcc:	f04f 0100 	mov.w	r1, #0
 800ddd0:	bf14      	ite	ne
 800ddd2:	2340      	movne	r3, #64	@ 0x40
 800ddd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddd8:	2000      	movs	r0, #0
 800ddda:	6031      	str	r1, [r6, #0]
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	b016      	add	sp, #88	@ 0x58
 800dde0:	bd70      	pop	{r4, r5, r6, pc}
 800dde2:	466a      	mov	r2, sp
 800dde4:	f000 f89c 	bl	800df20 <_fstat_r>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	dbec      	blt.n	800ddc6 <__swhatbuf_r+0x12>
 800ddec:	9901      	ldr	r1, [sp, #4]
 800ddee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddf6:	4259      	negs	r1, r3
 800ddf8:	4159      	adcs	r1, r3
 800ddfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddfe:	e7eb      	b.n	800ddd8 <__swhatbuf_r+0x24>

0800de00 <__smakebuf_r>:
 800de00:	898b      	ldrh	r3, [r1, #12]
 800de02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de04:	079d      	lsls	r5, r3, #30
 800de06:	4606      	mov	r6, r0
 800de08:	460c      	mov	r4, r1
 800de0a:	d507      	bpl.n	800de1c <__smakebuf_r+0x1c>
 800de0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	2301      	movs	r3, #1
 800de16:	6163      	str	r3, [r4, #20]
 800de18:	b003      	add	sp, #12
 800de1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de1c:	ab01      	add	r3, sp, #4
 800de1e:	466a      	mov	r2, sp
 800de20:	f7ff ffc8 	bl	800ddb4 <__swhatbuf_r>
 800de24:	9f00      	ldr	r7, [sp, #0]
 800de26:	4605      	mov	r5, r0
 800de28:	4639      	mov	r1, r7
 800de2a:	4630      	mov	r0, r6
 800de2c:	f7fe ff8e 	bl	800cd4c <_malloc_r>
 800de30:	b948      	cbnz	r0, 800de46 <__smakebuf_r+0x46>
 800de32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de36:	059a      	lsls	r2, r3, #22
 800de38:	d4ee      	bmi.n	800de18 <__smakebuf_r+0x18>
 800de3a:	f023 0303 	bic.w	r3, r3, #3
 800de3e:	f043 0302 	orr.w	r3, r3, #2
 800de42:	81a3      	strh	r3, [r4, #12]
 800de44:	e7e2      	b.n	800de0c <__smakebuf_r+0xc>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	6020      	str	r0, [r4, #0]
 800de4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de4e:	81a3      	strh	r3, [r4, #12]
 800de50:	9b01      	ldr	r3, [sp, #4]
 800de52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de56:	b15b      	cbz	r3, 800de70 <__smakebuf_r+0x70>
 800de58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de5c:	4630      	mov	r0, r6
 800de5e:	f000 f83b 	bl	800ded8 <_isatty_r>
 800de62:	b128      	cbz	r0, 800de70 <__smakebuf_r+0x70>
 800de64:	89a3      	ldrh	r3, [r4, #12]
 800de66:	f023 0303 	bic.w	r3, r3, #3
 800de6a:	f043 0301 	orr.w	r3, r3, #1
 800de6e:	81a3      	strh	r3, [r4, #12]
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	431d      	orrs	r5, r3
 800de74:	81a5      	strh	r5, [r4, #12]
 800de76:	e7cf      	b.n	800de18 <__smakebuf_r+0x18>

0800de78 <_raise_r>:
 800de78:	291f      	cmp	r1, #31
 800de7a:	b538      	push	{r3, r4, r5, lr}
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	d904      	bls.n	800de8c <_raise_r+0x14>
 800de82:	2316      	movs	r3, #22
 800de84:	6003      	str	r3, [r0, #0]
 800de86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de8e:	b112      	cbz	r2, 800de96 <_raise_r+0x1e>
 800de90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de94:	b94b      	cbnz	r3, 800deaa <_raise_r+0x32>
 800de96:	4628      	mov	r0, r5
 800de98:	f000 f840 	bl	800df1c <_getpid_r>
 800de9c:	4622      	mov	r2, r4
 800de9e:	4601      	mov	r1, r0
 800dea0:	4628      	mov	r0, r5
 800dea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea6:	f000 b827 	b.w	800def8 <_kill_r>
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d00a      	beq.n	800dec4 <_raise_r+0x4c>
 800deae:	1c59      	adds	r1, r3, #1
 800deb0:	d103      	bne.n	800deba <_raise_r+0x42>
 800deb2:	2316      	movs	r3, #22
 800deb4:	6003      	str	r3, [r0, #0]
 800deb6:	2001      	movs	r0, #1
 800deb8:	e7e7      	b.n	800de8a <_raise_r+0x12>
 800deba:	2100      	movs	r1, #0
 800debc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dec0:	4620      	mov	r0, r4
 800dec2:	4798      	blx	r3
 800dec4:	2000      	movs	r0, #0
 800dec6:	e7e0      	b.n	800de8a <_raise_r+0x12>

0800dec8 <raise>:
 800dec8:	4b02      	ldr	r3, [pc, #8]	@ (800ded4 <raise+0xc>)
 800deca:	4601      	mov	r1, r0
 800decc:	6818      	ldr	r0, [r3, #0]
 800dece:	f7ff bfd3 	b.w	800de78 <_raise_r>
 800ded2:	bf00      	nop
 800ded4:	20000118 	.word	0x20000118

0800ded8 <_isatty_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	@ (800def4 <_isatty_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f3 fe60 	bl	8001ba8 <_isatty>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_isatty_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_isatty_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	200021a0 	.word	0x200021a0

0800def8 <_kill_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	4d07      	ldr	r5, [pc, #28]	@ (800df18 <_kill_r+0x20>)
 800defc:	2300      	movs	r3, #0
 800defe:	4604      	mov	r4, r0
 800df00:	4608      	mov	r0, r1
 800df02:	4611      	mov	r1, r2
 800df04:	602b      	str	r3, [r5, #0]
 800df06:	f7f3 fddf 	bl	8001ac8 <_kill>
 800df0a:	1c43      	adds	r3, r0, #1
 800df0c:	d102      	bne.n	800df14 <_kill_r+0x1c>
 800df0e:	682b      	ldr	r3, [r5, #0]
 800df10:	b103      	cbz	r3, 800df14 <_kill_r+0x1c>
 800df12:	6023      	str	r3, [r4, #0]
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	bf00      	nop
 800df18:	200021a0 	.word	0x200021a0

0800df1c <_getpid_r>:
 800df1c:	f7f3 bdcc 	b.w	8001ab8 <_getpid>

0800df20 <_fstat_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4d07      	ldr	r5, [pc, #28]	@ (800df40 <_fstat_r+0x20>)
 800df24:	2300      	movs	r3, #0
 800df26:	4604      	mov	r4, r0
 800df28:	4608      	mov	r0, r1
 800df2a:	4611      	mov	r1, r2
 800df2c:	602b      	str	r3, [r5, #0]
 800df2e:	f7f3 fe2b 	bl	8001b88 <_fstat>
 800df32:	1c43      	adds	r3, r0, #1
 800df34:	d102      	bne.n	800df3c <_fstat_r+0x1c>
 800df36:	682b      	ldr	r3, [r5, #0]
 800df38:	b103      	cbz	r3, 800df3c <_fstat_r+0x1c>
 800df3a:	6023      	str	r3, [r4, #0]
 800df3c:	bd38      	pop	{r3, r4, r5, pc}
 800df3e:	bf00      	nop
 800df40:	200021a0 	.word	0x200021a0

0800df44 <_init>:
 800df44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df46:	bf00      	nop
 800df48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df4a:	bc08      	pop	{r3}
 800df4c:	469e      	mov	lr, r3
 800df4e:	4770      	bx	lr

0800df50 <_fini>:
 800df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df52:	bf00      	nop
 800df54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df56:	bc08      	pop	{r3}
 800df58:	469e      	mov	lr, r3
 800df5a:	4770      	bx	lr
