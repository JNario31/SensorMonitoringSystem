
SensorMonitoringSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009c90  08009c90  0000ac90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b4  0800a0b4  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0bc  0800a0bc  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a0c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000432c  200001d8  0800a29c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004504  0800a29c  0000c504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018905  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ed  00000000  00000000  00024b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00028300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ec  00000000  00000000  000298a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000257e6  00000000  00000000  0002a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cff  00000000  00000000  0005017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de6c6  00000000  00000000  00069e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014853f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c24  00000000  00000000  00148584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c78 	.word	0x08009c78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009c78 	.word	0x08009c78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <ADXL345_Init>:
 *  Created on: Sep 26, 2025
 *      Author: johnnario
 */
#include "ADXL345.h"

uint8_t ADXL345_Init( ADXL345 *dev, I2C_HandleTypeDef *i2cHandle ){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]

	/* Set Struct Parameters */
	dev->i2cHandle		= i2cHandle;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0]	= 0.0f;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
	dev->acc_mps2[1]	= 0.0f;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
	dev->acc_mps2[2]	= 0.0f;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]

	/* Store number of transaction errors */
	uint8_t errNum = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check device ID
	 */
	uint8_t regData;
	status = ADXL345_ReadRegister( dev, ADXL345_DEVICE_ID_AD, &regData);
 8000f40:	f107 030d 	add.w	r3, r7, #13
 8000f44:	461a      	mov	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f892 	bl	8001072 <ADXL345_ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK);
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4413      	add	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]

	if( regData !=  ADXL345_DEVICE_ID ) {
 8000f66:	7b7b      	ldrb	r3, [r7, #13]
 8000f68:	2be5      	cmp	r3, #229	@ 0xe5
 8000f6a:	d001      	beq.n	8000f70 <ADXL345_Init+0x5c>

		return 255;
 8000f6c:	23ff      	movs	r3, #255	@ 0xff
 8000f6e:	e07c      	b.n	800106a <ADXL345_Init+0x156>
	}

	/*
	 * Set the data format (DATA_FORMAT)
	 */
	regData = 0x00; // set to +-2g
 8000f70:	2300      	movs	r3, #0
 8000f72:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_DATA_FORMAT, &regData);
 8000f74:	f107 030d 	add.w	r3, r7, #13
 8000f78:	461a      	mov	r2, r3
 8000f7a:	2131      	movs	r1, #49	@ 0x31
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f893 	bl	80010a8 <ADXL345_WriteRegister>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK);
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	bf14      	ite	ne
 8000f8c:	2301      	movne	r3, #1
 8000f8e:	2300      	moveq	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	4413      	add	r3, r2
 8000f98:	73fb      	strb	r3, [r7, #15]
	/*
	 * Set output data rate (BW_RATE)
	 */
	regData = 0x0A;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_BW_RATE, &regData );
 8000f9e:	f107 030d 	add.w	r3, r7, #13
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	212c      	movs	r1, #44	@ 0x2c
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f87e 	bl	80010a8 <ADXL345_WriteRegister>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Set all interrupts to INT1 (INT_MAP)
	 */
	regData = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_INT_MAP, &regData );
 8000fc8:	f107 030d 	add.w	r3, r7, #13
 8000fcc:	461a      	mov	r2, r3
 8000fce:	212f      	movs	r1, #47	@ 0x2f
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f869 	bl	80010a8 <ADXL345_WriteRegister>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	4413      	add	r3, r2
 8000fec:	73fb      	strb	r3, [r7, #15]

	/*
	 * Enable DATA_READY interrupt (INT_ENABLE)
	 */
	regData = 0x80;
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_INT_ENABLE, &regData);
 8000ff2:	f107 030d 	add.w	r3, r7, #13
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	212e      	movs	r1, #46	@ 0x2e
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f854 	bl	80010a8 <ADXL345_WriteRegister>
 8001000:	4603      	mov	r3, r0
 8001002:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf14      	ite	ne
 800100a:	2301      	movne	r3, #1
 800100c:	2300      	moveq	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	4413      	add	r3, r2
 8001016:	73fb      	strb	r3, [r7, #15]

	/*
	 * Set to measurement mode (POWER_CTL)
	 */

	regData = 0x08;
 8001018:	2308      	movs	r3, #8
 800101a:	737b      	strb	r3, [r7, #13]

	status = ADXL345_WriteRegister( dev, ADXL345_REG_POWER_CTL, &regData );
 800101c:	f107 030d 	add.w	r3, r7, #13
 8001020:	461a      	mov	r2, r3
 8001022:	212d      	movs	r1, #45	@ 0x2d
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f83f 	bl	80010a8 <ADXL345_WriteRegister>
 800102a:	4603      	mov	r3, r0
 800102c:	73bb      	strb	r3, [r7, #14]
	errNum += ( status != HAL_OK );
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	4413      	add	r3, r2
 8001040:	73fb      	strb	r3, [r7, #15]

	// **CRITICAL: Read INT_SOURCE to clear any pending interrupts**
	status = ADXL345_ReadRegister(dev, ADXL345_REG_INT_SOURCE, &regData);
 8001042:	f107 030d 	add.w	r3, r7, #13
 8001046:	461a      	mov	r2, r3
 8001048:	2130      	movs	r1, #48	@ 0x30
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f811 	bl	8001072 <ADXL345_ReadRegister>
 8001050:	4603      	mov	r3, r0
 8001052:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4413      	add	r3, r2
 8001066:	73fb      	strb	r3, [r7, #15]





	return status;
 8001068:	7bbb      	ldrb	r3, [r7, #14]

}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ADXL345_ReadRegister>:


HAL_StatusTypeDef ADXL345_ReadRegister( ADXL345 *dev, uint8_t reg, uint8_t *data ){
 8001072:	b580      	push	{r7, lr}
 8001074:	b088      	sub	sp, #32
 8001076:	af04      	add	r7, sp, #16
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	460b      	mov	r3, r1
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	b29a      	uxth	r2, r3
 8001088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	21a6      	movs	r1, #166	@ 0xa6
 800109a:	f001 ff39 	bl	8002f10 <HAL_I2C_Mem_Read>
 800109e:	4603      	mov	r3, r0

}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ADXL345_WriteRegister>:

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);

}

HAL_StatusTypeDef ADXL345_WriteRegister( ADXL345 *dev, uint8_t reg, uint8_t *data){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	460b      	mov	r3, r1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADXL345_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	21a6      	movs	r1, #166	@ 0xa6
 80010d0:	f001 fe24 	bl	8002d1c <HAL_I2C_Mem_Write>
 80010d4:	4603      	mov	r3, r0

}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <ADXL345_ReadAccelerometerDMA>:
//
//	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, ADXL345_I2C_ADDR, ADXL345_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, dev->rawData, 6);
//
//}

uint8_t ADXL345_ReadAccelerometerDMA( ADXL345 *dev ){
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af02      	add	r7, sp, #8
 80010e4:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_Mem_Read_DMA(dev->i2cHandle, ADXL345_I2C_ADDR, ADXL345_REG_DATAX0, I2C_MEMADD_SIZE_8BIT, dev->rawData, 6) == HAL_OK){
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2206      	movs	r2, #6
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2232      	movs	r2, #50	@ 0x32
 80010f8:	21a6      	movs	r1, #166	@ 0xa6
 80010fa:	f002 f93b 	bl	8003374 <HAL_I2C_Mem_Read_DMA>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <ADXL345_ReadAccelerometerDMA+0x2a>

		return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <ADXL345_ReadAccelerometerDMA+0x2c>

	}else {

		return 0;
 8001108:	2300      	movs	r3, #0

	}

}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <ADXL345_ReadAccelerometerDMA_Complete>:

void ADXL345_ReadAccelerometerDMA_Complete( ADXL345 *dev ){
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

	int16_t x_raw = (int16_t)((dev->rawData[1] << 8) | dev->rawData[0]);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	795b      	ldrb	r3, [r3, #5]
 8001120:	b21b      	sxth	r3, r3
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	81fb      	strh	r3, [r7, #14]
	int16_t y_raw = (int16_t)((dev->rawData[3] << 8) | dev->rawData[2]);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	79db      	ldrb	r3, [r3, #7]
 8001134:	b21b      	sxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	81bb      	strh	r3, [r7, #12]
	int16_t z_raw = (int16_t)((dev->rawData[5] << 8) | dev->rawData[4]);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7a5b      	ldrb	r3, [r3, #9]
 8001148:	b21b      	sxth	r3, r3
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7a1b      	ldrb	r3, [r3, #8]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	817b      	strh	r3, [r7, #10]

	/* 256.0 LSB/g for +-2g range */
	dev->acc_mps2[0] =  x_raw /256.0f;
 8001158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001164:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80011b4 <ADXL345_ReadAccelerometerDMA_Complete+0xa0>
 8001168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	edc3 7a03 	vstr	s15, [r3, #12]
	dev->acc_mps2[1] =  y_raw /256.0f;
 8001172:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80011b4 <ADXL345_ReadAccelerometerDMA_Complete+0xa0>
 8001182:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->acc_mps2[2] =  z_raw /256.0f;
 800118c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80011b4 <ADXL345_ReadAccelerometerDMA_Complete+0xa0>
 800119c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	43800000 	.word	0x43800000

080011b8 <UART_Init>:
 *  Created on: Sep 26, 2025
 *      Author: johnnario
 */
#include "UART.h"

void UART_Init(UART *dev, UART_HandleTypeDef *handle){
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	dev->uartHandle = handle;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <UART_Print_String>:

HAL_StatusTypeDef UART_Print_String(UART *dev, char *str){
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(dev->uartHandle, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681c      	ldr	r4, [r3, #0]
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f7ff f864 	bl	80002b0 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4620      	mov	r0, r4
 80011f4:	f004 f84c 	bl	8005290 <HAL_UART_Transmit>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
	...

08001204 <UART_Print_Float>:

HAL_StatusTypeDef UART_Print_Float(UART *dev, float value, uint8_t decimals){
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001210:	460b      	mov	r3, r1
 8001212:	71fb      	strb	r3, [r7, #7]
	char buffer[32];

	if (decimals == 1) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10a      	bne.n	8001230 <UART_Print_Float+0x2c>
		sprintf(buffer, "%.1f", value);
 800121a:	68b8      	ldr	r0, [r7, #8]
 800121c:	f7ff f9b4 	bl	8000588 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	f107 0010 	add.w	r0, r7, #16
 8001228:	491a      	ldr	r1, [pc, #104]	@ (8001294 <UART_Print_Float+0x90>)
 800122a:	f006 fad1 	bl	80077d0 <siprintf>
 800122e:	e025      	b.n	800127c <UART_Print_Float+0x78>
	} else if (decimals == 2) {
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d10a      	bne.n	800124c <UART_Print_Float+0x48>
		sprintf(buffer, "%.2f", value);
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	f7ff f9a6 	bl	8000588 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	f107 0010 	add.w	r0, r7, #16
 8001244:	4914      	ldr	r1, [pc, #80]	@ (8001298 <UART_Print_Float+0x94>)
 8001246:	f006 fac3 	bl	80077d0 <siprintf>
 800124a:	e017      	b.n	800127c <UART_Print_Float+0x78>
	} else if (decimals == 3) {
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d10a      	bne.n	8001268 <UART_Print_Float+0x64>
		sprintf(buffer, "%.3f", value);
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff f998 	bl	8000588 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f107 0010 	add.w	r0, r7, #16
 8001260:	490e      	ldr	r1, [pc, #56]	@ (800129c <UART_Print_Float+0x98>)
 8001262:	f006 fab5 	bl	80077d0 <siprintf>
 8001266:	e009      	b.n	800127c <UART_Print_Float+0x78>
	} else {
		sprintf(buffer, "%.2f", value); // default
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f7ff f98d 	bl	8000588 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	f107 0010 	add.w	r0, r7, #16
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <UART_Print_Float+0x94>)
 8001278:	f006 faaa 	bl	80077d0 <siprintf>
	}

	return UART_Print_String(dev, buffer);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff ffa6 	bl	80011d4 <UART_Print_String>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3730      	adds	r7, #48	@ 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08009c90 	.word	0x08009c90
 8001298:	08009c98 	.word	0x08009c98
 800129c:	08009ca0 	.word	0x08009ca0

080012a0 <UART_Print_NewLine>:
	char buffer[16];
	sprintf(buffer, "%ld", value);
	return UART_Print_String(dev, buffer);
}

HAL_StatusTypeDef UART_Print_NewLine(UART *dev){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	return UART_Print_String(dev, "\r\n");
 80012a8:	4904      	ldr	r1, [pc, #16]	@ (80012bc <UART_Print_NewLine+0x1c>)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff92 	bl	80011d4 <UART_Print_String>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08009cac 	.word	0x08009cac

080012c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <vApplicationGetIdleTaskMemory+0x2c>)
 80012d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <vApplicationGetIdleTaskMemory+0x30>)
 80012d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200001f4 	.word	0x200001f4
 80012f0:	20000294 	.word	0x20000294

080012f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/*
 * On DATA_READY interrupt from ADXL345 start DMA read
 */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin ){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == ACC_INT_Pin ){
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d102      	bne.n	800130a <HAL_GPIO_EXTI_Callback+0x16>

		ADXL345_ReadAccelerometerDMA(&acc);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <HAL_GPIO_EXTI_Callback+0x20>)
 8001306:	f7ff feea 	bl	80010de <ADXL345_ReadAccelerometerDMA>

	}

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200005f8 	.word	0x200005f8

08001318 <HAL_I2C_MemRxCpltCallback>:

/*
 * I2C DMA Receive complete callback
 */
void HAL_I2C_MemRxCpltCallback( I2C_HandleTypeDef *hi2c1 ){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	if(hi2c1->Instance == I2C1){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d102      	bne.n	8001330 <HAL_I2C_MemRxCpltCallback+0x18>

		ADXL345_ReadAccelerometerDMA_Complete( &acc );
 800132a:	4804      	ldr	r0, [pc, #16]	@ (800133c <HAL_I2C_MemRxCpltCallback+0x24>)
 800132c:	f7ff fef2 	bl	8001114 <ADXL345_ReadAccelerometerDMA_Complete>

	}
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005400 	.word	0x40005400
 800133c:	200005f8 	.word	0x200005f8

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b0a0      	sub	sp, #128	@ 0x80
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 fd03 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f84d 	bl	80013e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 f937 	bl	80015c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f000 f90d 	bl	8001570 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001356:	f000 f8e1 	bl	800151c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800135a:	f000 f8b1 	bl	80014c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /*Initialize UART*/
  UART_Init( &uart_print, &huart2 );
 800135e:	491a      	ldr	r1, [pc, #104]	@ (80013c8 <main+0x88>)
 8001360:	481a      	ldr	r0, [pc, #104]	@ (80013cc <main+0x8c>)
 8001362:	f7ff ff29 	bl	80011b8 <UART_Init>

  /* Initialize Accelerometer */
  ADXL345_Init( &acc, &hi2c1 );
 8001366:	491a      	ldr	r1, [pc, #104]	@ (80013d0 <main+0x90>)
 8001368:	481a      	ldr	r0, [pc, #104]	@ (80013d4 <main+0x94>)
 800136a:	f7ff fdd3 	bl	8000f14 <ADXL345_Init>

  char usbBuf[64];

  /* Timers */
  uint32_t timerLED = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t timerLog = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	67bb      	str	r3, [r7, #120]	@ 0x78
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLEDTask, osPriorityLow, 0, 128);
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <main+0x98>)
 8001378:	f107 041c 	add.w	r4, r7, #28
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fb58 	bl	8005a46 <osThreadCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <main+0x9c>)
 800139a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartTask */
  osThreadDef(uartTask, StartUART, osPriorityNormal, 0, 256);
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <main+0xa0>)
 800139e:	463c      	mov	r4, r7
 80013a0:	461d      	mov	r5, r3
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 80013ae:	463b      	mov	r3, r7
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fb47 	bl	8005a46 <osThreadCreate>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <main+0xa4>)
 80013bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013be:	f004 fb3b 	bl	8005a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c2:	bf00      	nop
 80013c4:	e7fd      	b.n	80013c2 <main+0x82>
 80013c6:	bf00      	nop
 80013c8:	200005a8 	.word	0x200005a8
 80013cc:	20000610 	.word	0x20000610
 80013d0:	20000494 	.word	0x20000494
 80013d4:	200005f8 	.word	0x200005f8
 80013d8:	08009cb8 	.word	0x08009cb8
 80013dc:	200005f0 	.word	0x200005f0
 80013e0:	08009ce0 	.word	0x08009ce0
 80013e4:	200005f4 	.word	0x200005f4

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	@ 0x50
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2234      	movs	r2, #52	@ 0x34
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f006 face 	bl	8007998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <SystemClock_Config+0xd0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <SystemClock_Config+0xd0>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	@ 0x40
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <SystemClock_Config+0xd0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <SystemClock_Config+0xd4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <SystemClock_Config+0xd4>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <SystemClock_Config+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001450:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001460:	2348      	movs	r3, #72	@ 0x48
 8001462:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001468:	2303      	movs	r3, #3
 800146a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800146c:	2302      	movs	r3, #2
 800146e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4618      	mov	r0, r3
 8001476:	f003 f981 	bl	800477c <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001480:	f000 f988 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	230f      	movs	r3, #15
 8001486:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2302      	movs	r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2102      	movs	r1, #2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fdef 	bl	8004084 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80014ac:	f000 f972 	bl	8001794 <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	@ 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f001 fac9 	bl	8002a94 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 f944 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000494 	.word	0x20000494
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f003 fe4c 	bl	80051f0 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 f919 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200005a8 	.word	0x200005a8
 800156c:	40004400 	.word	0x40004400

08001570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_DMA_Init+0x4c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <MX_DMA_Init+0x4c>)
 8001580:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <MX_DMA_Init+0x4c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2105      	movs	r1, #5
 8001596:	200b      	movs	r0, #11
 8001598:	f000 fcd4 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800159c:	200b      	movs	r0, #11
 800159e:	f000 fced 	bl	8001f7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2105      	movs	r1, #5
 80015a6:	2011      	movs	r0, #17
 80015a8:	f000 fccc 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015ac:	2011      	movs	r0, #17
 80015ae:	f000 fce5 	bl	8001f7c <HAL_NVIC_EnableIRQ>

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <MX_GPIO_Init+0xfc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a37      	ldr	r2, [pc, #220]	@ (80016bc <MX_GPIO_Init+0xfc>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b35      	ldr	r3, [pc, #212]	@ (80016bc <MX_GPIO_Init+0xfc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <MX_GPIO_Init+0xfc>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a30      	ldr	r2, [pc, #192]	@ (80016bc <MX_GPIO_Init+0xfc>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <MX_GPIO_Init+0xfc>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <MX_GPIO_Init+0xfc>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a29      	ldr	r2, [pc, #164]	@ (80016bc <MX_GPIO_Init+0xfc>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <MX_GPIO_Init+0xfc>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <MX_GPIO_Init+0xfc>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a22      	ldr	r2, [pc, #136]	@ (80016bc <MX_GPIO_Init+0xfc>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_GPIO_Init+0xfc>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2120      	movs	r1, #32
 800164a:	481d      	ldr	r0, [pc, #116]	@ (80016c0 <MX_GPIO_Init+0x100>)
 800164c:	f001 f9d6 	bl	80029fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001656:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4817      	ldr	r0, [pc, #92]	@ (80016c4 <MX_GPIO_Init+0x104>)
 8001668:	f001 f834 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 800166c:	2302      	movs	r3, #2
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001670:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <MX_GPIO_Init+0x100>)
 8001682:	f001 f827 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001686:	2320      	movs	r3, #32
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <MX_GPIO_Init+0x100>)
 800169e:	f001 f819 	bl	80026d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 fc4c 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016ac:	2007      	movs	r0, #7
 80016ae:	f000 fc65 	bl	8001f7c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	@ 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020800 	.word	0x40020800

080016c8 <StartLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void const * argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80016d0:	2120      	movs	r1, #32
 80016d2:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <StartLEDTask+0x1c>)
 80016d4:	f001 f9ab 	bl	8002a2e <HAL_GPIO_TogglePin>
	osDelay(1000);
 80016d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016dc:	f004 f9ff 	bl	8005ade <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80016e0:	bf00      	nop
 80016e2:	e7f5      	b.n	80016d0 <StartLEDTask+0x8>
 80016e4:	40020000 	.word	0x40020000

080016e8 <StartUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART */
void StartUART(void const * argument)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /*
   * Transmit Data via UART every 0.5s or 500ms
   */
  for(;;)
  {
	UART_Print_String(&uart_print, "X: ");
 80016f0:	4919      	ldr	r1, [pc, #100]	@ (8001758 <StartUART+0x70>)
 80016f2:	481a      	ldr	r0, [pc, #104]	@ (800175c <StartUART+0x74>)
 80016f4:	f7ff fd6e 	bl	80011d4 <UART_Print_String>
	UART_Print_Float(&uart_print, acc.acc_mps2[0], 3);
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <StartUART+0x78>)
 80016fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fe:	2103      	movs	r1, #3
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	4815      	ldr	r0, [pc, #84]	@ (800175c <StartUART+0x74>)
 8001706:	f7ff fd7d 	bl	8001204 <UART_Print_Float>
	UART_Print_String(&uart_print, " g, Y: ");
 800170a:	4916      	ldr	r1, [pc, #88]	@ (8001764 <StartUART+0x7c>)
 800170c:	4813      	ldr	r0, [pc, #76]	@ (800175c <StartUART+0x74>)
 800170e:	f7ff fd61 	bl	80011d4 <UART_Print_String>
	UART_Print_Float(&uart_print, acc.acc_mps2[1], 3);
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <StartUART+0x78>)
 8001714:	edd3 7a04 	vldr	s15, [r3, #16]
 8001718:	2103      	movs	r1, #3
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	480f      	ldr	r0, [pc, #60]	@ (800175c <StartUART+0x74>)
 8001720:	f7ff fd70 	bl	8001204 <UART_Print_Float>
	UART_Print_String(&uart_print, " g, Z: ");
 8001724:	4910      	ldr	r1, [pc, #64]	@ (8001768 <StartUART+0x80>)
 8001726:	480d      	ldr	r0, [pc, #52]	@ (800175c <StartUART+0x74>)
 8001728:	f7ff fd54 	bl	80011d4 <UART_Print_String>
	UART_Print_Float(&uart_print, acc.acc_mps2[2], 3);
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <StartUART+0x78>)
 800172e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001732:	2103      	movs	r1, #3
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	4808      	ldr	r0, [pc, #32]	@ (800175c <StartUART+0x74>)
 800173a:	f7ff fd63 	bl	8001204 <UART_Print_Float>
	UART_Print_String(&uart_print, " g");
 800173e:	490b      	ldr	r1, [pc, #44]	@ (800176c <StartUART+0x84>)
 8001740:	4806      	ldr	r0, [pc, #24]	@ (800175c <StartUART+0x74>)
 8001742:	f7ff fd47 	bl	80011d4 <UART_Print_String>
	UART_Print_NewLine(&uart_print);
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <StartUART+0x74>)
 8001748:	f7ff fdaa 	bl	80012a0 <UART_Print_NewLine>
	osDelay(500);
 800174c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001750:	f004 f9c5 	bl	8005ade <osDelay>
	UART_Print_String(&uart_print, "X: ");
 8001754:	bf00      	nop
 8001756:	e7cb      	b.n	80016f0 <StartUART+0x8>
 8001758:	08009cfc 	.word	0x08009cfc
 800175c:	20000610 	.word	0x20000610
 8001760:	200005f8 	.word	0x200005f8
 8001764:	08009d00 	.word	0x08009d00
 8001768:	08009d08 	.word	0x08009d08
 800176c:	08009d10 	.word	0x08009d10

08001770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001782:	f000 fb07 	bl	8001d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40010000 	.word	0x40010000

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <Error_Handler+0x8>

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_MspInit+0x54>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_MspInit+0x54>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <HAL_MspInit+0x54>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_MspInit+0x54>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <HAL_MspInit+0x54>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_MspInit+0x54>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	210f      	movs	r1, #15
 80017e2:	f06f 0001 	mvn.w	r0, #1
 80017e6:	f000 fbad 	bl	8001f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a49      	ldr	r2, [pc, #292]	@ (800193c <HAL_I2C_MspInit+0x144>)
 8001816:	4293      	cmp	r3, r2
 8001818:	f040 808b 	bne.w	8001932 <HAL_I2C_MspInit+0x13a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_I2C_MspInit+0x148>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	4a46      	ldr	r2, [pc, #280]	@ (8001940 <HAL_I2C_MspInit+0x148>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	6313      	str	r3, [r2, #48]	@ 0x30
 800182c:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <HAL_I2C_MspInit+0x148>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001838:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183e:	2312      	movs	r3, #18
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800184a:	2304      	movs	r3, #4
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	483b      	ldr	r0, [pc, #236]	@ (8001944 <HAL_I2C_MspInit+0x14c>)
 8001856:	f000 ff3d 	bl	80026d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <HAL_I2C_MspInit+0x148>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a37      	ldr	r2, [pc, #220]	@ (8001940 <HAL_I2C_MspInit+0x148>)
 8001864:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <HAL_I2C_MspInit+0x148>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001876:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 8001878:	4a34      	ldr	r2, [pc, #208]	@ (800194c <HAL_I2C_MspInit+0x154>)
 800187a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 800187e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001882:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 8001892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001896:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018a4:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018b0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018b8:	4823      	ldr	r0, [pc, #140]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018ba:	f000 fb6d 	bl	8001f98 <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80018c4:	f7ff ff66 	bl	8001794 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80018ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <HAL_I2C_MspInit+0x150>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001954 <HAL_I2C_MspInit+0x15c>)
 80018d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80018da:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018e4:	2240      	movs	r2, #64	@ 0x40
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 800190a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800190e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001916:	480e      	ldr	r0, [pc, #56]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 8001918:	f000 fb3e 	bl	8001f98 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8001922:	f7ff ff37 	bl	8001794 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34
 800192c:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_I2C_MspInit+0x158>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	@ 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40005400 	.word	0x40005400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400
 8001948:	200004e8 	.word	0x200004e8
 800194c:	40026010 	.word	0x40026010
 8001950:	20000548 	.word	0x20000548
 8001954:	400260a0 	.word	0x400260a0

08001958 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	@ (80019dc <HAL_UART_MspInit+0x84>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12b      	bne.n	80019d2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_UART_MspInit+0x88>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HAL_UART_MspInit+0x88>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_UART_MspInit+0x88>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_UART_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <HAL_UART_MspInit+0x88>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <HAL_UART_MspInit+0x88>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019b2:	230c      	movs	r3, #12
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c2:	2307      	movs	r3, #7
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <HAL_UART_MspInit+0x8c>)
 80019ce:	f000 fe81 	bl	80026d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	@ 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40004400 	.word	0x40004400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	@ 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_InitTick+0xd0>)
 80019fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a00:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab8 <HAL_InitTick+0xd0>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a08:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <HAL_InitTick+0xd0>)
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a14:	f107 020c 	add.w	r2, r7, #12
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fc4a 	bl	80042b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a24:	f002 fc34 	bl	8004290 <HAL_RCC_GetPCLK2Freq>
 8001a28:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2c:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <HAL_InitTick+0xd4>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	3b01      	subs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a3a:	4a22      	ldr	r2, [pc, #136]	@ (8001ac4 <HAL_InitTick+0xdc>)
 8001a3c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a46:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a5e:	4818      	ldr	r0, [pc, #96]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a60:	f003 f92a 	bl	8004cb8 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11b      	bne.n	8001aaa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a72:	4813      	ldr	r0, [pc, #76]	@ (8001ac0 <HAL_InitTick+0xd8>)
 8001a74:	f003 f97a 	bl	8004d6c <HAL_TIM_Base_Start_IT>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d111      	bne.n	8001aaa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a86:	2019      	movs	r0, #25
 8001a88:	f000 fa78 	bl	8001f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	d808      	bhi.n	8001aa4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a92:	2200      	movs	r2, #0
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	2019      	movs	r0, #25
 8001a98:	f000 fa54 	bl	8001f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <HAL_InitTick+0xe0>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e002      	b.n	8001aaa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3730      	adds	r7, #48	@ 0x30
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	20000614 	.word	0x20000614
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	20000004 	.word	0x20000004

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8001b06:	2002      	movs	r0, #2
 8001b08:	f000 ffac 	bl	8002a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <DMA1_Stream0_IRQHandler+0x10>)
 8001b16:	f000 fb67 	bl	80021e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200004e8 	.word	0x200004e8

08001b24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <DMA1_Stream6_IRQHandler+0x10>)
 8001b2a:	f000 fb5d 	bl	80021e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000548 	.word	0x20000548

08001b38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b3e:	f003 f985 	bl	8004e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000614 	.word	0x20000614

08001b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_kill>:

int _kill(int pid, int sig)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b66:	f005 ff1f 	bl	80079a8 <__errno>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2216      	movs	r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_exit>:

void _exit (int status)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffe7 	bl	8001b5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <_exit+0x12>

08001b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00a      	b.n	8001bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	4601      	mov	r1, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	b2ca      	uxtb	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf0      	blt.n	8001ba4 <_read+0x12>
  }

  return len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e009      	b.n	8001bf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60ba      	str	r2, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dbf1      	blt.n	8001bde <_write+0x12>
  }
  return len;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_close>:

int _close(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_isatty>:

int _isatty(int file)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c9c:	f005 fe84 	bl	80079a8 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20020000 	.word	0x20020000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	2000065c 	.word	0x2000065c
 8001cd4:	20004508 	.word	0x20004508

08001cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d00:	f7ff ffea 	bl	8001cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	@ (8001d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f005 fe43 	bl	80079b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7ff fb07 	bl	8001340 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d40:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 8001d44:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d48:	20004504 	.word	0x20004504

08001d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <HAL_Init+0x40>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_Init+0x40>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <HAL_Init+0x40>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f8d8 	bl	8001f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f7ff fe32 	bl	80019e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fd0c 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000660 	.word	0x20000660

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000660 	.word	0x20000660

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff4c 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f56:	f7ff ff61 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f7ff ffb1 	bl	8001ec8 <NVIC_EncodePriority>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff80 	bl	8001e74 <__NVIC_SetPriority>
}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff54 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff ff0a 	bl	8001dbc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e099      	b.n	80020e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd4:	e00f      	b.n	8001ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd6:	f7ff fef1 	bl	8001dbc <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d908      	bls.n	8001ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e078      	b.n	80020e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e8      	bne.n	8001fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4b38      	ldr	r3, [pc, #224]	@ (80020f0 <HAL_DMA_Init+0x158>)
 8002010:	4013      	ands	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	2b04      	cmp	r3, #4
 800204e:	d107      	bne.n	8002060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	4313      	orrs	r3, r2
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	2b04      	cmp	r3, #4
 8002088:	d117      	bne.n	80020ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fa9d 	bl	80025dc <DMA_CheckFifoParam>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2240      	movs	r2, #64	@ 0x40
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020b6:	2301      	movs	r3, #1
 80020b8:	e016      	b.n	80020e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa54 	bl	8002570 <DMA_CalcBaseAndBitshift>
 80020c8:	4603      	mov	r3, r0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	223f      	movs	r2, #63	@ 0x3f
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	f010803f 	.word	0xf010803f

080020f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_DMA_Start_IT+0x26>
 8002116:	2302      	movs	r3, #2
 8002118:	e040      	b.n	800219c <HAL_DMA_Start_IT+0xa8>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d12f      	bne.n	800218e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f9e6 	bl	8002514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	223f      	movs	r2, #63	@ 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0216 	orr.w	r2, r2, #22
 8002162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e005      	b.n	800219a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d004      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00c      	b.n	80021dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2205      	movs	r2, #5
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002430 <HAL_DMA_IRQHandler+0x248>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a8e      	ldr	r2, [pc, #568]	@ (8002434 <HAL_DMA_IRQHandler+0x24c>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	2208      	movs	r2, #8
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01a      	beq.n	8002254 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2208      	movs	r2, #8
 8002242:	409a      	lsls	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	2201      	movs	r2, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2201      	movs	r2, #1
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	f043 0202 	orr.w	r2, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	2204      	movs	r2, #4
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	2204      	movs	r2, #4
 80022ae:	409a      	lsls	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c4:	2210      	movs	r2, #16
 80022c6:	409a      	lsls	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d043      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03c      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e2:	2210      	movs	r2, #16
 80022e4:	409a      	lsls	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d018      	beq.n	800232a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d108      	bne.n	8002318 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d024      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
 8002316:	e01f      	b.n	8002358 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
 8002328:	e016      	b.n	8002358 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0208 	bic.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	2220      	movs	r2, #32
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 808f 	beq.w	8002488 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8087 	beq.w	8002488 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	2220      	movs	r2, #32
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b05      	cmp	r3, #5
 8002390:	d136      	bne.n	8002400 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0216 	bic.w	r2, r2, #22
 80023a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <HAL_DMA_IRQHandler+0x1da>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	223f      	movs	r2, #63	@ 0x3f
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07e      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
        }
        return;
 80023fe:	e079      	b.n	80024f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01d      	beq.n	800244a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	2b00      	cmp	r3, #0
 8002422:	d031      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
 800242c:	e02c      	b.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000
 8002434:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d023      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
 8002448:	e01e      	b.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0210 	bic.w	r2, r2, #16
 8002466:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	2b00      	cmp	r3, #0
 800248e:	d032      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d022      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2205      	movs	r2, #5
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3301      	adds	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d307      	bcc.n	80024d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f2      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x2cc>
 80024ce:	e000      	b.n	80024d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
 80024f2:	e000      	b.n	80024f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024f4:	bf00      	nop
    }
  }
}
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b40      	cmp	r3, #64	@ 0x40
 8002540:	d108      	bne.n	8002554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002552:	e007      	b.n	8002564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3b10      	subs	r3, #16
 8002580:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800258a:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <DMA_CalcBaseAndBitshift+0x68>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d909      	bls.n	80025b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	1d1a      	adds	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80025b0:	e007      	b.n	80025c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	aaaaaaab 	.word	0xaaaaaaab
 80025d8:	08009d34 	.word	0x08009d34

080025dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d856      	bhi.n	80026aa <DMA_CheckFifoParam+0xce>
 80025fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <DMA_CheckFifoParam+0x28>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002615 	.word	0x08002615
 8002608:	08002627 	.word	0x08002627
 800260c:	08002615 	.word	0x08002615
 8002610:	080026ab 	.word	0x080026ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d046      	beq.n	80026ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e043      	b.n	80026ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800262e:	d140      	bne.n	80026b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e03d      	b.n	80026b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800263e:	d121      	bne.n	8002684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d837      	bhi.n	80026b6 <DMA_CheckFifoParam+0xda>
 8002646:	a201      	add	r2, pc, #4	@ (adr r2, 800264c <DMA_CheckFifoParam+0x70>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002663 	.word	0x08002663
 8002654:	0800265d 	.word	0x0800265d
 8002658:	08002675 	.word	0x08002675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e030      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d025      	beq.n	80026ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002672:	e022      	b.n	80026ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800267c:	d11f      	bne.n	80026be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002682:	e01c      	b.n	80026be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d903      	bls.n	8002692 <DMA_CheckFifoParam+0xb6>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d003      	beq.n	8002698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002690:	e018      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      break;
 8002696:	e015      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e00b      	b.n	80026c2 <DMA_CheckFifoParam+0xe6>
      break;
 80026aa:	bf00      	nop
 80026ac:	e00a      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e008      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e006      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e004      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
    }
  } 
  
  return status; 
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e165      	b.n	80029bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	f040 8154 	bne.w	80029b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d005      	beq.n	8002726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002722:	2b02      	cmp	r3, #2
 8002724:	d130      	bne.n	8002788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 0201 	and.w	r2, r3, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d017      	beq.n	80027c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d123      	bne.n	8002818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ae 	beq.w	80029b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b5d      	ldr	r3, [pc, #372]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	4a5c      	ldr	r2, [pc, #368]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002868:	6453      	str	r3, [r2, #68]	@ 0x44
 800286a:	4b5a      	ldr	r3, [pc, #360]	@ (80029d4 <HAL_GPIO_Init+0x300>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	4a58      	ldr	r2, [pc, #352]	@ (80029d8 <HAL_GPIO_Init+0x304>)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	220f      	movs	r2, #15
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	@ (80029dc <HAL_GPIO_Init+0x308>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d025      	beq.n	80028ee <HAL_GPIO_Init+0x21a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4e      	ldr	r2, [pc, #312]	@ (80029e0 <HAL_GPIO_Init+0x30c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01f      	beq.n	80028ea <HAL_GPIO_Init+0x216>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	@ (80029e4 <HAL_GPIO_Init+0x310>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_Init+0x212>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	@ (80029e8 <HAL_GPIO_Init+0x314>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	@ (80029ec <HAL_GPIO_Init+0x318>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_Init+0x20a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4a      	ldr	r2, [pc, #296]	@ (80029f0 <HAL_GPIO_Init+0x31c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x206>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a49      	ldr	r2, [pc, #292]	@ (80029f4 <HAL_GPIO_Init+0x320>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_Init+0x202>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028ee:	2300      	movs	r3, #0
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	@ (80029d8 <HAL_GPIO_Init+0x304>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a31      	ldr	r2, [pc, #196]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a26      	ldr	r2, [pc, #152]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002962:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002986:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298c:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b0:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <HAL_GPIO_Init+0x324>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f67f ae96 	bls.w	80026f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40021400 	.word	0x40021400
 80029f4:	40021800 	.word	0x40021800
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a40:	887a      	ldrh	r2, [r7, #2]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4013      	ands	r3, r2
 8002a46:	041a      	lsls	r2, r3, #16
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	400b      	ands	r3, r1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	619a      	str	r2, [r3, #24]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a6e:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a7a:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fc36 	bl	80012f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e12b      	b.n	8002cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fe9c 	bl	80017f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af8:	f001 fbb6 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8002afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4a81      	ldr	r2, [pc, #516]	@ (8002d08 <HAL_I2C_Init+0x274>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d807      	bhi.n	8002b18 <HAL_I2C_Init+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a80      	ldr	r2, [pc, #512]	@ (8002d0c <HAL_I2C_Init+0x278>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	bf94      	ite	ls
 8002b10:	2301      	movls	r3, #1
 8002b12:	2300      	movhi	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e006      	b.n	8002b26 <HAL_I2C_Init+0x92>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d10 <HAL_I2C_Init+0x27c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0e7      	b.n	8002cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a78      	ldr	r2, [pc, #480]	@ (8002d14 <HAL_I2C_Init+0x280>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0c9b      	lsrs	r3, r3, #18
 8002b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d08 <HAL_I2C_Init+0x274>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d802      	bhi.n	8002b68 <HAL_I2C_Init+0xd4>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3301      	adds	r3, #1
 8002b66:	e009      	b.n	8002b7c <HAL_I2C_Init+0xe8>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	4a69      	ldr	r2, [pc, #420]	@ (8002d18 <HAL_I2C_Init+0x284>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	495c      	ldr	r1, [pc, #368]	@ (8002d08 <HAL_I2C_Init+0x274>)
 8002b98:	428b      	cmp	r3, r1
 8002b9a:	d819      	bhi.n	8002bd0 <HAL_I2C_Init+0x13c>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e59      	subs	r1, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_I2C_Init+0x138>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e59      	subs	r1, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bca:	e051      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e04f      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <HAL_I2C_Init+0x168>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e012      	b.n	8002c22 <HAL_I2C_Init+0x18e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e58      	subs	r0, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	0099      	lsls	r1, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Init+0x196>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e022      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10e      	bne.n	8002c50 <HAL_I2C_Init+0x1bc>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1e58      	subs	r0, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	440b      	add	r3, r1
 8002c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4e:	e00f      	b.n	8002c70 <HAL_I2C_Init+0x1dc>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	0099      	lsls	r1, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6911      	ldr	r1, [r2, #16]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68d2      	ldr	r2, [r2, #12]
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	000186a0 	.word	0x000186a0
 8002d0c:	001e847f 	.word	0x001e847f
 8002d10:	003d08ff 	.word	0x003d08ff
 8002d14:	431bde83 	.word	0x431bde83
 8002d18:	10624dd3 	.word	0x10624dd3

08002d1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	817b      	strh	r3, [r7, #10]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	813b      	strh	r3, [r7, #8]
 8002d32:	4613      	mov	r3, r2
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d36:	f7ff f841 	bl	8001dbc <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 80d9 	bne.w	8002efc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2319      	movs	r3, #25
 8002d50:	2201      	movs	r2, #1
 8002d52:	496d      	ldr	r1, [pc, #436]	@ (8002f08 <HAL_I2C_Mem_Write+0x1ec>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 ff5f 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0cc      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Mem_Write+0x56>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0c5      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d007      	beq.n	8002d98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2221      	movs	r2, #33	@ 0x21
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a3a      	ldr	r2, [r7, #32]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a4d      	ldr	r2, [pc, #308]	@ (8002f0c <HAL_I2C_Mem_Write+0x1f0>)
 8002dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dda:	88f8      	ldrh	r0, [r7, #6]
 8002ddc:	893a      	ldrh	r2, [r7, #8]
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4603      	mov	r3, r0
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fc7a 	bl	80036e4 <I2C_RequestMemoryWrite>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d052      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e081      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f001 f824 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11b      	bne.n	8002e9c <HAL_I2C_Mem_Write+0x180>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1aa      	bne.n	8002dfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f001 f817 	bl	8003edc <I2C_WaitOnBTFFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d107      	bne.n	8002ecc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e016      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e000      	b.n	8002efe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	00100002 	.word	0x00100002
 8002f0c:	ffff0000 	.word	0xffff0000

08002f10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	@ 0x30
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	460b      	mov	r3, r1
 8002f24:	813b      	strh	r3, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f2a:	f7fe ff47 	bl	8001dbc <HAL_GetTick>
 8002f2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	f040 8214 	bne.w	8003366 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2319      	movs	r3, #25
 8002f44:	2201      	movs	r2, #1
 8002f46:	497b      	ldr	r1, [pc, #492]	@ (8003134 <HAL_I2C_Mem_Read+0x224>)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fe65 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
 8002f56:	e207      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_Mem_Read+0x56>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e200      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d007      	beq.n	8002f8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2222      	movs	r2, #34	@ 0x22
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2240      	movs	r2, #64	@ 0x40
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a5b      	ldr	r2, [pc, #364]	@ (8003138 <HAL_I2C_Mem_Read+0x228>)
 8002fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fce:	88f8      	ldrh	r0, [r7, #6]
 8002fd0:	893a      	ldrh	r2, [r7, #8]
 8002fd2:	8979      	ldrh	r1, [r7, #10]
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fc16 	bl	8003810 <I2C_RequestMemoryRead>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1bc      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d113      	bne.n	800301e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e190      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003022:	2b01      	cmp	r3, #1
 8003024:	d11b      	bne.n	800305e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e170      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	2b02      	cmp	r3, #2
 8003064:	d11b      	bne.n	800309e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	e150      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030b4:	e144      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	f200 80f1 	bhi.w	80032a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d123      	bne.n	8003110 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 ff4d 	bl	8003f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e145      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800310e:	e117      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	2b02      	cmp	r3, #2
 8003116:	d14e      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311e:	2200      	movs	r2, #0
 8003120:	4906      	ldr	r1, [pc, #24]	@ (800313c <HAL_I2C_Mem_Read+0x22c>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fd78 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e11a      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
 8003132:	bf00      	nop
 8003134:	00100002 	.word	0x00100002
 8003138:	ffff0000 	.word	0xffff0000
 800313c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031b4:	e0c4      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	2200      	movs	r2, #0
 80031be:	496c      	ldr	r1, [pc, #432]	@ (8003370 <HAL_I2C_Mem_Read+0x460>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fd29 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0cb      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003218:	2200      	movs	r2, #0
 800321a:	4955      	ldr	r1, [pc, #340]	@ (8003370 <HAL_I2C_Mem_Read+0x460>)
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fcfb 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e09d      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800323a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032a0:	e04e      	b.n	8003340 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fe60 	bl	8003f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e058      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d124      	bne.n	8003340 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f aeb6 	bne.w	80030b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	@ 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010004 	.word	0x00010004

08003374 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	@ 0x30
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800338e:	f7fe fd15 	bl	8001dbc <HAL_GetTick>
 8003392:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	f040 8172 	bne.w	800368a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80033a6:	4b93      	ldr	r3, [pc, #588]	@ (80035f4 <HAL_I2C_Mem_Read_DMA+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	08db      	lsrs	r3, r3, #3
 80033ac:	4a92      	ldr	r2, [pc, #584]	@ (80035f8 <HAL_I2C_Mem_Read_DMA+0x284>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a1a      	lsrs	r2, r3, #8
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009a      	lsls	r2, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d112      	bne.n	80033f2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
 80033f0:	e14c      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d0df      	beq.n	80033c0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2C_Mem_Read_DMA+0x9a>
 800340a:	2302      	movs	r3, #2
 800340c:	e13e      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d007      	beq.n	8003434 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2222      	movs	r2, #34	@ 0x22
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	@ 0x40
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a62      	ldr	r2, [pc, #392]	@ (80035fc <HAL_I2C_Mem_Read_DMA+0x288>)
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003476:	897a      	ldrh	r2, [r7, #10]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800347c:	893a      	ldrh	r2, [r7, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80cc 	beq.w	8003630 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02d      	beq.n	80034fc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	4a56      	ldr	r2, [pc, #344]	@ (8003600 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80034a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	4a55      	ldr	r2, [pc, #340]	@ (8003604 <HAL_I2C_Mem_Read_DMA+0x290>)
 80034ae:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c4:	2200      	movs	r2, #0
 80034c6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	2200      	movs	r2, #0
 80034ce:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3310      	adds	r3, #16
 80034da:	4619      	mov	r1, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	461a      	mov	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	f7fe fe05 	bl	80020f4 <HAL_DMA_Start_IT>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80034f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 8087 	bne.w	8003608 <HAL_I2C_Mem_Read_DMA+0x294>
 80034fa:	e013      	b.n	8003524 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0b3      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003524:	88f8      	ldrh	r0, [r7, #6]
 8003526:	893a      	ldrh	r2, [r7, #8]
 8003528:	8979      	ldrh	r1, [r7, #10]
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2323      	movs	r3, #35	@ 0x23
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4603      	mov	r3, r0
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f96b 	bl	8003810 <I2C_RequestMemoryRead>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fe2d 	bl	80021a4 <HAL_DMA_Abort_IT>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	2200      	movs	r2, #0
 8003556:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003566:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e081      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	2b01      	cmp	r3, #1
 800358e:	d108      	bne.n	80035a2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e007      	b.n	80035b2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035de:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	e049      	b.n	8003686 <HAL_I2C_Mem_Read_DMA+0x312>
 80035f2:	bf00      	nop
 80035f4:	20000000 	.word	0x20000000
 80035f8:	14f8b589 	.word	0x14f8b589
 80035fc:	ffff0000 	.word	0xffff0000
 8003600:	080039e1 	.word	0x080039e1
 8003604:	08003b9f 	.word	0x08003b9f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e02d      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003630:	88f8      	ldrh	r0, [r7, #6]
 8003632:	893a      	ldrh	r2, [r7, #8]
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	2323      	movs	r3, #35	@ 0x23
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4603      	mov	r3, r0
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f8e5 	bl	8003810 <I2C_RequestMemoryRead>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01d      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003674:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800368a:	2302      	movs	r3, #2
  }
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	@ 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800370c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2200      	movs	r2, #0
 8003716:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa7c 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003734:	d103      	bne.n	800373e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e05f      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003750:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	492d      	ldr	r1, [pc, #180]	@ (800380c <I2C_RequestMemoryWrite+0x128>)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fad7 	bl	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04c      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fb62 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2b04      	cmp	r3, #4
 8003794:	d107      	bne.n	80037a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e02b      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b0:	893b      	ldrh	r3, [r7, #8]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e021      	b.n	8003800 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037bc:	893b      	ldrh	r3, [r7, #8]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037cc:	6a39      	ldr	r1, [r7, #32]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fb3c 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d107      	bne.n	80037f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e005      	b.n	8003802 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	00010002 	.word	0x00010002

08003810 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003838:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2200      	movs	r2, #0
 8003852:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f9de 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003870:	d103      	bne.n	800387a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0aa      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800388c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	4952      	ldr	r1, [pc, #328]	@ (80039dc <I2C_RequestMemoryRead+0x1cc>)
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fa39 	bl	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e097      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038bc:	6a39      	ldr	r1, [r7, #32]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fac4 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d107      	bne.n	80038e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e076      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	e021      	b.n	800393c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038f8:	893b      	ldrh	r3, [r7, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003908:	6a39      	ldr	r1, [r7, #32]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fa9e 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2b04      	cmp	r3, #4
 800391c:	d107      	bne.n	800392e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e050      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003932:	893b      	ldrh	r3, [r7, #8]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393e:	6a39      	ldr	r1, [r7, #32]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fa83 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	2b04      	cmp	r3, #4
 8003952:	d107      	bne.n	8003964 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003962:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e035      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003976:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2200      	movs	r2, #0
 8003980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f947 	bl	8003c18 <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800399e:	d103      	bne.n	80039a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e013      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	6a3a      	ldr	r2, [r7, #32]
 80039c0:	4906      	ldr	r1, [pc, #24]	@ (80039dc <I2C_RequestMemoryRead+0x1cc>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f9a2 	bl	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010002 	.word	0x00010002

080039e0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039fc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a12:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a20:	2200      	movs	r2, #0
 8003a22:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	2200      	movs	r2, #0
 8003a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003a3a:	2b21      	cmp	r3, #33	@ 0x21
 8003a3c:	d007      	beq.n	8003a4e <I2C_DMAXferCplt+0x6e>
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003a44:	2b22      	cmp	r3, #34	@ 0x22
 8003a46:	d131      	bne.n	8003aac <I2C_DMAXferCplt+0xcc>
 8003a48:	7cbb      	ldrb	r3, [r7, #18]
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d12e      	bne.n	8003aac <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a5c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b29      	cmp	r3, #41	@ 0x29
 8003a68:	d10a      	bne.n	8003a80 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2221      	movs	r2, #33	@ 0x21
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2228      	movs	r2, #40	@ 0x28
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f7ff fe15 	bl	80036a8 <HAL_I2C_SlaveTxCpltCallback>
 8003a7e:	e00c      	b.n	8003a9a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a84:	d109      	bne.n	8003a9a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2222      	movs	r2, #34	@ 0x22
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2228      	movs	r2, #40	@ 0x28
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f7ff fe11 	bl	80036bc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003aa8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003aaa:	e074      	b.n	8003b96 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d06e      	beq.n	8003b96 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ae0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ae8:	d009      	beq.n	8003afe <I2C_DMAXferCplt+0x11e>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d006      	beq.n	8003afe <I2C_DMAXferCplt+0x11e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003af6:	d002      	beq.n	8003afe <I2C_DMAXferCplt+0x11e>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d107      	bne.n	8003b0e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b1c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f7ff fdc7 	bl	80036d0 <HAL_I2C_ErrorCallback>
}
 8003b42:	e028      	b.n	8003b96 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d10a      	bne.n	8003b6e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7fd fbd6 	bl	8001318 <HAL_I2C_MemRxCpltCallback>
}
 8003b6c:	e013      	b.n	8003b96 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d002      	beq.n	8003b82 <I2C_DMAXferCplt+0x1a2>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d103      	bne.n	8003b8a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b88:	e002      	b.n	8003b90 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2212      	movs	r2, #18
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f7ff fd7f 	bl	8003694 <HAL_I2C_MasterRxCpltCallback>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	2200      	movs	r2, #0
 8003bca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fe fc95 	bl	80024fc <HAL_DMA_GetError>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d01b      	beq.n	8003c10 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f043 0210 	orr.w	r2, r3, #16
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff fd60 	bl	80036d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c28:	e048      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c30:	d044      	beq.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe f8c3 	bl	8001dbc <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d139      	bne.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	0c1b      	lsrs	r3, r3, #16
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10d      	bne.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	e00c      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d116      	bne.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e023      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10d      	bne.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	e00c      	b.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d093      	beq.n	8003c2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d1a:	e071      	b.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d123      	bne.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0204 	orr.w	r2, r3, #4
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e067      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d7a:	d041      	beq.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7fe f81e 	bl	8001dbc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d136      	bne.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10c      	bne.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e00b      	b.n	8003dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e021      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10c      	bne.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e00b      	b.n	8003e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f47f af6d 	bne.w	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e58:	e034      	b.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f8e3 	bl	8004026 <I2C_IsAcknowledgeFailed>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e034      	b.n	8003ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e70:	d028      	beq.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fd ffa3 	bl	8001dbc <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11d      	bne.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b80      	cmp	r3, #128	@ 0x80
 8003e94:	d016      	beq.n	8003ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e007      	b.n	8003ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ece:	2b80      	cmp	r3, #128	@ 0x80
 8003ed0:	d1c3      	bne.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ee8:	e034      	b.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f89b 	bl	8004026 <I2C_IsAcknowledgeFailed>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e034      	b.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f00:	d028      	beq.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fd ff5b 	bl	8001dbc <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11d      	bne.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d016      	beq.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d1c3      	bne.n	8003eea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f78:	e049      	b.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d119      	bne.n	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0210 	mvn.w	r2, #16
 8003f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e030      	b.n	800401e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbc:	f7fd fefe 	bl	8001dbc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11d      	bne.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d016      	beq.n	800400e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e007      	b.n	800401e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d1ae      	bne.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403c:	d11b      	bne.n	8004076 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004046:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fd fe22 	bl	8001dbc <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fe1e 	bl	8001dbc <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	@ (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800420a:	f000 f887 	bl	800431c <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	490a      	ldr	r1, [pc, #40]	@ (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	@ (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	@ (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fbdc 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	08009d1c 	.word	0x08009d1c
 8004248:	20000000 	.word	0x20000000
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <HAL_RCC_GetHCLKFreq+0x14>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000000 	.word	0x20000000

08004268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800426c:	f7ff fff0 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0a9b      	lsrs	r3, r3, #10
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	08009d2c 	.word	0x08009d2c

08004290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004294:	f7ff ffdc 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0b5b      	lsrs	r3, r3, #13
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4903      	ldr	r1, [pc, #12]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40023800 	.word	0x40023800
 80042b4:	08009d2c 	.word	0x08009d2c

080042b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	220f      	movs	r2, #15
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042c8:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCC_GetClockConfig+0x5c>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <HAL_RCC_GetClockConfig+0x60>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 020f 	and.w	r2, r3, #15
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	40023c00 	.word	0x40023c00

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004320:	b0ae      	sub	sp, #184	@ 0xb8
 8004322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004342:	4bcb      	ldr	r3, [pc, #812]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b0c      	cmp	r3, #12
 800434c:	f200 8206 	bhi.w	800475c <HAL_RCC_GetSysClockFreq+0x440>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800438d 	.word	0x0800438d
 800435c:	0800475d 	.word	0x0800475d
 8004360:	0800475d 	.word	0x0800475d
 8004364:	0800475d 	.word	0x0800475d
 8004368:	08004395 	.word	0x08004395
 800436c:	0800475d 	.word	0x0800475d
 8004370:	0800475d 	.word	0x0800475d
 8004374:	0800475d 	.word	0x0800475d
 8004378:	0800439d 	.word	0x0800439d
 800437c:	0800475d 	.word	0x0800475d
 8004380:	0800475d 	.word	0x0800475d
 8004384:	0800475d 	.word	0x0800475d
 8004388:	0800458d 	.word	0x0800458d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4bb9      	ldr	r3, [pc, #740]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x358>)
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004392:	e1e7      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004394:	4bb8      	ldr	r3, [pc, #736]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800439a:	e1e3      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4bb4      	ldr	r3, [pc, #720]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a8:	4bb1      	ldr	r3, [pc, #708]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d071      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b4:	4bae      	ldr	r3, [pc, #696]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043da:	4622      	mov	r2, r4
 80043dc:	462b      	mov	r3, r5
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	0159      	lsls	r1, r3, #5
 80043e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ec:	0150      	lsls	r0, r2, #5
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4621      	mov	r1, r4
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80043f8:	4629      	mov	r1, r5
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800440c:	4649      	mov	r1, r9
 800440e:	018b      	lsls	r3, r1, #6
 8004410:	4641      	mov	r1, r8
 8004412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004416:	4641      	mov	r1, r8
 8004418:	018a      	lsls	r2, r1, #6
 800441a:	4641      	mov	r1, r8
 800441c:	1a51      	subs	r1, r2, r1
 800441e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004420:	4649      	mov	r1, r9
 8004422:	eb63 0301 	sbc.w	r3, r3, r1
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004434:	4649      	mov	r1, r9
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4641      	mov	r1, r8
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4641      	mov	r1, r8
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4622      	mov	r2, r4
 800444a:	189b      	adds	r3, r3, r2
 800444c:	633b      	str	r3, [r7, #48]	@ 0x30
 800444e:	462b      	mov	r3, r5
 8004450:	460a      	mov	r2, r1
 8004452:	eb42 0303 	adc.w	r3, r2, r3
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004464:	4629      	mov	r1, r5
 8004466:	024b      	lsls	r3, r1, #9
 8004468:	4621      	mov	r1, r4
 800446a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800446e:	4621      	mov	r1, r4
 8004470:	024a      	lsls	r2, r1, #9
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004480:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004488:	f7fc fbae 	bl	8000be8 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004496:	e067      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004498:	4b75      	ldr	r3, [pc, #468]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80044a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044b2:	2300      	movs	r3, #0
 80044b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	f04f 0000 	mov.w	r0, #0
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	0159      	lsls	r1, r3, #5
 80044c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044cc:	0150      	lsls	r0, r2, #5
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4621      	mov	r1, r4
 80044d4:	1a51      	subs	r1, r2, r1
 80044d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044d8:	4629      	mov	r1, r5
 80044da:	eb63 0301 	sbc.w	r3, r3, r1
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80044ec:	4649      	mov	r1, r9
 80044ee:	018b      	lsls	r3, r1, #6
 80044f0:	4641      	mov	r1, r8
 80044f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044f6:	4641      	mov	r1, r8
 80044f8:	018a      	lsls	r2, r1, #6
 80044fa:	4641      	mov	r1, r8
 80044fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004500:	4649      	mov	r1, r9
 8004502:	eb63 0b01 	sbc.w	fp, r3, r1
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800451a:	4692      	mov	sl, r2
 800451c:	469b      	mov	fp, r3
 800451e:	4623      	mov	r3, r4
 8004520:	eb1a 0303 	adds.w	r3, sl, r3
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	462b      	mov	r3, r5
 8004528:	eb4b 0303 	adc.w	r3, fp, r3
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800453a:	4629      	mov	r1, r5
 800453c:	028b      	lsls	r3, r1, #10
 800453e:	4621      	mov	r1, r4
 8004540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004544:	4621      	mov	r1, r4
 8004546:	028a      	lsls	r2, r1, #10
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004550:	2200      	movs	r2, #0
 8004552:	673b      	str	r3, [r7, #112]	@ 0x70
 8004554:	677a      	str	r2, [r7, #116]	@ 0x74
 8004556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800455a:	f7fc fb45 	bl	8000be8 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4613      	mov	r3, r2
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004568:	4b41      	ldr	r3, [pc, #260]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800457a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800457e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800458a:	e0eb      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800458c:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004598:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d06b      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a4:	4b32      	ldr	r3, [pc, #200]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	2200      	movs	r2, #0
 80045ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045b8:	2300      	movs	r3, #0
 80045ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80045bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80045c0:	4622      	mov	r2, r4
 80045c2:	462b      	mov	r3, r5
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	0159      	lsls	r1, r3, #5
 80045ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d2:	0150      	lsls	r0, r2, #5
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4621      	mov	r1, r4
 80045da:	1a51      	subs	r1, r2, r1
 80045dc:	61b9      	str	r1, [r7, #24]
 80045de:	4629      	mov	r1, r5
 80045e0:	eb63 0301 	sbc.w	r3, r3, r1
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045f2:	4659      	mov	r1, fp
 80045f4:	018b      	lsls	r3, r1, #6
 80045f6:	4651      	mov	r1, sl
 80045f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045fc:	4651      	mov	r1, sl
 80045fe:	018a      	lsls	r2, r1, #6
 8004600:	4651      	mov	r1, sl
 8004602:	ebb2 0801 	subs.w	r8, r2, r1
 8004606:	4659      	mov	r1, fp
 8004608:	eb63 0901 	sbc.w	r9, r3, r1
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800461c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004620:	4690      	mov	r8, r2
 8004622:	4699      	mov	r9, r3
 8004624:	4623      	mov	r3, r4
 8004626:	eb18 0303 	adds.w	r3, r8, r3
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	462b      	mov	r3, r5
 800462e:	eb49 0303 	adc.w	r3, r9, r3
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004640:	4629      	mov	r1, r5
 8004642:	024b      	lsls	r3, r1, #9
 8004644:	4621      	mov	r1, r4
 8004646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800464a:	4621      	mov	r1, r4
 800464c:	024a      	lsls	r2, r1, #9
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004656:	2200      	movs	r2, #0
 8004658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800465a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800465c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004660:	f7fc fac2 	bl	8000be8 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800466e:	e065      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x420>
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400
 8004678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467c:	4b3d      	ldr	r3, [pc, #244]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x458>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	2200      	movs	r2, #0
 8004684:	4618      	mov	r0, r3
 8004686:	4611      	mov	r1, r2
 8004688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800468c:	653b      	str	r3, [r7, #80]	@ 0x50
 800468e:	2300      	movs	r3, #0
 8004690:	657b      	str	r3, [r7, #84]	@ 0x54
 8004692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004696:	4642      	mov	r2, r8
 8004698:	464b      	mov	r3, r9
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	0159      	lsls	r1, r3, #5
 80046a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a8:	0150      	lsls	r0, r2, #5
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4641      	mov	r1, r8
 80046b0:	1a51      	subs	r1, r2, r1
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4649      	mov	r1, r9
 80046b6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046c8:	4659      	mov	r1, fp
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	4651      	mov	r1, sl
 80046ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046d2:	4651      	mov	r1, sl
 80046d4:	018a      	lsls	r2, r1, #6
 80046d6:	4651      	mov	r1, sl
 80046d8:	1a54      	subs	r4, r2, r1
 80046da:	4659      	mov	r1, fp
 80046dc:	eb63 0501 	sbc.w	r5, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	18e3      	adds	r3, r4, r3
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	464b      	mov	r3, r9
 80046fc:	eb45 0303 	adc.w	r3, r5, r3
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470e:	4629      	mov	r1, r5
 8004710:	028b      	lsls	r3, r1, #10
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004718:	4621      	mov	r1, r4
 800471a:	028a      	lsls	r2, r1, #10
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004724:	2200      	movs	r2, #0
 8004726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004728:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800472a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800472e:	f7fc fa5b 	bl	8000be8 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4613      	mov	r3, r2
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800473c:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x458>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0f1b      	lsrs	r3, r3, #28
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800474a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800474e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800475a:	e003      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004768:	4618      	mov	r0, r3
 800476a:	37b8      	adds	r7, #184	@ 0xb8
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400

0800477c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e28d      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8083 	beq.w	80048a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800479c:	4b94      	ldr	r3, [pc, #592]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d019      	beq.n	80047dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80047a8:	4b91      	ldr	r3, [pc, #580]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80047b4:	4b8e      	ldr	r3, [pc, #568]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047c0:	d00c      	beq.n	80047dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c2:	4b8b      	ldr	r3, [pc, #556]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d112      	bne.n	80047f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ce:	4b88      	ldr	r3, [pc, #544]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047da:	d10b      	bne.n	80047f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	4b84      	ldr	r3, [pc, #528]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d05b      	beq.n	80048a0 <HAL_RCC_OscConfig+0x124>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d157      	bne.n	80048a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e25a      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d106      	bne.n	800480c <HAL_RCC_OscConfig+0x90>
 80047fe:	4b7c      	ldr	r3, [pc, #496]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a7b      	ldr	r2, [pc, #492]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e01d      	b.n	8004848 <HAL_RCC_OscConfig+0xcc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004814:	d10c      	bne.n	8004830 <HAL_RCC_OscConfig+0xb4>
 8004816:	4b76      	ldr	r3, [pc, #472]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800481c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b73      	ldr	r3, [pc, #460]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a72      	ldr	r2, [pc, #456]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e00b      	b.n	8004848 <HAL_RCC_OscConfig+0xcc>
 8004830:	4b6f      	ldr	r3, [pc, #444]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6e      	ldr	r2, [pc, #440]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a6b      	ldr	r2, [pc, #428]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd fab4 	bl	8001dbc <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fd fab0 	bl	8001dbc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	@ 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e21f      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	4b61      	ldr	r3, [pc, #388]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0xdc>
 8004876:	e014      	b.n	80048a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd faa0 	bl	8001dbc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fd fa9c 	bl	8001dbc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	@ 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e20b      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004892:	4b57      	ldr	r3, [pc, #348]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x104>
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06f      	beq.n	800498e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ae:	4b50      	ldr	r3, [pc, #320]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048ba:	4b4d      	ldr	r3, [pc, #308]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
        || \
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d105      	bne.n	80048d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048c6:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d2:	4b47      	ldr	r3, [pc, #284]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d11c      	bne.n	8004918 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b44      	ldr	r3, [pc, #272]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d116      	bne.n	8004918 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCC_OscConfig+0x186>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e1d3      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b3b      	ldr	r3, [pc, #236]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4937      	ldr	r1, [pc, #220]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	e03a      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <HAL_RCC_OscConfig+0x278>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fd fa49 	bl	8001dbc <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492e:	f7fd fa45 	bl	8001dbc <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e1b4      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b28      	ldr	r3, [pc, #160]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4925      	ldr	r1, [pc, #148]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <HAL_RCC_OscConfig+0x278>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd fa28 	bl	8001dbc <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004970:	f7fd fa24 	bl	8001dbc <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e193      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d036      	beq.n	8004a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b15      	ldr	r3, [pc, #84]	@ (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fd fa08 	bl	8001dbc <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fd fa04 	bl	8001dbc <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e173      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x274>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x234>
 80049ce:	e01b      	b.n	8004a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fd f9f1 	bl	8001dbc <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	e00e      	b.n	80049fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049de:	f7fd f9ed 	bl	8001dbc <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d907      	bls.n	80049fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e15c      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	42470000 	.word	0x42470000
 80049f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ea      	bne.n	80049de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8097 	beq.w	8004b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b83      	ldr	r3, [pc, #524]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a36:	4b7c      	ldr	r3, [pc, #496]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b79      	ldr	r3, [pc, #484]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b76      	ldr	r3, [pc, #472]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd f9ad 	bl	8001dbc <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fd f9a9 	bl	8001dbc <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e118      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b6c      	ldr	r3, [pc, #432]	@ (8004c2c <HAL_RCC_OscConfig+0x4b0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x31e>
 8004a8c:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	4a65      	ldr	r2, [pc, #404]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x358>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x340>
 8004aa2:	4b61      	ldr	r3, [pc, #388]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a60      	ldr	r2, [pc, #384]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aae:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x358>
 8004abc:	4b5a      	ldr	r3, [pc, #360]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac0:	4a59      	ldr	r2, [pc, #356]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac8:	4b57      	ldr	r3, [pc, #348]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	4a56      	ldr	r2, [pc, #344]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004ace:	f023 0304 	bic.w	r3, r3, #4
 8004ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fd f96e 	bl	8001dbc <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fd f96a 	bl	8001dbc <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0d7      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b4b      	ldr	r3, [pc, #300]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ee      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x368>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fd f958 	bl	8001dbc <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fd f954 	bl	8001dbc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0c1      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	4b40      	ldr	r3, [pc, #256]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ee      	bne.n	8004b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b3b      	ldr	r3, [pc, #236]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80ad 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b4e:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d060      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d145      	bne.n	8004bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b33      	ldr	r3, [pc, #204]	@ (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fd f928 	bl	8001dbc <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd f924 	bl	8001dbc <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e093      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	491b      	ldr	r1, [pc, #108]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fd f8f9 	bl	8001dbc <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fd f8f5 	bl	8001dbc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e064      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x452>
 8004bec:	e05c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <HAL_RCC_OscConfig+0x4b4>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd f8e2 	bl	8001dbc <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fd f8de 	bl	8001dbc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04d      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x4ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
 8004c1a:	e045      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e040      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c34:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCC_OscConfig+0x538>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d030      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d129      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d122      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d119      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d10f      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e041      	b.n	8004d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f839 	bl	8004d56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f000 f9c0 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d001      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e04e      	b.n	8004e22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a23      	ldr	r2, [pc, #140]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dae:	d01d      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x80>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d010      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	e007      	b.n	8004e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40001800 	.word	0x40001800

08004e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d020      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0202 	mvn.w	r2, #2
 8004e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8d2 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8c4 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8d5 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d020      	beq.n	8004efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0204 	mvn.w	r2, #4
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8ac 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f89e 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f8af 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01b      	beq.n	8004f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0208 	mvn.w	r2, #8
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f886 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f878 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f889 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d020      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01b      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f860 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f852 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f863 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0201 	mvn.w	r2, #1
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc fbdc 	bl	8001770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f900 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00c      	beq.n	8005000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f834 	bl	8005068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0220 	mvn.w	r2, #32
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8d2 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a43      	ldr	r2, [pc, #268]	@ (800519c <TIM_Base_SetConfig+0x120>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509a:	d00f      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a40      	ldr	r2, [pc, #256]	@ (80051a0 <TIM_Base_SetConfig+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3f      	ldr	r2, [pc, #252]	@ (80051a4 <TIM_Base_SetConfig+0x128>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3e      	ldr	r2, [pc, #248]	@ (80051a8 <TIM_Base_SetConfig+0x12c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3d      	ldr	r2, [pc, #244]	@ (80051ac <TIM_Base_SetConfig+0x130>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d108      	bne.n	80050ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a32      	ldr	r2, [pc, #200]	@ (800519c <TIM_Base_SetConfig+0x120>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d02b      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050dc:	d027      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2f      	ldr	r2, [pc, #188]	@ (80051a0 <TIM_Base_SetConfig+0x124>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d023      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2e      	ldr	r2, [pc, #184]	@ (80051a4 <TIM_Base_SetConfig+0x128>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d01f      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2d      	ldr	r2, [pc, #180]	@ (80051a8 <TIM_Base_SetConfig+0x12c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01b      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	@ (80051ac <TIM_Base_SetConfig+0x130>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d017      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	@ (80051b0 <TIM_Base_SetConfig+0x134>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2a      	ldr	r2, [pc, #168]	@ (80051b4 <TIM_Base_SetConfig+0x138>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a29      	ldr	r2, [pc, #164]	@ (80051b8 <TIM_Base_SetConfig+0x13c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a28      	ldr	r2, [pc, #160]	@ (80051bc <TIM_Base_SetConfig+0x140>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a27      	ldr	r2, [pc, #156]	@ (80051c0 <TIM_Base_SetConfig+0x144>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a26      	ldr	r2, [pc, #152]	@ (80051c4 <TIM_Base_SetConfig+0x148>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a0e      	ldr	r2, [pc, #56]	@ (800519c <TIM_Base_SetConfig+0x120>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_Base_SetConfig+0xf2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a10      	ldr	r2, [pc, #64]	@ (80051ac <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d103      	bne.n	8005176 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f043 0204 	orr.w	r2, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40010400 	.word	0x40010400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800
 80051bc:	40001800 	.word	0x40001800
 80051c0:	40001c00 	.word	0x40001c00
 80051c4:	40002000 	.word	0x40002000

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e042      	b.n	8005288 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fb9e 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	@ 0x24
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f973 	bl	8005520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	@ 0x28
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d175      	bne.n	800539c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_UART_Transmit+0x2c>
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e06e      	b.n	800539e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2221      	movs	r2, #33	@ 0x21
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ce:	f7fc fd75 	bl	8001dbc <HAL_GetTick>
 80052d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	88fa      	ldrh	r2, [r7, #6]
 80052de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e8:	d108      	bne.n	80052fc <HAL_UART_Transmit+0x6c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e003      	b.n	8005304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005304:	e02e      	b.n	8005364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	@ 0x80
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f848 	bl	80053a6 <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e03a      	b.n	800539e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800533c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3302      	adds	r3, #2
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e007      	b.n	8005356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cb      	bne.n	8005306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	2140      	movs	r1, #64	@ 0x40
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f814 	bl	80053a6 <UART_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e006      	b.n	800539e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	e03b      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053be:	d037      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c0:	f7fc fcfc 	bl	8001dbc <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e03a      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d023      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b80      	cmp	r3, #128	@ 0x80
 80053ec:	d020      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d01d      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d116      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f81d 	bl	8005458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2208      	movs	r2, #8
 8005422:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e00f      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	d0b4      	beq.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b095      	sub	sp, #84	@ 0x54
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005480:	643a      	str	r2, [r7, #64]	@ 0x40
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d119      	bne.n	8005504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	613b      	str	r3, [r7, #16]
   return(result);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005512:	bf00      	nop
 8005514:	3754      	adds	r7, #84	@ 0x54
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005524:	b0c0      	sub	sp, #256	@ 0x100
 8005526:	af00      	add	r7, sp, #0
 8005528:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	68d9      	ldr	r1, [r3, #12]
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	ea40 0301 	orr.w	r3, r0, r1
 8005548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	431a      	orrs	r2, r3
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	431a      	orrs	r2, r3
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005578:	f021 010c 	bic.w	r1, r1, #12
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005586:	430b      	orrs	r3, r1
 8005588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	6999      	ldr	r1, [r3, #24]
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	ea40 0301 	orr.w	r3, r0, r1
 80055a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b8f      	ldr	r3, [pc, #572]	@ (80057ec <UART_SetConfig+0x2cc>)
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d005      	beq.n	80055c0 <UART_SetConfig+0xa0>
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b8d      	ldr	r3, [pc, #564]	@ (80057f0 <UART_SetConfig+0x2d0>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	d104      	bne.n	80055ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fe66 	bl	8004290 <HAL_RCC_GetPCLK2Freq>
 80055c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055c8:	e003      	b.n	80055d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ca:	f7fe fe4d 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 80055ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055dc:	f040 810c 	bne.w	80057f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055f2:	4622      	mov	r2, r4
 80055f4:	462b      	mov	r3, r5
 80055f6:	1891      	adds	r1, r2, r2
 80055f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055fa:	415b      	adcs	r3, r3
 80055fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005602:	4621      	mov	r1, r4
 8005604:	eb12 0801 	adds.w	r8, r2, r1
 8005608:	4629      	mov	r1, r5
 800560a:	eb43 0901 	adc.w	r9, r3, r1
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800561a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005622:	4690      	mov	r8, r2
 8005624:	4699      	mov	r9, r3
 8005626:	4623      	mov	r3, r4
 8005628:	eb18 0303 	adds.w	r3, r8, r3
 800562c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005630:	462b      	mov	r3, r5
 8005632:	eb49 0303 	adc.w	r3, r9, r3
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005646:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800564a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800564e:	460b      	mov	r3, r1
 8005650:	18db      	adds	r3, r3, r3
 8005652:	653b      	str	r3, [r7, #80]	@ 0x50
 8005654:	4613      	mov	r3, r2
 8005656:	eb42 0303 	adc.w	r3, r2, r3
 800565a:	657b      	str	r3, [r7, #84]	@ 0x54
 800565c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005664:	f7fb fac0 	bl	8000be8 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b61      	ldr	r3, [pc, #388]	@ (80057f4 <UART_SetConfig+0x2d4>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011c      	lsls	r4, r3, #4
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005680:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005690:	415b      	adcs	r3, r3
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005698:	4641      	mov	r1, r8
 800569a:	eb12 0a01 	adds.w	sl, r2, r1
 800569e:	4649      	mov	r1, r9
 80056a0:	eb43 0b01 	adc.w	fp, r3, r1
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b8:	4692      	mov	sl, r2
 80056ba:	469b      	mov	fp, r3
 80056bc:	4643      	mov	r3, r8
 80056be:	eb1a 0303 	adds.w	r3, sl, r3
 80056c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c6:	464b      	mov	r3, r9
 80056c8:	eb4b 0303 	adc.w	r3, fp, r3
 80056cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056e4:	460b      	mov	r3, r1
 80056e6:	18db      	adds	r3, r3, r3
 80056e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ea:	4613      	mov	r3, r2
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056fa:	f7fb fa75 	bl	8000be8 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4611      	mov	r1, r2
 8005704:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <UART_SetConfig+0x2d4>)
 8005706:	fba3 2301 	umull	r2, r3, r3, r1
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	2264      	movs	r2, #100	@ 0x64
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	1acb      	subs	r3, r1, r3
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800571a:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <UART_SetConfig+0x2d4>)
 800571c:	fba3 2302 	umull	r2, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005728:	441c      	add	r4, r3
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005734:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005744:	415b      	adcs	r3, r3
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800574c:	4641      	mov	r1, r8
 800574e:	1851      	adds	r1, r2, r1
 8005750:	6339      	str	r1, [r7, #48]	@ 0x30
 8005752:	4649      	mov	r1, r9
 8005754:	414b      	adcs	r3, r1
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005764:	4659      	mov	r1, fp
 8005766:	00cb      	lsls	r3, r1, #3
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576e:	4651      	mov	r1, sl
 8005770:	00ca      	lsls	r2, r1, #3
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	4603      	mov	r3, r0
 8005778:	4642      	mov	r2, r8
 800577a:	189b      	adds	r3, r3, r2
 800577c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005780:	464b      	mov	r3, r9
 8005782:	460a      	mov	r2, r1
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005798:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800579c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057b6:	f7fb fa17 	bl	8000be8 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	@ 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	3332      	adds	r3, #50	@ 0x32
 80057d2:	4a08      	ldr	r2, [pc, #32]	@ (80057f4 <UART_SetConfig+0x2d4>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 0207 	and.w	r2, r3, #7
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4422      	add	r2, r4
 80057e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e8:	e106      	b.n	80059f8 <UART_SetConfig+0x4d8>
 80057ea:	bf00      	nop
 80057ec:	40011000 	.word	0x40011000
 80057f0:	40011400 	.word	0x40011400
 80057f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005802:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800580a:	4642      	mov	r2, r8
 800580c:	464b      	mov	r3, r9
 800580e:	1891      	adds	r1, r2, r2
 8005810:	6239      	str	r1, [r7, #32]
 8005812:	415b      	adcs	r3, r3
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800581a:	4641      	mov	r1, r8
 800581c:	1854      	adds	r4, r2, r1
 800581e:	4649      	mov	r1, r9
 8005820:	eb43 0501 	adc.w	r5, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	00eb      	lsls	r3, r5, #3
 800582e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005832:	00e2      	lsls	r2, r4, #3
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	4643      	mov	r3, r8
 800583a:	18e3      	adds	r3, r4, r3
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005840:	464b      	mov	r3, r9
 8005842:	eb45 0303 	adc.w	r3, r5, r3
 8005846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005866:	4629      	mov	r1, r5
 8005868:	008b      	lsls	r3, r1, #2
 800586a:	4621      	mov	r1, r4
 800586c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005870:	4621      	mov	r1, r4
 8005872:	008a      	lsls	r2, r1, #2
 8005874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005878:	f7fb f9b6 	bl	8000be8 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4b60      	ldr	r3, [pc, #384]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005882:	fba3 2302 	umull	r2, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	011c      	lsls	r4, r3, #4
 800588a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005894:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	61b9      	str	r1, [r7, #24]
 80058a4:	415b      	adcs	r3, r3
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ac:	4641      	mov	r1, r8
 80058ae:	1851      	adds	r1, r2, r1
 80058b0:	6139      	str	r1, [r7, #16]
 80058b2:	4649      	mov	r1, r9
 80058b4:	414b      	adcs	r3, r1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058c4:	4659      	mov	r1, fp
 80058c6:	00cb      	lsls	r3, r1, #3
 80058c8:	4651      	mov	r1, sl
 80058ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ce:	4651      	mov	r1, sl
 80058d0:	00ca      	lsls	r2, r1, #3
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	4642      	mov	r2, r8
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058e0:	464b      	mov	r3, r9
 80058e2:	460a      	mov	r2, r1
 80058e4:	eb42 0303 	adc.w	r3, r2, r3
 80058e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005904:	4649      	mov	r1, r9
 8005906:	008b      	lsls	r3, r1, #2
 8005908:	4641      	mov	r1, r8
 800590a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590e:	4641      	mov	r1, r8
 8005910:	008a      	lsls	r2, r1, #2
 8005912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005916:	f7fb f967 	bl	8000be8 <__aeabi_uldivmod>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4611      	mov	r1, r2
 8005920:	4b38      	ldr	r3, [pc, #224]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005922:	fba3 2301 	umull	r2, r3, r3, r1
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2264      	movs	r2, #100	@ 0x64
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	1acb      	subs	r3, r1, r3
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	3332      	adds	r3, #50	@ 0x32
 8005934:	4a33      	ldr	r2, [pc, #204]	@ (8005a04 <UART_SetConfig+0x4e4>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005940:	441c      	add	r4, r3
 8005942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005946:	2200      	movs	r2, #0
 8005948:	673b      	str	r3, [r7, #112]	@ 0x70
 800594a:	677a      	str	r2, [r7, #116]	@ 0x74
 800594c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	415b      	adcs	r3, r3
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005960:	4641      	mov	r1, r8
 8005962:	1851      	adds	r1, r2, r1
 8005964:	6039      	str	r1, [r7, #0]
 8005966:	4649      	mov	r1, r9
 8005968:	414b      	adcs	r3, r1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005978:	4659      	mov	r1, fp
 800597a:	00cb      	lsls	r3, r1, #3
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005982:	4651      	mov	r1, sl
 8005984:	00ca      	lsls	r2, r1, #3
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	4603      	mov	r3, r0
 800598c:	4642      	mov	r2, r8
 800598e:	189b      	adds	r3, r3, r2
 8005990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005992:	464b      	mov	r3, r9
 8005994:	460a      	mov	r2, r1
 8005996:	eb42 0303 	adc.w	r3, r2, r3
 800599a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80059a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059b4:	4649      	mov	r1, r9
 80059b6:	008b      	lsls	r3, r1, #2
 80059b8:	4641      	mov	r1, r8
 80059ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059be:	4641      	mov	r1, r8
 80059c0:	008a      	lsls	r2, r1, #2
 80059c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059c6:	f7fb f90f 	bl	8000be8 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <UART_SetConfig+0x4e4>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	2164      	movs	r1, #100	@ 0x64
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	3332      	adds	r3, #50	@ 0x32
 80059e2:	4a08      	ldr	r2, [pc, #32]	@ (8005a04 <UART_SetConfig+0x4e4>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4422      	add	r2, r4
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059fe:	46bd      	mov	sp, r7
 8005a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a04:	51eb851f 	.word	0x51eb851f

08005a08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a1a:	2b84      	cmp	r3, #132	@ 0x84
 8005a1c:	d005      	beq.n	8005a2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	3303      	adds	r3, #3
 8005a28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a3c:	f000 fafc 	bl	8006038 <vTaskStartScheduler>
  
  return osOK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a48:	b089      	sub	sp, #36	@ 0x24
 8005a4a:	af04      	add	r7, sp, #16
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <osThreadCreate+0x54>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01c      	beq.n	8005a9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685c      	ldr	r4, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691e      	ldr	r6, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff ffc8 	bl	8005a08 <makeFreeRtosPriority>
 8005a78:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a82:	9202      	str	r2, [sp, #8]
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	9100      	str	r1, [sp, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 f8ed 	bl	8005c6e <xTaskCreateStatic>
 8005a94:	4603      	mov	r3, r0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e01c      	b.n	8005ad4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685c      	ldr	r4, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aa6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ffaa 	bl	8005a08 <makeFreeRtosPriority>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f107 030c 	add.w	r3, r7, #12
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	9200      	str	r2, [sp, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f932 	bl	8005d2e <xTaskCreate>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d001      	beq.n	8005ad4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ade <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <osDelay+0x16>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	e000      	b.n	8005af6 <osDelay+0x18>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa68 	bl	8005fcc <vTaskDelay>
  
  return osOK;
 8005afc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f103 0208 	add.w	r2, r3, #8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 0208 	add.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f103 0208 	add.w	r2, r3, #8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bbe:	d103      	bne.n	8005bc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e00c      	b.n	8005be2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e002      	b.n	8005bd6 <vListInsert+0x2e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d2f6      	bcs.n	8005bd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6892      	ldr	r2, [r2, #8]
 8005c30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6852      	ldr	r2, [r2, #4]
 8005c3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d103      	bne.n	8005c4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	1e5a      	subs	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08e      	sub	sp, #56	@ 0x38
 8005c72:	af04      	add	r7, sp, #16
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	61fb      	str	r3, [r7, #28]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cb8:	23a0      	movs	r3, #160	@ 0xa0
 8005cba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8005cc0:	d00b      	beq.n	8005cda <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	61bb      	str	r3, [r7, #24]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01e      	beq.n	8005d20 <xTaskCreateStatic+0xb2>
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	9302      	str	r3, [sp, #8]
 8005d02:	f107 0314 	add.w	r3, r7, #20
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f850 	bl	8005db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d1a:	f000 f8ed 	bl	8005ef8 <prvAddNewTaskToReadyList>
 8005d1e:	e001      	b.n	8005d24 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d24:	697b      	ldr	r3, [r7, #20]
	}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08c      	sub	sp, #48	@ 0x30
 8005d32:	af04      	add	r7, sp, #16
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 ff00 	bl	8006b48 <pvPortMalloc>
 8005d48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d50:	20a0      	movs	r0, #160	@ 0xa0
 8005d52:	f000 fef9 	bl	8006b48 <pvPortMalloc>
 8005d56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d64:	e005      	b.n	8005d72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f000 ffbc 	bl	8006ce4 <vPortFree>
 8005d6c:	e001      	b.n	8005d72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d017      	beq.n	8005da8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	2300      	movs	r3, #0
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f80e 	bl	8005db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d9c:	69f8      	ldr	r0, [r7, #28]
 8005d9e:	f000 f8ab 	bl	8005ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005da2:	2301      	movs	r3, #1
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	e002      	b.n	8005dae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dae:	69bb      	ldr	r3, [r7, #24]
	}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	617b      	str	r3, [r7, #20]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01f      	beq.n	8005e48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e012      	b.n	8005e34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	7819      	ldrb	r1, [r3, #0]
 8005e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3334      	adds	r3, #52	@ 0x34
 8005e1e:	460a      	mov	r2, r1
 8005e20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d006      	beq.n	8005e3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3301      	adds	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d9e9      	bls.n	8005e0e <prvInitialiseNewTask+0x56>
 8005e3a:	e000      	b.n	8005e3e <prvInitialiseNewTask+0x86>
			{
				break;
 8005e3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e46:	e003      	b.n	8005e50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d901      	bls.n	8005e5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e56:	2306      	movs	r3, #6
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fe68 	bl	8005b46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	3318      	adds	r3, #24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fe63 	bl	8005b46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	f1c3 0207 	rsb	r2, r3, #7
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	334c      	adds	r3, #76	@ 0x4c
 8005eaa:	224c      	movs	r2, #76	@ 0x4c
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fd72 	bl	8007998 <memset>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8005eec <prvInitialiseNewTask+0x134>)
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef0 <prvInitialiseNewTask+0x138>)
 8005ebe:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef4 <prvInitialiseNewTask+0x13c>)
 8005ec4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	69b8      	ldr	r0, [r7, #24]
 8005ecc:	f000 fc2a 	bl	8006724 <pxPortInitialiseStack>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee2:	bf00      	nop
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200043b8 	.word	0x200043b8
 8005ef0:	20004420 	.word	0x20004420
 8005ef4:	20004488 	.word	0x20004488

08005ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f00:	f000 fd42 	bl	8006988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f04:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb0 <prvAddNewTaskToReadyList+0xb8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	4a29      	ldr	r2, [pc, #164]	@ (8005fb0 <prvAddNewTaskToReadyList+0xb8>)
 8005f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f0e:	4b29      	ldr	r3, [pc, #164]	@ (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f16:	4a27      	ldr	r2, [pc, #156]	@ (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f1c:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <prvAddNewTaskToReadyList+0xb8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d110      	bne.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f24:	f000 fad4 	bl	80064d0 <prvInitialiseTaskLists>
 8005f28:	e00d      	b.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f2a:	4b23      	ldr	r3, [pc, #140]	@ (8005fb8 <prvAddNewTaskToReadyList+0xc0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f32:	4b20      	ldr	r3, [pc, #128]	@ (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d802      	bhi.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f40:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f46:	4b1d      	ldr	r3, [pc, #116]	@ (8005fbc <prvAddNewTaskToReadyList+0xc4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fbc <prvAddNewTaskToReadyList+0xc4>)
 8005f4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f54:	2201      	movs	r2, #1
 8005f56:	409a      	lsls	r2, r3
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <prvAddNewTaskToReadyList+0xc8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	4a18      	ldr	r2, [pc, #96]	@ (8005fc0 <prvAddNewTaskToReadyList+0xc8>)
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4a15      	ldr	r2, [pc, #84]	@ (8005fc4 <prvAddNewTaskToReadyList+0xcc>)
 8005f70:	441a      	add	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7ff fdf1 	bl	8005b60 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f7e:	f000 fd35 	bl	80069ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f82:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb8 <prvAddNewTaskToReadyList+0xc0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d207      	bcs.n	8005fa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f98:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <prvAddNewTaskToReadyList+0xd0>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000764 	.word	0x20000764
 8005fb4:	20000664 	.word	0x20000664
 8005fb8:	20000770 	.word	0x20000770
 8005fbc:	20000780 	.word	0x20000780
 8005fc0:	2000076c 	.word	0x2000076c
 8005fc4:	20000668 	.word	0x20000668
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d018      	beq.n	8006010 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fde:	4b14      	ldr	r3, [pc, #80]	@ (8006030 <vTaskDelay+0x64>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <vTaskDelay+0x32>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60bb      	str	r3, [r7, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ffe:	f000 f885 	bl	800610c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006002:	2100      	movs	r1, #0
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fb27 	bl	8006658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800600a:	f000 f88d 	bl	8006128 <xTaskResumeAll>
 800600e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006016:	4b07      	ldr	r3, [pc, #28]	@ (8006034 <vTaskDelay+0x68>)
 8006018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	2000078c 	.word	0x2000078c
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	@ 0x28
 800603c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006046:	463a      	mov	r2, r7
 8006048:	1d39      	adds	r1, r7, #4
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4618      	mov	r0, r3
 8006050:	f7fb f936 	bl	80012c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	9202      	str	r2, [sp, #8]
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	2300      	movs	r3, #0
 8006064:	460a      	mov	r2, r1
 8006066:	4921      	ldr	r1, [pc, #132]	@ (80060ec <vTaskStartScheduler+0xb4>)
 8006068:	4821      	ldr	r0, [pc, #132]	@ (80060f0 <vTaskStartScheduler+0xb8>)
 800606a:	f7ff fe00 	bl	8005c6e <xTaskCreateStatic>
 800606e:	4603      	mov	r3, r0
 8006070:	4a20      	ldr	r2, [pc, #128]	@ (80060f4 <vTaskStartScheduler+0xbc>)
 8006072:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006074:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <vTaskStartScheduler+0xbc>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800607c:	2301      	movs	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e001      	b.n	8006086 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d11b      	bne.n	80060c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	613b      	str	r3, [r7, #16]
}
 800609e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060a0:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <vTaskStartScheduler+0xc0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	334c      	adds	r3, #76	@ 0x4c
 80060a6:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <vTaskStartScheduler+0xc4>)
 80060a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <vTaskStartScheduler+0xc8>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060b2:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <vTaskStartScheduler+0xcc>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060b8:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <vTaskStartScheduler+0xd0>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060be:	f000 fbbf 	bl	8006840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060c2:	e00f      	b.n	80060e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060ca:	d10b      	bne.n	80060e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60fb      	str	r3, [r7, #12]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <vTaskStartScheduler+0xa8>
}
 80060e4:	bf00      	nop
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	08009d14 	.word	0x08009d14
 80060f0:	080064a1 	.word	0x080064a1
 80060f4:	20000788 	.word	0x20000788
 80060f8:	20000664 	.word	0x20000664
 80060fc:	2000001c 	.word	0x2000001c
 8006100:	20000784 	.word	0x20000784
 8006104:	20000770 	.word	0x20000770
 8006108:	20000768 	.word	0x20000768

0800610c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006110:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <vTaskSuspendAll+0x18>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a03      	ldr	r2, [pc, #12]	@ (8006124 <vTaskSuspendAll+0x18>)
 8006118:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	2000078c 	.word	0x2000078c

08006128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006136:	4b42      	ldr	r3, [pc, #264]	@ (8006240 <xTaskResumeAll+0x118>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <xTaskResumeAll+0x2e>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	603b      	str	r3, [r7, #0]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006156:	f000 fc17 	bl	8006988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800615a:	4b39      	ldr	r3, [pc, #228]	@ (8006240 <xTaskResumeAll+0x118>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3b01      	subs	r3, #1
 8006160:	4a37      	ldr	r2, [pc, #220]	@ (8006240 <xTaskResumeAll+0x118>)
 8006162:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006164:	4b36      	ldr	r3, [pc, #216]	@ (8006240 <xTaskResumeAll+0x118>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d161      	bne.n	8006230 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800616c:	4b35      	ldr	r3, [pc, #212]	@ (8006244 <xTaskResumeAll+0x11c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d05d      	beq.n	8006230 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006174:	e02e      	b.n	80061d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <xTaskResumeAll+0x120>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3318      	adds	r3, #24
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fd49 	bl	8005c1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fd44 	bl	8005c1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	2201      	movs	r2, #1
 8006198:	409a      	lsls	r2, r3
 800619a:	4b2c      	ldr	r3, [pc, #176]	@ (800624c <xTaskResumeAll+0x124>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4313      	orrs	r3, r2
 80061a0:	4a2a      	ldr	r2, [pc, #168]	@ (800624c <xTaskResumeAll+0x124>)
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4a27      	ldr	r2, [pc, #156]	@ (8006250 <xTaskResumeAll+0x128>)
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	4610      	mov	r0, r2
 80061bc:	f7ff fcd0 	bl	8005b60 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c4:	4b23      	ldr	r3, [pc, #140]	@ (8006254 <xTaskResumeAll+0x12c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061ce:	4b22      	ldr	r3, [pc, #136]	@ (8006258 <xTaskResumeAll+0x130>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006248 <xTaskResumeAll+0x120>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1cc      	bne.n	8006176 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061e2:	f000 fa19 	bl	8006618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061e6:	4b1d      	ldr	r3, [pc, #116]	@ (800625c <xTaskResumeAll+0x134>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d010      	beq.n	8006214 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061f2:	f000 f837 	bl	8006264 <xTaskIncrementTick>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061fc:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <xTaskResumeAll+0x130>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f1      	bne.n	80061f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800620e:	4b13      	ldr	r3, [pc, #76]	@ (800625c <xTaskResumeAll+0x134>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006214:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <xTaskResumeAll+0x130>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006220:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <xTaskResumeAll+0x138>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006230:	f000 fbdc 	bl	80069ec <vPortExitCritical>

	return xAlreadyYielded;
 8006234:	68bb      	ldr	r3, [r7, #8]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	2000078c 	.word	0x2000078c
 8006244:	20000764 	.word	0x20000764
 8006248:	20000724 	.word	0x20000724
 800624c:	2000076c 	.word	0x2000076c
 8006250:	20000668 	.word	0x20000668
 8006254:	20000664 	.word	0x20000664
 8006258:	20000778 	.word	0x20000778
 800625c:	20000774 	.word	0x20000774
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626e:	4b4f      	ldr	r3, [pc, #316]	@ (80063ac <xTaskIncrementTick+0x148>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 808f 	bne.w	8006396 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006278:	4b4d      	ldr	r3, [pc, #308]	@ (80063b0 <xTaskIncrementTick+0x14c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006280:	4a4b      	ldr	r2, [pc, #300]	@ (80063b0 <xTaskIncrementTick+0x14c>)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d121      	bne.n	80062d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800628c:	4b49      	ldr	r3, [pc, #292]	@ (80063b4 <xTaskIncrementTick+0x150>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	603b      	str	r3, [r7, #0]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xTaskIncrementTick+0x46>
 80062ae:	4b41      	ldr	r3, [pc, #260]	@ (80063b4 <xTaskIncrementTick+0x150>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	4b40      	ldr	r3, [pc, #256]	@ (80063b8 <xTaskIncrementTick+0x154>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a3e      	ldr	r2, [pc, #248]	@ (80063b4 <xTaskIncrementTick+0x150>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	4a3e      	ldr	r2, [pc, #248]	@ (80063b8 <xTaskIncrementTick+0x154>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	4b3e      	ldr	r3, [pc, #248]	@ (80063bc <xTaskIncrementTick+0x158>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a3c      	ldr	r2, [pc, #240]	@ (80063bc <xTaskIncrementTick+0x158>)
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	f000 f9a4 	bl	8006618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062d0:	4b3b      	ldr	r3, [pc, #236]	@ (80063c0 <xTaskIncrementTick+0x15c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d348      	bcc.n	800636c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062da:	4b36      	ldr	r3, [pc, #216]	@ (80063b4 <xTaskIncrementTick+0x150>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e4:	4b36      	ldr	r3, [pc, #216]	@ (80063c0 <xTaskIncrementTick+0x15c>)
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062ea:	601a      	str	r2, [r3, #0]
					break;
 80062ec:	e03e      	b.n	800636c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	4b31      	ldr	r3, [pc, #196]	@ (80063b4 <xTaskIncrementTick+0x150>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d203      	bcs.n	800630e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006306:	4a2e      	ldr	r2, [pc, #184]	@ (80063c0 <xTaskIncrementTick+0x15c>)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800630c:	e02e      	b.n	800636c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3304      	adds	r3, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fc81 	bl	8005c1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	3318      	adds	r3, #24
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fc78 	bl	8005c1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	2201      	movs	r2, #1
 8006330:	409a      	lsls	r2, r3
 8006332:	4b24      	ldr	r3, [pc, #144]	@ (80063c4 <xTaskIncrementTick+0x160>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4313      	orrs	r3, r2
 8006338:	4a22      	ldr	r2, [pc, #136]	@ (80063c4 <xTaskIncrementTick+0x160>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a1f      	ldr	r2, [pc, #124]	@ (80063c8 <xTaskIncrementTick+0x164>)
 800634a:	441a      	add	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7ff fc04 	bl	8005b60 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635c:	4b1b      	ldr	r3, [pc, #108]	@ (80063cc <xTaskIncrementTick+0x168>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	429a      	cmp	r2, r3
 8006364:	d3b9      	bcc.n	80062da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636a:	e7b6      	b.n	80062da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800636c:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <xTaskIncrementTick+0x168>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006372:	4915      	ldr	r1, [pc, #84]	@ (80063c8 <xTaskIncrementTick+0x164>)
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d901      	bls.n	8006388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006388:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <xTaskIncrementTick+0x16c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e004      	b.n	80063a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006396:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <xTaskIncrementTick+0x170>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	4a0d      	ldr	r2, [pc, #52]	@ (80063d4 <xTaskIncrementTick+0x170>)
 800639e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063a0:	697b      	ldr	r3, [r7, #20]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	2000078c 	.word	0x2000078c
 80063b0:	20000768 	.word	0x20000768
 80063b4:	2000071c 	.word	0x2000071c
 80063b8:	20000720 	.word	0x20000720
 80063bc:	2000077c 	.word	0x2000077c
 80063c0:	20000784 	.word	0x20000784
 80063c4:	2000076c 	.word	0x2000076c
 80063c8:	20000668 	.word	0x20000668
 80063cc:	20000664 	.word	0x20000664
 80063d0:	20000778 	.word	0x20000778
 80063d4:	20000774 	.word	0x20000774

080063d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063de:	4b2a      	ldr	r3, [pc, #168]	@ (8006488 <vTaskSwitchContext+0xb0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063e6:	4b29      	ldr	r3, [pc, #164]	@ (800648c <vTaskSwitchContext+0xb4>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063ec:	e045      	b.n	800647a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80063ee:	4b27      	ldr	r3, [pc, #156]	@ (800648c <vTaskSwitchContext+0xb4>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f4:	4b26      	ldr	r3, [pc, #152]	@ (8006490 <vTaskSwitchContext+0xb8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	fab3 f383 	clz	r3, r3
 8006400:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	f1c3 031f 	rsb	r3, r3, #31
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	4922      	ldr	r1, [pc, #136]	@ (8006494 <vTaskSwitchContext+0xbc>)
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <vTaskSwitchContext+0x5e>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <vTaskSwitchContext+0x5a>
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4a14      	ldr	r2, [pc, #80]	@ (8006494 <vTaskSwitchContext+0xbc>)
 8006442:	4413      	add	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	3308      	adds	r3, #8
 8006458:	429a      	cmp	r2, r3
 800645a:	d104      	bne.n	8006466 <vTaskSwitchContext+0x8e>
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4a0a      	ldr	r2, [pc, #40]	@ (8006498 <vTaskSwitchContext+0xc0>)
 800646e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006470:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <vTaskSwitchContext+0xc0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	334c      	adds	r3, #76	@ 0x4c
 8006476:	4a09      	ldr	r2, [pc, #36]	@ (800649c <vTaskSwitchContext+0xc4>)
 8006478:	6013      	str	r3, [r2, #0]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	2000078c 	.word	0x2000078c
 800648c:	20000778 	.word	0x20000778
 8006490:	2000076c 	.word	0x2000076c
 8006494:	20000668 	.word	0x20000668
 8006498:	20000664 	.word	0x20000664
 800649c:	2000001c 	.word	0x2000001c

080064a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064a8:	f000 f852 	bl	8006550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <prvIdleTask+0x28>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d9f9      	bls.n	80064a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <prvIdleTask+0x2c>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064c4:	e7f0      	b.n	80064a8 <prvIdleTask+0x8>
 80064c6:	bf00      	nop
 80064c8:	20000668 	.word	0x20000668
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	e00c      	b.n	80064f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4a12      	ldr	r2, [pc, #72]	@ (8006530 <prvInitialiseTaskLists+0x60>)
 80064e8:	4413      	add	r3, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fb0b 	bl	8005b06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3301      	adds	r3, #1
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d9ef      	bls.n	80064dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064fc:	480d      	ldr	r0, [pc, #52]	@ (8006534 <prvInitialiseTaskLists+0x64>)
 80064fe:	f7ff fb02 	bl	8005b06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006502:	480d      	ldr	r0, [pc, #52]	@ (8006538 <prvInitialiseTaskLists+0x68>)
 8006504:	f7ff faff 	bl	8005b06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006508:	480c      	ldr	r0, [pc, #48]	@ (800653c <prvInitialiseTaskLists+0x6c>)
 800650a:	f7ff fafc 	bl	8005b06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800650e:	480c      	ldr	r0, [pc, #48]	@ (8006540 <prvInitialiseTaskLists+0x70>)
 8006510:	f7ff faf9 	bl	8005b06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006514:	480b      	ldr	r0, [pc, #44]	@ (8006544 <prvInitialiseTaskLists+0x74>)
 8006516:	f7ff faf6 	bl	8005b06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800651a:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <prvInitialiseTaskLists+0x78>)
 800651c:	4a05      	ldr	r2, [pc, #20]	@ (8006534 <prvInitialiseTaskLists+0x64>)
 800651e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <prvInitialiseTaskLists+0x7c>)
 8006522:	4a05      	ldr	r2, [pc, #20]	@ (8006538 <prvInitialiseTaskLists+0x68>)
 8006524:	601a      	str	r2, [r3, #0]
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000668 	.word	0x20000668
 8006534:	200006f4 	.word	0x200006f4
 8006538:	20000708 	.word	0x20000708
 800653c:	20000724 	.word	0x20000724
 8006540:	20000738 	.word	0x20000738
 8006544:	20000750 	.word	0x20000750
 8006548:	2000071c 	.word	0x2000071c
 800654c:	20000720 	.word	0x20000720

08006550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006556:	e019      	b.n	800658c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006558:	f000 fa16 	bl	8006988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800655c:	4b10      	ldr	r3, [pc, #64]	@ (80065a0 <prvCheckTasksWaitingTermination+0x50>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fb56 	bl	8005c1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800656e:	4b0d      	ldr	r3, [pc, #52]	@ (80065a4 <prvCheckTasksWaitingTermination+0x54>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3b01      	subs	r3, #1
 8006574:	4a0b      	ldr	r2, [pc, #44]	@ (80065a4 <prvCheckTasksWaitingTermination+0x54>)
 8006576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <prvCheckTasksWaitingTermination+0x58>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3b01      	subs	r3, #1
 800657e:	4a0a      	ldr	r2, [pc, #40]	@ (80065a8 <prvCheckTasksWaitingTermination+0x58>)
 8006580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006582:	f000 fa33 	bl	80069ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f810 	bl	80065ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <prvCheckTasksWaitingTermination+0x58>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e1      	bne.n	8006558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000738 	.word	0x20000738
 80065a4:	20000764 	.word	0x20000764
 80065a8:	2000074c 	.word	0x2000074c

080065ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	334c      	adds	r3, #76	@ 0x4c
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fa27 	bl	8007a0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fb89 	bl	8006ce4 <vPortFree>
				vPortFree( pxTCB );
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb86 	bl	8006ce4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065d8:	e019      	b.n	800660e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d103      	bne.n	80065ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb7d 	bl	8006ce4 <vPortFree>
	}
 80065ea:	e010      	b.n	800660e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d00b      	beq.n	800660e <prvDeleteTCB+0x62>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <prvDeleteTCB+0x5e>
	}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661e:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <prvResetNextTaskUnblockTime+0x38>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006628:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <prvResetNextTaskUnblockTime+0x3c>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800662e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006630:	e008      	b.n	8006644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006632:	4b07      	ldr	r3, [pc, #28]	@ (8006650 <prvResetNextTaskUnblockTime+0x38>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4a04      	ldr	r2, [pc, #16]	@ (8006654 <prvResetNextTaskUnblockTime+0x3c>)
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	2000071c 	.word	0x2000071c
 8006654:	20000784 	.word	0x20000784

08006658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006662:	4b29      	ldr	r3, [pc, #164]	@ (8006708 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006668:	4b28      	ldr	r3, [pc, #160]	@ (800670c <prvAddCurrentTaskToDelayedList+0xb4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fad3 	bl	8005c1a <uxListRemove>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800667a:	4b24      	ldr	r3, [pc, #144]	@ (800670c <prvAddCurrentTaskToDelayedList+0xb4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006680:	2201      	movs	r2, #1
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43da      	mvns	r2, r3
 8006688:	4b21      	ldr	r3, [pc, #132]	@ (8006710 <prvAddCurrentTaskToDelayedList+0xb8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4013      	ands	r3, r2
 800668e:	4a20      	ldr	r2, [pc, #128]	@ (8006710 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006690:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006698:	d10a      	bne.n	80066b0 <prvAddCurrentTaskToDelayedList+0x58>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a0:	4b1a      	ldr	r3, [pc, #104]	@ (800670c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	481a      	ldr	r0, [pc, #104]	@ (8006714 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066aa:	f7ff fa59 	bl	8005b60 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066ae:	e026      	b.n	80066fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066b8:	4b14      	ldr	r3, [pc, #80]	@ (800670c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d209      	bcs.n	80066dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c8:	4b13      	ldr	r3, [pc, #76]	@ (8006718 <prvAddCurrentTaskToDelayedList+0xc0>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	@ (800670c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7ff fa67 	bl	8005ba8 <vListInsert>
}
 80066da:	e010      	b.n	80066fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066dc:	4b0f      	ldr	r3, [pc, #60]	@ (800671c <prvAddCurrentTaskToDelayedList+0xc4>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <prvAddCurrentTaskToDelayedList+0xb4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7ff fa5d 	bl	8005ba8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006720 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d202      	bcs.n	80066fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066f8:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6013      	str	r3, [r2, #0]
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000768 	.word	0x20000768
 800670c:	20000664 	.word	0x20000664
 8006710:	2000076c 	.word	0x2000076c
 8006714:	20000750 	.word	0x20000750
 8006718:	20000720 	.word	0x20000720
 800671c:	2000071c 	.word	0x2000071c
 8006720:	20000784 	.word	0x20000784

08006724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3b04      	subs	r3, #4
 8006734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3b04      	subs	r3, #4
 8006742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0201 	bic.w	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b04      	subs	r3, #4
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006754:	4a0c      	ldr	r2, [pc, #48]	@ (8006788 <pxPortInitialiseStack+0x64>)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b14      	subs	r3, #20
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3b04      	subs	r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f06f 0202 	mvn.w	r2, #2
 8006772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3b20      	subs	r3, #32
 8006778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800677a:	68fb      	ldr	r3, [r7, #12]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	0800678d 	.word	0x0800678d

0800678c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <prvTaskExitError+0x58>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800679e:	d00b      	beq.n	80067b8 <prvTaskExitError+0x2c>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <prvTaskExitError+0x28>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60bb      	str	r3, [r7, #8]
}
 80067ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067cc:	bf00      	nop
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0fc      	beq.n	80067ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000000c 	.word	0x2000000c
	...

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	20000664 	.word	0x20000664
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006818:	4808      	ldr	r0, [pc, #32]	@ (800683c <prvPortStartFirstTask+0x24>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8814 	msr	CONTROL, r0
 800682a:	b662      	cpsie	i
 800682c:	b661      	cpsie	f
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	df00      	svc	0
 8006838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800683a:	bf00      	nop
 800683c:	e000ed08 	.word	0xe000ed08

08006840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006846:	4b47      	ldr	r3, [pc, #284]	@ (8006964 <xPortStartScheduler+0x124>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a47      	ldr	r2, [pc, #284]	@ (8006968 <xPortStartScheduler+0x128>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10b      	bne.n	8006868 <xPortStartScheduler+0x28>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006868:	4b3e      	ldr	r3, [pc, #248]	@ (8006964 <xPortStartScheduler+0x124>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a3f      	ldr	r2, [pc, #252]	@ (800696c <xPortStartScheduler+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10b      	bne.n	800688a <xPortStartScheduler+0x4a>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	613b      	str	r3, [r7, #16]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800688a:	4b39      	ldr	r3, [pc, #228]	@ (8006970 <xPortStartScheduler+0x130>)
 800688c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	22ff      	movs	r2, #255	@ 0xff
 800689a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <xPortStartScheduler+0x134>)
 80068b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <xPortStartScheduler+0x138>)
 80068b4:	2207      	movs	r2, #7
 80068b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b8:	e009      	b.n	80068ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006978 <xPortStartScheduler+0x138>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3b01      	subs	r3, #1
 80068c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <xPortStartScheduler+0x138>)
 80068c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d6:	2b80      	cmp	r3, #128	@ 0x80
 80068d8:	d0ef      	beq.n	80068ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068da:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <xPortStartScheduler+0x138>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1c3 0307 	rsb	r3, r3, #7
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d00b      	beq.n	80068fe <xPortStartScheduler+0xbe>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60bb      	str	r3, [r7, #8]
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006978 <xPortStartScheduler+0x138>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <xPortStartScheduler+0x138>)
 8006906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <xPortStartScheduler+0x138>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006910:	4a19      	ldr	r2, [pc, #100]	@ (8006978 <xPortStartScheduler+0x138>)
 8006912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <xPortStartScheduler+0x13c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a16      	ldr	r2, [pc, #88]	@ (800697c <xPortStartScheduler+0x13c>)
 8006922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006928:	4b14      	ldr	r3, [pc, #80]	@ (800697c <xPortStartScheduler+0x13c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a13      	ldr	r2, [pc, #76]	@ (800697c <xPortStartScheduler+0x13c>)
 800692e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006934:	f000 f8da 	bl	8006aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <xPortStartScheduler+0x140>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800693e:	f000 f8f9 	bl	8006b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006942:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <xPortStartScheduler+0x144>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a0f      	ldr	r2, [pc, #60]	@ (8006984 <xPortStartScheduler+0x144>)
 8006948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800694c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800694e:	f7ff ff63 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006952:	f7ff fd41 	bl	80063d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006956:	f7ff ff19 	bl	800678c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	e000ed00 	.word	0xe000ed00
 8006968:	410fc271 	.word	0x410fc271
 800696c:	410fc270 	.word	0x410fc270
 8006970:	e000e400 	.word	0xe000e400
 8006974:	20000790 	.word	0x20000790
 8006978:	20000794 	.word	0x20000794
 800697c:	e000ed20 	.word	0xe000ed20
 8006980:	2000000c 	.word	0x2000000c
 8006984:	e000ef34 	.word	0xe000ef34

08006988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069a2:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ac:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <vPortEnterCritical+0x5c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d110      	bne.n	80069d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069b4:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <vPortEnterCritical+0x60>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	603b      	str	r3, [r7, #0]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <vPortEnterCritical+0x4a>
	}
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000000c 	.word	0x2000000c
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069f2:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <vPortExitCritical+0x26>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	607b      	str	r3, [r7, #4]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4a08      	ldr	r2, [pc, #32]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a1c:	4b07      	ldr	r3, [pc, #28]	@ (8006a3c <vPortExitCritical+0x50>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <vPortExitCritical+0x44>
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	2000000c 	.word	0x2000000c

08006a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a40:	f3ef 8009 	mrs	r0, PSP
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <pxCurrentTCBConst>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f01e 0f10 	tst.w	lr, #16
 8006a50:	bf08      	it	eq
 8006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a64:	f380 8811 	msr	BASEPRI, r0
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f7ff fcb2 	bl	80063d8 <vTaskSwitchContext>
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f380 8811 	msr	BASEPRI, r0
 8006a7c:	bc09      	pop	{r0, r3}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	f01e 0f10 	tst.w	lr, #16
 8006a8a:	bf08      	it	eq
 8006a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a90:	f380 8809 	msr	PSP, r0
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst>:
 8006aa0:	20000664 	.word	0x20000664
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ac2:	f7ff fbcf 	bl	8006264 <xTaskIncrementTick>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006acc:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <SysTick_Handler+0x40>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f383 8811 	msr	BASEPRI, r3
}
 8006ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <vPortSetupTimerInterrupt+0x38>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <vPortSetupTimerInterrupt+0x3c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <vPortSetupTimerInterrupt+0x40>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	4a09      	ldr	r2, [pc, #36]	@ (8006b30 <vPortSetupTimerInterrupt+0x44>)
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b0e:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010
 8006b24:	e000e018 	.word	0xe000e018
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	10624dd3 	.word	0x10624dd3
 8006b30:	e000e014 	.word	0xe000e014

08006b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b44 <vPortEnableVFP+0x10>
 8006b38:	6801      	ldr	r1, [r0, #0]
 8006b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b3e:	6001      	str	r1, [r0, #0]
 8006b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b42:	bf00      	nop
 8006b44:	e000ed88 	.word	0xe000ed88

08006b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	@ 0x28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b54:	f7ff fada 	bl	800610c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b58:	4b5c      	ldr	r3, [pc, #368]	@ (8006ccc <pvPortMalloc+0x184>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b60:	f000 f924 	bl	8006dac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b64:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd0 <pvPortMalloc+0x188>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8095 	bne.w	8006c9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01e      	beq.n	8006bb6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b78:	2208      	movs	r2, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d015      	beq.n	8006bb6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	3308      	adds	r3, #8
 8006b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <pvPortMalloc+0x6e>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	617b      	str	r3, [r7, #20]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d06f      	beq.n	8006c9c <pvPortMalloc+0x154>
 8006bbc:	4b45      	ldr	r3, [pc, #276]	@ (8006cd4 <pvPortMalloc+0x18c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d86a      	bhi.n	8006c9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bc6:	4b44      	ldr	r3, [pc, #272]	@ (8006cd8 <pvPortMalloc+0x190>)
 8006bc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bca:	4b43      	ldr	r3, [pc, #268]	@ (8006cd8 <pvPortMalloc+0x190>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bd0:	e004      	b.n	8006bdc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d903      	bls.n	8006bee <pvPortMalloc+0xa6>
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f1      	bne.n	8006bd2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bee:	4b37      	ldr	r3, [pc, #220]	@ (8006ccc <pvPortMalloc+0x184>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d051      	beq.n	8006c9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4413      	add	r3, r2
 8006c00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	1ad2      	subs	r2, r2, r3
 8006c12:	2308      	movs	r3, #8
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d920      	bls.n	8006c5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <pvPortMalloc+0xfc>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	613b      	str	r3, [r7, #16]
}
 8006c3e:	bf00      	nop
 8006c40:	bf00      	nop
 8006c42:	e7fd      	b.n	8006c40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c56:	69b8      	ldr	r0, [r7, #24]
 8006c58:	f000 f90a 	bl	8006e70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd4 <pvPortMalloc+0x18c>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd4 <pvPortMalloc+0x18c>)
 8006c68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd4 <pvPortMalloc+0x18c>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cdc <pvPortMalloc+0x194>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d203      	bcs.n	8006c7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c76:	4b17      	ldr	r3, [pc, #92]	@ (8006cd4 <pvPortMalloc+0x18c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <pvPortMalloc+0x194>)
 8006c7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4b13      	ldr	r3, [pc, #76]	@ (8006cd0 <pvPortMalloc+0x188>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c92:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <pvPortMalloc+0x198>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a11      	ldr	r2, [pc, #68]	@ (8006ce0 <pvPortMalloc+0x198>)
 8006c9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c9c:	f7ff fa44 	bl	8006128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <pvPortMalloc+0x17a>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60fb      	str	r3, [r7, #12]
}
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
 8006cc0:	e7fd      	b.n	8006cbe <pvPortMalloc+0x176>
	return pvReturn;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3728      	adds	r7, #40	@ 0x28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200043a0 	.word	0x200043a0
 8006cd0:	200043b4 	.word	0x200043b4
 8006cd4:	200043a4 	.word	0x200043a4
 8006cd8:	20004398 	.word	0x20004398
 8006cdc:	200043a8 	.word	0x200043a8
 8006ce0:	200043ac 	.word	0x200043ac

08006ce4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d04f      	beq.n	8006d96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	425b      	negs	r3, r3
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	4b25      	ldr	r3, [pc, #148]	@ (8006da0 <vPortFree+0xbc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <vPortFree+0x46>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60fb      	str	r3, [r7, #12]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <vPortFree+0x66>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60bb      	str	r3, [r7, #8]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4b14      	ldr	r3, [pc, #80]	@ (8006da0 <vPortFree+0xbc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01e      	beq.n	8006d96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11a      	bne.n	8006d96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	4b0e      	ldr	r3, [pc, #56]	@ (8006da0 <vPortFree+0xbc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d70:	f7ff f9cc 	bl	800610c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <vPortFree+0xc0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4a09      	ldr	r2, [pc, #36]	@ (8006da4 <vPortFree+0xc0>)
 8006d80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d82:	6938      	ldr	r0, [r7, #16]
 8006d84:	f000 f874 	bl	8006e70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d88:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <vPortFree+0xc4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	4a06      	ldr	r2, [pc, #24]	@ (8006da8 <vPortFree+0xc4>)
 8006d90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d92:	f7ff f9c9 	bl	8006128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d96:	bf00      	nop
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200043b4 	.word	0x200043b4
 8006da4:	200043a4 	.word	0x200043a4
 8006da8:	200043b0 	.word	0x200043b0

08006dac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006db2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006db6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006db8:	4b27      	ldr	r3, [pc, #156]	@ (8006e58 <prvHeapInit+0xac>)
 8006dba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3307      	adds	r3, #7
 8006dca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0307 	bic.w	r3, r3, #7
 8006dd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	4a1f      	ldr	r2, [pc, #124]	@ (8006e58 <prvHeapInit+0xac>)
 8006ddc:	4413      	add	r3, r2
 8006dde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006de4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e5c <prvHeapInit+0xb0>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dea:	4b1c      	ldr	r3, [pc, #112]	@ (8006e5c <prvHeapInit+0xb0>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4413      	add	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006df8:	2208      	movs	r2, #8
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	@ (8006e60 <prvHeapInit+0xb4>)
 8006e0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	@ (8006e60 <prvHeapInit+0xb4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e16:	4b12      	ldr	r3, [pc, #72]	@ (8006e60 <prvHeapInit+0xb4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <prvHeapInit+0xb4>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a0a      	ldr	r2, [pc, #40]	@ (8006e64 <prvHeapInit+0xb8>)
 8006e3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a09      	ldr	r2, [pc, #36]	@ (8006e68 <prvHeapInit+0xbc>)
 8006e42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e44:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <prvHeapInit+0xc0>)
 8006e46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e4a:	601a      	str	r2, [r3, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	20000798 	.word	0x20000798
 8006e5c:	20004398 	.word	0x20004398
 8006e60:	200043a0 	.word	0x200043a0
 8006e64:	200043a8 	.word	0x200043a8
 8006e68:	200043a4 	.word	0x200043a4
 8006e6c:	200043b4 	.word	0x200043b4

08006e70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e78:	4b28      	ldr	r3, [pc, #160]	@ (8006f1c <prvInsertBlockIntoFreeList+0xac>)
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e002      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x14>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d8f7      	bhi.n	8006e7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d108      	bne.n	8006eb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d118      	bne.n	8006ef8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <prvInsertBlockIntoFreeList+0xb0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d00d      	beq.n	8006eee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e008      	b.n	8006f00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eee:	4b0c      	ldr	r3, [pc, #48]	@ (8006f20 <prvInsertBlockIntoFreeList+0xb0>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e003      	b.n	8006f00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d002      	beq.n	8006f0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20004398 	.word	0x20004398
 8006f20:	200043a0 	.word	0x200043a0

08006f24 <__cvt>:
 8006f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	ec57 6b10 	vmov	r6, r7, d0
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	4619      	mov	r1, r3
 8006f32:	463b      	mov	r3, r7
 8006f34:	bfbb      	ittet	lt
 8006f36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f3a:	461f      	movlt	r7, r3
 8006f3c:	2300      	movge	r3, #0
 8006f3e:	232d      	movlt	r3, #45	@ 0x2d
 8006f40:	700b      	strb	r3, [r1, #0]
 8006f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f48:	4691      	mov	r9, r2
 8006f4a:	f023 0820 	bic.w	r8, r3, #32
 8006f4e:	bfbc      	itt	lt
 8006f50:	4632      	movlt	r2, r6
 8006f52:	4616      	movlt	r6, r2
 8006f54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f58:	d005      	beq.n	8006f66 <__cvt+0x42>
 8006f5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f5e:	d100      	bne.n	8006f62 <__cvt+0x3e>
 8006f60:	3401      	adds	r4, #1
 8006f62:	2102      	movs	r1, #2
 8006f64:	e000      	b.n	8006f68 <__cvt+0x44>
 8006f66:	2103      	movs	r1, #3
 8006f68:	ab03      	add	r3, sp, #12
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	ab02      	add	r3, sp, #8
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	ec47 6b10 	vmov	d0, r6, r7
 8006f74:	4653      	mov	r3, sl
 8006f76:	4622      	mov	r2, r4
 8006f78:	f000 fe3e 	bl	8007bf8 <_dtoa_r>
 8006f7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f80:	4605      	mov	r5, r0
 8006f82:	d119      	bne.n	8006fb8 <__cvt+0x94>
 8006f84:	f019 0f01 	tst.w	r9, #1
 8006f88:	d00e      	beq.n	8006fa8 <__cvt+0x84>
 8006f8a:	eb00 0904 	add.w	r9, r0, r4
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	f7f9 fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 8006f9a:	b108      	cbz	r0, 8006fa0 <__cvt+0x7c>
 8006f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa0:	2230      	movs	r2, #48	@ 0x30
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	454b      	cmp	r3, r9
 8006fa6:	d31e      	bcc.n	8006fe6 <__cvt+0xc2>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fac:	1b5b      	subs	r3, r3, r5
 8006fae:	4628      	mov	r0, r5
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	b004      	add	sp, #16
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fbc:	eb00 0904 	add.w	r9, r0, r4
 8006fc0:	d1e5      	bne.n	8006f8e <__cvt+0x6a>
 8006fc2:	7803      	ldrb	r3, [r0, #0]
 8006fc4:	2b30      	cmp	r3, #48	@ 0x30
 8006fc6:	d10a      	bne.n	8006fde <__cvt+0xba>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 8006fd4:	b918      	cbnz	r0, 8006fde <__cvt+0xba>
 8006fd6:	f1c4 0401 	rsb	r4, r4, #1
 8006fda:	f8ca 4000 	str.w	r4, [sl]
 8006fde:	f8da 3000 	ldr.w	r3, [sl]
 8006fe2:	4499      	add	r9, r3
 8006fe4:	e7d3      	b.n	8006f8e <__cvt+0x6a>
 8006fe6:	1c59      	adds	r1, r3, #1
 8006fe8:	9103      	str	r1, [sp, #12]
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e7d9      	b.n	8006fa2 <__cvt+0x7e>

08006fee <__exponent>:
 8006fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ff0:	2900      	cmp	r1, #0
 8006ff2:	bfba      	itte	lt
 8006ff4:	4249      	neglt	r1, r1
 8006ff6:	232d      	movlt	r3, #45	@ 0x2d
 8006ff8:	232b      	movge	r3, #43	@ 0x2b
 8006ffa:	2909      	cmp	r1, #9
 8006ffc:	7002      	strb	r2, [r0, #0]
 8006ffe:	7043      	strb	r3, [r0, #1]
 8007000:	dd29      	ble.n	8007056 <__exponent+0x68>
 8007002:	f10d 0307 	add.w	r3, sp, #7
 8007006:	461d      	mov	r5, r3
 8007008:	270a      	movs	r7, #10
 800700a:	461a      	mov	r2, r3
 800700c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007010:	fb07 1416 	mls	r4, r7, r6, r1
 8007014:	3430      	adds	r4, #48	@ 0x30
 8007016:	f802 4c01 	strb.w	r4, [r2, #-1]
 800701a:	460c      	mov	r4, r1
 800701c:	2c63      	cmp	r4, #99	@ 0x63
 800701e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007022:	4631      	mov	r1, r6
 8007024:	dcf1      	bgt.n	800700a <__exponent+0x1c>
 8007026:	3130      	adds	r1, #48	@ 0x30
 8007028:	1e94      	subs	r4, r2, #2
 800702a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800702e:	1c41      	adds	r1, r0, #1
 8007030:	4623      	mov	r3, r4
 8007032:	42ab      	cmp	r3, r5
 8007034:	d30a      	bcc.n	800704c <__exponent+0x5e>
 8007036:	f10d 0309 	add.w	r3, sp, #9
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	42ac      	cmp	r4, r5
 800703e:	bf88      	it	hi
 8007040:	2300      	movhi	r3, #0
 8007042:	3302      	adds	r3, #2
 8007044:	4403      	add	r3, r0
 8007046:	1a18      	subs	r0, r3, r0
 8007048:	b003      	add	sp, #12
 800704a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007050:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007054:	e7ed      	b.n	8007032 <__exponent+0x44>
 8007056:	2330      	movs	r3, #48	@ 0x30
 8007058:	3130      	adds	r1, #48	@ 0x30
 800705a:	7083      	strb	r3, [r0, #2]
 800705c:	70c1      	strb	r1, [r0, #3]
 800705e:	1d03      	adds	r3, r0, #4
 8007060:	e7f1      	b.n	8007046 <__exponent+0x58>
	...

08007064 <_printf_float>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	b08d      	sub	sp, #52	@ 0x34
 800706a:	460c      	mov	r4, r1
 800706c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007070:	4616      	mov	r6, r2
 8007072:	461f      	mov	r7, r3
 8007074:	4605      	mov	r5, r0
 8007076:	f000 fcc5 	bl	8007a04 <_localeconv_r>
 800707a:	6803      	ldr	r3, [r0, #0]
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 f916 	bl	80002b0 <strlen>
 8007084:	2300      	movs	r3, #0
 8007086:	930a      	str	r3, [sp, #40]	@ 0x28
 8007088:	f8d8 3000 	ldr.w	r3, [r8]
 800708c:	9005      	str	r0, [sp, #20]
 800708e:	3307      	adds	r3, #7
 8007090:	f023 0307 	bic.w	r3, r3, #7
 8007094:	f103 0208 	add.w	r2, r3, #8
 8007098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800709c:	f8d4 b000 	ldr.w	fp, [r4]
 80070a0:	f8c8 2000 	str.w	r2, [r8]
 80070a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070ac:	9307      	str	r3, [sp, #28]
 80070ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80070b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ba:	4b9c      	ldr	r3, [pc, #624]	@ (800732c <_printf_float+0x2c8>)
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070c0:	f7f9 fd54 	bl	8000b6c <__aeabi_dcmpun>
 80070c4:	bb70      	cbnz	r0, 8007124 <_printf_float+0xc0>
 80070c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ca:	4b98      	ldr	r3, [pc, #608]	@ (800732c <_printf_float+0x2c8>)
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070d0:	f7f9 fd2e 	bl	8000b30 <__aeabi_dcmple>
 80070d4:	bb30      	cbnz	r0, 8007124 <_printf_float+0xc0>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 fd1d 	bl	8000b1c <__aeabi_dcmplt>
 80070e2:	b110      	cbz	r0, 80070ea <_printf_float+0x86>
 80070e4:	232d      	movs	r3, #45	@ 0x2d
 80070e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ea:	4a91      	ldr	r2, [pc, #580]	@ (8007330 <_printf_float+0x2cc>)
 80070ec:	4b91      	ldr	r3, [pc, #580]	@ (8007334 <_printf_float+0x2d0>)
 80070ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070f2:	bf8c      	ite	hi
 80070f4:	4690      	movhi	r8, r2
 80070f6:	4698      	movls	r8, r3
 80070f8:	2303      	movs	r3, #3
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	f02b 0304 	bic.w	r3, fp, #4
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	f04f 0900 	mov.w	r9, #0
 8007106:	9700      	str	r7, [sp, #0]
 8007108:	4633      	mov	r3, r6
 800710a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800710c:	4621      	mov	r1, r4
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f9d2 	bl	80074b8 <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	f040 808d 	bne.w	8007234 <_printf_float+0x1d0>
 800711a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800711e:	b00d      	add	sp, #52	@ 0x34
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 fd1e 	bl	8000b6c <__aeabi_dcmpun>
 8007130:	b140      	cbz	r0, 8007144 <_printf_float+0xe0>
 8007132:	464b      	mov	r3, r9
 8007134:	2b00      	cmp	r3, #0
 8007136:	bfbc      	itt	lt
 8007138:	232d      	movlt	r3, #45	@ 0x2d
 800713a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800713e:	4a7e      	ldr	r2, [pc, #504]	@ (8007338 <_printf_float+0x2d4>)
 8007140:	4b7e      	ldr	r3, [pc, #504]	@ (800733c <_printf_float+0x2d8>)
 8007142:	e7d4      	b.n	80070ee <_printf_float+0x8a>
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800714a:	9206      	str	r2, [sp, #24]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	d13b      	bne.n	80071c8 <_printf_float+0x164>
 8007150:	2306      	movs	r3, #6
 8007152:	6063      	str	r3, [r4, #4]
 8007154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007158:	2300      	movs	r3, #0
 800715a:	6022      	str	r2, [r4, #0]
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007164:	ab09      	add	r3, sp, #36	@ 0x24
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	ec49 8b10 	vmov	d0, r8, r9
 800716e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007172:	4628      	mov	r0, r5
 8007174:	f7ff fed6 	bl	8006f24 <__cvt>
 8007178:	9b06      	ldr	r3, [sp, #24]
 800717a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800717c:	2b47      	cmp	r3, #71	@ 0x47
 800717e:	4680      	mov	r8, r0
 8007180:	d129      	bne.n	80071d6 <_printf_float+0x172>
 8007182:	1cc8      	adds	r0, r1, #3
 8007184:	db02      	blt.n	800718c <_printf_float+0x128>
 8007186:	6863      	ldr	r3, [r4, #4]
 8007188:	4299      	cmp	r1, r3
 800718a:	dd41      	ble.n	8007210 <_printf_float+0x1ac>
 800718c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007190:	fa5f fa8a 	uxtb.w	sl, sl
 8007194:	3901      	subs	r1, #1
 8007196:	4652      	mov	r2, sl
 8007198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800719c:	9109      	str	r1, [sp, #36]	@ 0x24
 800719e:	f7ff ff26 	bl	8006fee <__exponent>
 80071a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a4:	1813      	adds	r3, r2, r0
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	4681      	mov	r9, r0
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	dc02      	bgt.n	80071b4 <_printf_float+0x150>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	07d2      	lsls	r2, r2, #31
 80071b2:	d501      	bpl.n	80071b8 <_printf_float+0x154>
 80071b4:	3301      	adds	r3, #1
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0a2      	beq.n	8007106 <_printf_float+0xa2>
 80071c0:	232d      	movs	r3, #45	@ 0x2d
 80071c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c6:	e79e      	b.n	8007106 <_printf_float+0xa2>
 80071c8:	9a06      	ldr	r2, [sp, #24]
 80071ca:	2a47      	cmp	r2, #71	@ 0x47
 80071cc:	d1c2      	bne.n	8007154 <_printf_float+0xf0>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1c0      	bne.n	8007154 <_printf_float+0xf0>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7bd      	b.n	8007152 <_printf_float+0xee>
 80071d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071da:	d9db      	bls.n	8007194 <_printf_float+0x130>
 80071dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071e0:	d118      	bne.n	8007214 <_printf_float+0x1b0>
 80071e2:	2900      	cmp	r1, #0
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	dd0b      	ble.n	8007200 <_printf_float+0x19c>
 80071e8:	6121      	str	r1, [r4, #16]
 80071ea:	b913      	cbnz	r3, 80071f2 <_printf_float+0x18e>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	07d0      	lsls	r0, r2, #31
 80071f0:	d502      	bpl.n	80071f8 <_printf_float+0x194>
 80071f2:	3301      	adds	r3, #1
 80071f4:	440b      	add	r3, r1
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071fa:	f04f 0900 	mov.w	r9, #0
 80071fe:	e7db      	b.n	80071b8 <_printf_float+0x154>
 8007200:	b913      	cbnz	r3, 8007208 <_printf_float+0x1a4>
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	07d2      	lsls	r2, r2, #31
 8007206:	d501      	bpl.n	800720c <_printf_float+0x1a8>
 8007208:	3302      	adds	r3, #2
 800720a:	e7f4      	b.n	80071f6 <_printf_float+0x192>
 800720c:	2301      	movs	r3, #1
 800720e:	e7f2      	b.n	80071f6 <_printf_float+0x192>
 8007210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007216:	4299      	cmp	r1, r3
 8007218:	db05      	blt.n	8007226 <_printf_float+0x1c2>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	6121      	str	r1, [r4, #16]
 800721e:	07d8      	lsls	r0, r3, #31
 8007220:	d5ea      	bpl.n	80071f8 <_printf_float+0x194>
 8007222:	1c4b      	adds	r3, r1, #1
 8007224:	e7e7      	b.n	80071f6 <_printf_float+0x192>
 8007226:	2900      	cmp	r1, #0
 8007228:	bfd4      	ite	le
 800722a:	f1c1 0202 	rsble	r2, r1, #2
 800722e:	2201      	movgt	r2, #1
 8007230:	4413      	add	r3, r2
 8007232:	e7e0      	b.n	80071f6 <_printf_float+0x192>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	055a      	lsls	r2, r3, #21
 8007238:	d407      	bmi.n	800724a <_printf_float+0x1e6>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	4642      	mov	r2, r8
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d12b      	bne.n	80072a0 <_printf_float+0x23c>
 8007248:	e767      	b.n	800711a <_printf_float+0xb6>
 800724a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800724e:	f240 80dd 	bls.w	800740c <_printf_float+0x3a8>
 8007252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007256:	2200      	movs	r2, #0
 8007258:	2300      	movs	r3, #0
 800725a:	f7f9 fc55 	bl	8000b08 <__aeabi_dcmpeq>
 800725e:	2800      	cmp	r0, #0
 8007260:	d033      	beq.n	80072ca <_printf_float+0x266>
 8007262:	4a37      	ldr	r2, [pc, #220]	@ (8007340 <_printf_float+0x2dc>)
 8007264:	2301      	movs	r3, #1
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	f43f af54 	beq.w	800711a <_printf_float+0xb6>
 8007272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007276:	4543      	cmp	r3, r8
 8007278:	db02      	blt.n	8007280 <_printf_float+0x21c>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07d8      	lsls	r0, r3, #31
 800727e:	d50f      	bpl.n	80072a0 <_printf_float+0x23c>
 8007280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f af45 	beq.w	800711a <_printf_float+0xb6>
 8007290:	f04f 0900 	mov.w	r9, #0
 8007294:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007298:	f104 0a1a 	add.w	sl, r4, #26
 800729c:	45c8      	cmp	r8, r9
 800729e:	dc09      	bgt.n	80072b4 <_printf_float+0x250>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	079b      	lsls	r3, r3, #30
 80072a4:	f100 8103 	bmi.w	80074ae <_printf_float+0x44a>
 80072a8:	68e0      	ldr	r0, [r4, #12]
 80072aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072ac:	4298      	cmp	r0, r3
 80072ae:	bfb8      	it	lt
 80072b0:	4618      	movlt	r0, r3
 80072b2:	e734      	b.n	800711e <_printf_float+0xba>
 80072b4:	2301      	movs	r3, #1
 80072b6:	4652      	mov	r2, sl
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	f43f af2b 	beq.w	800711a <_printf_float+0xb6>
 80072c4:	f109 0901 	add.w	r9, r9, #1
 80072c8:	e7e8      	b.n	800729c <_printf_float+0x238>
 80072ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dc39      	bgt.n	8007344 <_printf_float+0x2e0>
 80072d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007340 <_printf_float+0x2dc>)
 80072d2:	2301      	movs	r3, #1
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	f43f af1d 	beq.w	800711a <_printf_float+0xb6>
 80072e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072e4:	ea59 0303 	orrs.w	r3, r9, r3
 80072e8:	d102      	bne.n	80072f0 <_printf_float+0x28c>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	07d9      	lsls	r1, r3, #31
 80072ee:	d5d7      	bpl.n	80072a0 <_printf_float+0x23c>
 80072f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f af0d 	beq.w	800711a <_printf_float+0xb6>
 8007300:	f04f 0a00 	mov.w	sl, #0
 8007304:	f104 0b1a 	add.w	fp, r4, #26
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	425b      	negs	r3, r3
 800730c:	4553      	cmp	r3, sl
 800730e:	dc01      	bgt.n	8007314 <_printf_float+0x2b0>
 8007310:	464b      	mov	r3, r9
 8007312:	e793      	b.n	800723c <_printf_float+0x1d8>
 8007314:	2301      	movs	r3, #1
 8007316:	465a      	mov	r2, fp
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f aefb 	beq.w	800711a <_printf_float+0xb6>
 8007324:	f10a 0a01 	add.w	sl, sl, #1
 8007328:	e7ee      	b.n	8007308 <_printf_float+0x2a4>
 800732a:	bf00      	nop
 800732c:	7fefffff 	.word	0x7fefffff
 8007330:	08009d40 	.word	0x08009d40
 8007334:	08009d3c 	.word	0x08009d3c
 8007338:	08009d48 	.word	0x08009d48
 800733c:	08009d44 	.word	0x08009d44
 8007340:	08009d4c 	.word	0x08009d4c
 8007344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800734a:	4553      	cmp	r3, sl
 800734c:	bfa8      	it	ge
 800734e:	4653      	movge	r3, sl
 8007350:	2b00      	cmp	r3, #0
 8007352:	4699      	mov	r9, r3
 8007354:	dc36      	bgt.n	80073c4 <_printf_float+0x360>
 8007356:	f04f 0b00 	mov.w	fp, #0
 800735a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800735e:	f104 021a 	add.w	r2, r4, #26
 8007362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007364:	9306      	str	r3, [sp, #24]
 8007366:	eba3 0309 	sub.w	r3, r3, r9
 800736a:	455b      	cmp	r3, fp
 800736c:	dc31      	bgt.n	80073d2 <_printf_float+0x36e>
 800736e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007370:	459a      	cmp	sl, r3
 8007372:	dc3a      	bgt.n	80073ea <_printf_float+0x386>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	07da      	lsls	r2, r3, #31
 8007378:	d437      	bmi.n	80073ea <_printf_float+0x386>
 800737a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737c:	ebaa 0903 	sub.w	r9, sl, r3
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	ebaa 0303 	sub.w	r3, sl, r3
 8007386:	4599      	cmp	r9, r3
 8007388:	bfa8      	it	ge
 800738a:	4699      	movge	r9, r3
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	dc33      	bgt.n	80073fa <_printf_float+0x396>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800739a:	f104 0b1a 	add.w	fp, r4, #26
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	ebaa 0303 	sub.w	r3, sl, r3
 80073a4:	eba3 0309 	sub.w	r3, r3, r9
 80073a8:	4543      	cmp	r3, r8
 80073aa:	f77f af79 	ble.w	80072a0 <_printf_float+0x23c>
 80073ae:	2301      	movs	r3, #1
 80073b0:	465a      	mov	r2, fp
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f aeae 	beq.w	800711a <_printf_float+0xb6>
 80073be:	f108 0801 	add.w	r8, r8, #1
 80073c2:	e7ec      	b.n	800739e <_printf_float+0x33a>
 80073c4:	4642      	mov	r2, r8
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1c2      	bne.n	8007356 <_printf_float+0x2f2>
 80073d0:	e6a3      	b.n	800711a <_printf_float+0xb6>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	9206      	str	r2, [sp, #24]
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f ae9c 	beq.w	800711a <_printf_float+0xb6>
 80073e2:	9a06      	ldr	r2, [sp, #24]
 80073e4:	f10b 0b01 	add.w	fp, fp, #1
 80073e8:	e7bb      	b.n	8007362 <_printf_float+0x2fe>
 80073ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	d1c0      	bne.n	800737a <_printf_float+0x316>
 80073f8:	e68f      	b.n	800711a <_printf_float+0xb6>
 80073fa:	9a06      	ldr	r2, [sp, #24]
 80073fc:	464b      	mov	r3, r9
 80073fe:	4442      	add	r2, r8
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	d1c3      	bne.n	8007392 <_printf_float+0x32e>
 800740a:	e686      	b.n	800711a <_printf_float+0xb6>
 800740c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007410:	f1ba 0f01 	cmp.w	sl, #1
 8007414:	dc01      	bgt.n	800741a <_printf_float+0x3b6>
 8007416:	07db      	lsls	r3, r3, #31
 8007418:	d536      	bpl.n	8007488 <_printf_float+0x424>
 800741a:	2301      	movs	r3, #1
 800741c:	4642      	mov	r2, r8
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f ae78 	beq.w	800711a <_printf_float+0xb6>
 800742a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f ae70 	beq.w	800711a <_printf_float+0xb6>
 800743a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007446:	f7f9 fb5f 	bl	8000b08 <__aeabi_dcmpeq>
 800744a:	b9c0      	cbnz	r0, 800747e <_printf_float+0x41a>
 800744c:	4653      	mov	r3, sl
 800744e:	f108 0201 	add.w	r2, r8, #1
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	d10c      	bne.n	8007476 <_printf_float+0x412>
 800745c:	e65d      	b.n	800711a <_printf_float+0xb6>
 800745e:	2301      	movs	r3, #1
 8007460:	465a      	mov	r2, fp
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f ae56 	beq.w	800711a <_printf_float+0xb6>
 800746e:	f108 0801 	add.w	r8, r8, #1
 8007472:	45d0      	cmp	r8, sl
 8007474:	dbf3      	blt.n	800745e <_printf_float+0x3fa>
 8007476:	464b      	mov	r3, r9
 8007478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800747c:	e6df      	b.n	800723e <_printf_float+0x1da>
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	f104 0b1a 	add.w	fp, r4, #26
 8007486:	e7f4      	b.n	8007472 <_printf_float+0x40e>
 8007488:	2301      	movs	r3, #1
 800748a:	4642      	mov	r2, r8
 800748c:	e7e1      	b.n	8007452 <_printf_float+0x3ee>
 800748e:	2301      	movs	r3, #1
 8007490:	464a      	mov	r2, r9
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae3e 	beq.w	800711a <_printf_float+0xb6>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074a6:	1a5b      	subs	r3, r3, r1
 80074a8:	4543      	cmp	r3, r8
 80074aa:	dcf0      	bgt.n	800748e <_printf_float+0x42a>
 80074ac:	e6fc      	b.n	80072a8 <_printf_float+0x244>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	f104 0919 	add.w	r9, r4, #25
 80074b6:	e7f4      	b.n	80074a2 <_printf_float+0x43e>

080074b8 <_printf_common>:
 80074b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	4616      	mov	r6, r2
 80074be:	4698      	mov	r8, r3
 80074c0:	688a      	ldr	r2, [r1, #8]
 80074c2:	690b      	ldr	r3, [r1, #16]
 80074c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bfb8      	it	lt
 80074cc:	4613      	movlt	r3, r2
 80074ce:	6033      	str	r3, [r6, #0]
 80074d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074d4:	4607      	mov	r7, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	b10a      	cbz	r2, 80074de <_printf_common+0x26>
 80074da:	3301      	adds	r3, #1
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	0699      	lsls	r1, r3, #26
 80074e2:	bf42      	ittt	mi
 80074e4:	6833      	ldrmi	r3, [r6, #0]
 80074e6:	3302      	addmi	r3, #2
 80074e8:	6033      	strmi	r3, [r6, #0]
 80074ea:	6825      	ldr	r5, [r4, #0]
 80074ec:	f015 0506 	ands.w	r5, r5, #6
 80074f0:	d106      	bne.n	8007500 <_printf_common+0x48>
 80074f2:	f104 0a19 	add.w	sl, r4, #25
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	6832      	ldr	r2, [r6, #0]
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	42ab      	cmp	r3, r5
 80074fe:	dc26      	bgt.n	800754e <_printf_common+0x96>
 8007500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	3b00      	subs	r3, #0
 8007508:	bf18      	it	ne
 800750a:	2301      	movne	r3, #1
 800750c:	0692      	lsls	r2, r2, #26
 800750e:	d42b      	bmi.n	8007568 <_printf_common+0xb0>
 8007510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007514:	4641      	mov	r1, r8
 8007516:	4638      	mov	r0, r7
 8007518:	47c8      	blx	r9
 800751a:	3001      	adds	r0, #1
 800751c:	d01e      	beq.n	800755c <_printf_common+0xa4>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	f003 0306 	and.w	r3, r3, #6
 8007526:	2b04      	cmp	r3, #4
 8007528:	bf02      	ittt	eq
 800752a:	68e5      	ldreq	r5, [r4, #12]
 800752c:	6833      	ldreq	r3, [r6, #0]
 800752e:	1aed      	subeq	r5, r5, r3
 8007530:	68a3      	ldr	r3, [r4, #8]
 8007532:	bf0c      	ite	eq
 8007534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007538:	2500      	movne	r5, #0
 800753a:	4293      	cmp	r3, r2
 800753c:	bfc4      	itt	gt
 800753e:	1a9b      	subgt	r3, r3, r2
 8007540:	18ed      	addgt	r5, r5, r3
 8007542:	2600      	movs	r6, #0
 8007544:	341a      	adds	r4, #26
 8007546:	42b5      	cmp	r5, r6
 8007548:	d11a      	bne.n	8007580 <_printf_common+0xc8>
 800754a:	2000      	movs	r0, #0
 800754c:	e008      	b.n	8007560 <_printf_common+0xa8>
 800754e:	2301      	movs	r3, #1
 8007550:	4652      	mov	r2, sl
 8007552:	4641      	mov	r1, r8
 8007554:	4638      	mov	r0, r7
 8007556:	47c8      	blx	r9
 8007558:	3001      	adds	r0, #1
 800755a:	d103      	bne.n	8007564 <_printf_common+0xac>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007564:	3501      	adds	r5, #1
 8007566:	e7c6      	b.n	80074f6 <_printf_common+0x3e>
 8007568:	18e1      	adds	r1, r4, r3
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	2030      	movs	r0, #48	@ 0x30
 800756e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007572:	4422      	add	r2, r4
 8007574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800757c:	3302      	adds	r3, #2
 800757e:	e7c7      	b.n	8007510 <_printf_common+0x58>
 8007580:	2301      	movs	r3, #1
 8007582:	4622      	mov	r2, r4
 8007584:	4641      	mov	r1, r8
 8007586:	4638      	mov	r0, r7
 8007588:	47c8      	blx	r9
 800758a:	3001      	adds	r0, #1
 800758c:	d0e6      	beq.n	800755c <_printf_common+0xa4>
 800758e:	3601      	adds	r6, #1
 8007590:	e7d9      	b.n	8007546 <_printf_common+0x8e>
	...

08007594 <_printf_i>:
 8007594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	7e0f      	ldrb	r7, [r1, #24]
 800759a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800759c:	2f78      	cmp	r7, #120	@ 0x78
 800759e:	4691      	mov	r9, r2
 80075a0:	4680      	mov	r8, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	469a      	mov	sl, r3
 80075a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075aa:	d807      	bhi.n	80075bc <_printf_i+0x28>
 80075ac:	2f62      	cmp	r7, #98	@ 0x62
 80075ae:	d80a      	bhi.n	80075c6 <_printf_i+0x32>
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	f000 80d1 	beq.w	8007758 <_printf_i+0x1c4>
 80075b6:	2f58      	cmp	r7, #88	@ 0x58
 80075b8:	f000 80b8 	beq.w	800772c <_printf_i+0x198>
 80075bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075c4:	e03a      	b.n	800763c <_printf_i+0xa8>
 80075c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075ca:	2b15      	cmp	r3, #21
 80075cc:	d8f6      	bhi.n	80075bc <_printf_i+0x28>
 80075ce:	a101      	add	r1, pc, #4	@ (adr r1, 80075d4 <_printf_i+0x40>)
 80075d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d4:	0800762d 	.word	0x0800762d
 80075d8:	08007641 	.word	0x08007641
 80075dc:	080075bd 	.word	0x080075bd
 80075e0:	080075bd 	.word	0x080075bd
 80075e4:	080075bd 	.word	0x080075bd
 80075e8:	080075bd 	.word	0x080075bd
 80075ec:	08007641 	.word	0x08007641
 80075f0:	080075bd 	.word	0x080075bd
 80075f4:	080075bd 	.word	0x080075bd
 80075f8:	080075bd 	.word	0x080075bd
 80075fc:	080075bd 	.word	0x080075bd
 8007600:	0800773f 	.word	0x0800773f
 8007604:	0800766b 	.word	0x0800766b
 8007608:	080076f9 	.word	0x080076f9
 800760c:	080075bd 	.word	0x080075bd
 8007610:	080075bd 	.word	0x080075bd
 8007614:	08007761 	.word	0x08007761
 8007618:	080075bd 	.word	0x080075bd
 800761c:	0800766b 	.word	0x0800766b
 8007620:	080075bd 	.word	0x080075bd
 8007624:	080075bd 	.word	0x080075bd
 8007628:	08007701 	.word	0x08007701
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6032      	str	r2, [r6, #0]
 8007634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800763c:	2301      	movs	r3, #1
 800763e:	e09c      	b.n	800777a <_printf_i+0x1e6>
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	1d19      	adds	r1, r3, #4
 8007646:	6031      	str	r1, [r6, #0]
 8007648:	0606      	lsls	r6, r0, #24
 800764a:	d501      	bpl.n	8007650 <_printf_i+0xbc>
 800764c:	681d      	ldr	r5, [r3, #0]
 800764e:	e003      	b.n	8007658 <_printf_i+0xc4>
 8007650:	0645      	lsls	r5, r0, #25
 8007652:	d5fb      	bpl.n	800764c <_printf_i+0xb8>
 8007654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007658:	2d00      	cmp	r5, #0
 800765a:	da03      	bge.n	8007664 <_printf_i+0xd0>
 800765c:	232d      	movs	r3, #45	@ 0x2d
 800765e:	426d      	negs	r5, r5
 8007660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007664:	4858      	ldr	r0, [pc, #352]	@ (80077c8 <_printf_i+0x234>)
 8007666:	230a      	movs	r3, #10
 8007668:	e011      	b.n	800768e <_printf_i+0xfa>
 800766a:	6821      	ldr	r1, [r4, #0]
 800766c:	6833      	ldr	r3, [r6, #0]
 800766e:	0608      	lsls	r0, r1, #24
 8007670:	f853 5b04 	ldr.w	r5, [r3], #4
 8007674:	d402      	bmi.n	800767c <_printf_i+0xe8>
 8007676:	0649      	lsls	r1, r1, #25
 8007678:	bf48      	it	mi
 800767a:	b2ad      	uxthmi	r5, r5
 800767c:	2f6f      	cmp	r7, #111	@ 0x6f
 800767e:	4852      	ldr	r0, [pc, #328]	@ (80077c8 <_printf_i+0x234>)
 8007680:	6033      	str	r3, [r6, #0]
 8007682:	bf14      	ite	ne
 8007684:	230a      	movne	r3, #10
 8007686:	2308      	moveq	r3, #8
 8007688:	2100      	movs	r1, #0
 800768a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800768e:	6866      	ldr	r6, [r4, #4]
 8007690:	60a6      	str	r6, [r4, #8]
 8007692:	2e00      	cmp	r6, #0
 8007694:	db05      	blt.n	80076a2 <_printf_i+0x10e>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	432e      	orrs	r6, r5
 800769a:	f021 0104 	bic.w	r1, r1, #4
 800769e:	6021      	str	r1, [r4, #0]
 80076a0:	d04b      	beq.n	800773a <_printf_i+0x1a6>
 80076a2:	4616      	mov	r6, r2
 80076a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a8:	fb03 5711 	mls	r7, r3, r1, r5
 80076ac:	5dc7      	ldrb	r7, [r0, r7]
 80076ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076b2:	462f      	mov	r7, r5
 80076b4:	42bb      	cmp	r3, r7
 80076b6:	460d      	mov	r5, r1
 80076b8:	d9f4      	bls.n	80076a4 <_printf_i+0x110>
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d10b      	bne.n	80076d6 <_printf_i+0x142>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	07df      	lsls	r7, r3, #31
 80076c2:	d508      	bpl.n	80076d6 <_printf_i+0x142>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	6861      	ldr	r1, [r4, #4]
 80076c8:	4299      	cmp	r1, r3
 80076ca:	bfde      	ittt	le
 80076cc:	2330      	movle	r3, #48	@ 0x30
 80076ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076d6:	1b92      	subs	r2, r2, r6
 80076d8:	6122      	str	r2, [r4, #16]
 80076da:	f8cd a000 	str.w	sl, [sp]
 80076de:	464b      	mov	r3, r9
 80076e0:	aa03      	add	r2, sp, #12
 80076e2:	4621      	mov	r1, r4
 80076e4:	4640      	mov	r0, r8
 80076e6:	f7ff fee7 	bl	80074b8 <_printf_common>
 80076ea:	3001      	adds	r0, #1
 80076ec:	d14a      	bne.n	8007784 <_printf_i+0x1f0>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076f2:	b004      	add	sp, #16
 80076f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	f043 0320 	orr.w	r3, r3, #32
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	4832      	ldr	r0, [pc, #200]	@ (80077cc <_printf_i+0x238>)
 8007702:	2778      	movs	r7, #120	@ 0x78
 8007704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	6831      	ldr	r1, [r6, #0]
 800770c:	061f      	lsls	r7, r3, #24
 800770e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007712:	d402      	bmi.n	800771a <_printf_i+0x186>
 8007714:	065f      	lsls	r7, r3, #25
 8007716:	bf48      	it	mi
 8007718:	b2ad      	uxthmi	r5, r5
 800771a:	6031      	str	r1, [r6, #0]
 800771c:	07d9      	lsls	r1, r3, #31
 800771e:	bf44      	itt	mi
 8007720:	f043 0320 	orrmi.w	r3, r3, #32
 8007724:	6023      	strmi	r3, [r4, #0]
 8007726:	b11d      	cbz	r5, 8007730 <_printf_i+0x19c>
 8007728:	2310      	movs	r3, #16
 800772a:	e7ad      	b.n	8007688 <_printf_i+0xf4>
 800772c:	4826      	ldr	r0, [pc, #152]	@ (80077c8 <_printf_i+0x234>)
 800772e:	e7e9      	b.n	8007704 <_printf_i+0x170>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	f023 0320 	bic.w	r3, r3, #32
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	e7f6      	b.n	8007728 <_printf_i+0x194>
 800773a:	4616      	mov	r6, r2
 800773c:	e7bd      	b.n	80076ba <_printf_i+0x126>
 800773e:	6833      	ldr	r3, [r6, #0]
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	6961      	ldr	r1, [r4, #20]
 8007744:	1d18      	adds	r0, r3, #4
 8007746:	6030      	str	r0, [r6, #0]
 8007748:	062e      	lsls	r6, r5, #24
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	d501      	bpl.n	8007752 <_printf_i+0x1be>
 800774e:	6019      	str	r1, [r3, #0]
 8007750:	e002      	b.n	8007758 <_printf_i+0x1c4>
 8007752:	0668      	lsls	r0, r5, #25
 8007754:	d5fb      	bpl.n	800774e <_printf_i+0x1ba>
 8007756:	8019      	strh	r1, [r3, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	4616      	mov	r6, r2
 800775e:	e7bc      	b.n	80076da <_printf_i+0x146>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	1d1a      	adds	r2, r3, #4
 8007764:	6032      	str	r2, [r6, #0]
 8007766:	681e      	ldr	r6, [r3, #0]
 8007768:	6862      	ldr	r2, [r4, #4]
 800776a:	2100      	movs	r1, #0
 800776c:	4630      	mov	r0, r6
 800776e:	f7f8 fd4f 	bl	8000210 <memchr>
 8007772:	b108      	cbz	r0, 8007778 <_printf_i+0x1e4>
 8007774:	1b80      	subs	r0, r0, r6
 8007776:	6060      	str	r0, [r4, #4]
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	2300      	movs	r3, #0
 800777e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007782:	e7aa      	b.n	80076da <_printf_i+0x146>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	4632      	mov	r2, r6
 8007788:	4649      	mov	r1, r9
 800778a:	4640      	mov	r0, r8
 800778c:	47d0      	blx	sl
 800778e:	3001      	adds	r0, #1
 8007790:	d0ad      	beq.n	80076ee <_printf_i+0x15a>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	079b      	lsls	r3, r3, #30
 8007796:	d413      	bmi.n	80077c0 <_printf_i+0x22c>
 8007798:	68e0      	ldr	r0, [r4, #12]
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	4298      	cmp	r0, r3
 800779e:	bfb8      	it	lt
 80077a0:	4618      	movlt	r0, r3
 80077a2:	e7a6      	b.n	80076f2 <_printf_i+0x15e>
 80077a4:	2301      	movs	r3, #1
 80077a6:	4632      	mov	r2, r6
 80077a8:	4649      	mov	r1, r9
 80077aa:	4640      	mov	r0, r8
 80077ac:	47d0      	blx	sl
 80077ae:	3001      	adds	r0, #1
 80077b0:	d09d      	beq.n	80076ee <_printf_i+0x15a>
 80077b2:	3501      	adds	r5, #1
 80077b4:	68e3      	ldr	r3, [r4, #12]
 80077b6:	9903      	ldr	r1, [sp, #12]
 80077b8:	1a5b      	subs	r3, r3, r1
 80077ba:	42ab      	cmp	r3, r5
 80077bc:	dcf2      	bgt.n	80077a4 <_printf_i+0x210>
 80077be:	e7eb      	b.n	8007798 <_printf_i+0x204>
 80077c0:	2500      	movs	r5, #0
 80077c2:	f104 0619 	add.w	r6, r4, #25
 80077c6:	e7f5      	b.n	80077b4 <_printf_i+0x220>
 80077c8:	08009d4e 	.word	0x08009d4e
 80077cc:	08009d5f 	.word	0x08009d5f

080077d0 <siprintf>:
 80077d0:	b40e      	push	{r1, r2, r3}
 80077d2:	b510      	push	{r4, lr}
 80077d4:	b09d      	sub	sp, #116	@ 0x74
 80077d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80077d8:	9002      	str	r0, [sp, #8]
 80077da:	9006      	str	r0, [sp, #24]
 80077dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077e0:	480a      	ldr	r0, [pc, #40]	@ (800780c <siprintf+0x3c>)
 80077e2:	9107      	str	r1, [sp, #28]
 80077e4:	9104      	str	r1, [sp, #16]
 80077e6:	490a      	ldr	r1, [pc, #40]	@ (8007810 <siprintf+0x40>)
 80077e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ec:	9105      	str	r1, [sp, #20]
 80077ee:	2400      	movs	r4, #0
 80077f0:	a902      	add	r1, sp, #8
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80077f8:	f001 f874 	bl	80088e4 <_svfiprintf_r>
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	701c      	strb	r4, [r3, #0]
 8007800:	b01d      	add	sp, #116	@ 0x74
 8007802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007806:	b003      	add	sp, #12
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	2000001c 	.word	0x2000001c
 8007810:	ffff0208 	.word	0xffff0208

08007814 <std>:
 8007814:	2300      	movs	r3, #0
 8007816:	b510      	push	{r4, lr}
 8007818:	4604      	mov	r4, r0
 800781a:	e9c0 3300 	strd	r3, r3, [r0]
 800781e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007822:	6083      	str	r3, [r0, #8]
 8007824:	8181      	strh	r1, [r0, #12]
 8007826:	6643      	str	r3, [r0, #100]	@ 0x64
 8007828:	81c2      	strh	r2, [r0, #14]
 800782a:	6183      	str	r3, [r0, #24]
 800782c:	4619      	mov	r1, r3
 800782e:	2208      	movs	r2, #8
 8007830:	305c      	adds	r0, #92	@ 0x5c
 8007832:	f000 f8b1 	bl	8007998 <memset>
 8007836:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <std+0x58>)
 8007838:	6263      	str	r3, [r4, #36]	@ 0x24
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <std+0x5c>)
 800783c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <std+0x60>)
 8007840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x64>)
 8007844:	6323      	str	r3, [r4, #48]	@ 0x30
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x68>)
 8007848:	6224      	str	r4, [r4, #32]
 800784a:	429c      	cmp	r4, r3
 800784c:	d006      	beq.n	800785c <std+0x48>
 800784e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007852:	4294      	cmp	r4, r2
 8007854:	d002      	beq.n	800785c <std+0x48>
 8007856:	33d0      	adds	r3, #208	@ 0xd0
 8007858:	429c      	cmp	r4, r3
 800785a:	d105      	bne.n	8007868 <std+0x54>
 800785c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007864:	f000 b8ca 	b.w	80079fc <__retarget_lock_init_recursive>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	08009495 	.word	0x08009495
 8007870:	080094b7 	.word	0x080094b7
 8007874:	080094ef 	.word	0x080094ef
 8007878:	08009513 	.word	0x08009513
 800787c:	200043b8 	.word	0x200043b8

08007880 <stdio_exit_handler>:
 8007880:	4a02      	ldr	r2, [pc, #8]	@ (800788c <stdio_exit_handler+0xc>)
 8007882:	4903      	ldr	r1, [pc, #12]	@ (8007890 <stdio_exit_handler+0x10>)
 8007884:	4803      	ldr	r0, [pc, #12]	@ (8007894 <stdio_exit_handler+0x14>)
 8007886:	f000 b869 	b.w	800795c <_fwalk_sglue>
 800788a:	bf00      	nop
 800788c:	20000010 	.word	0x20000010
 8007890:	08008d39 	.word	0x08008d39
 8007894:	20000020 	.word	0x20000020

08007898 <cleanup_stdio>:
 8007898:	6841      	ldr	r1, [r0, #4]
 800789a:	4b0c      	ldr	r3, [pc, #48]	@ (80078cc <cleanup_stdio+0x34>)
 800789c:	4299      	cmp	r1, r3
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	d001      	beq.n	80078a8 <cleanup_stdio+0x10>
 80078a4:	f001 fa48 	bl	8008d38 <_fflush_r>
 80078a8:	68a1      	ldr	r1, [r4, #8]
 80078aa:	4b09      	ldr	r3, [pc, #36]	@ (80078d0 <cleanup_stdio+0x38>)
 80078ac:	4299      	cmp	r1, r3
 80078ae:	d002      	beq.n	80078b6 <cleanup_stdio+0x1e>
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 fa41 	bl	8008d38 <_fflush_r>
 80078b6:	68e1      	ldr	r1, [r4, #12]
 80078b8:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <cleanup_stdio+0x3c>)
 80078ba:	4299      	cmp	r1, r3
 80078bc:	d004      	beq.n	80078c8 <cleanup_stdio+0x30>
 80078be:	4620      	mov	r0, r4
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	f001 ba38 	b.w	8008d38 <_fflush_r>
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	bf00      	nop
 80078cc:	200043b8 	.word	0x200043b8
 80078d0:	20004420 	.word	0x20004420
 80078d4:	20004488 	.word	0x20004488

080078d8 <global_stdio_init.part.0>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	4b0b      	ldr	r3, [pc, #44]	@ (8007908 <global_stdio_init.part.0+0x30>)
 80078dc:	4c0b      	ldr	r4, [pc, #44]	@ (800790c <global_stdio_init.part.0+0x34>)
 80078de:	4a0c      	ldr	r2, [pc, #48]	@ (8007910 <global_stdio_init.part.0+0x38>)
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	4620      	mov	r0, r4
 80078e4:	2200      	movs	r2, #0
 80078e6:	2104      	movs	r1, #4
 80078e8:	f7ff ff94 	bl	8007814 <std>
 80078ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078f0:	2201      	movs	r2, #1
 80078f2:	2109      	movs	r1, #9
 80078f4:	f7ff ff8e 	bl	8007814 <std>
 80078f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078fc:	2202      	movs	r2, #2
 80078fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007902:	2112      	movs	r1, #18
 8007904:	f7ff bf86 	b.w	8007814 <std>
 8007908:	200044f0 	.word	0x200044f0
 800790c:	200043b8 	.word	0x200043b8
 8007910:	08007881 	.word	0x08007881

08007914 <__sfp_lock_acquire>:
 8007914:	4801      	ldr	r0, [pc, #4]	@ (800791c <__sfp_lock_acquire+0x8>)
 8007916:	f000 b872 	b.w	80079fe <__retarget_lock_acquire_recursive>
 800791a:	bf00      	nop
 800791c:	200044f5 	.word	0x200044f5

08007920 <__sfp_lock_release>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__sfp_lock_release+0x8>)
 8007922:	f000 b86d 	b.w	8007a00 <__retarget_lock_release_recursive>
 8007926:	bf00      	nop
 8007928:	200044f5 	.word	0x200044f5

0800792c <__sinit>:
 800792c:	b510      	push	{r4, lr}
 800792e:	4604      	mov	r4, r0
 8007930:	f7ff fff0 	bl	8007914 <__sfp_lock_acquire>
 8007934:	6a23      	ldr	r3, [r4, #32]
 8007936:	b11b      	cbz	r3, 8007940 <__sinit+0x14>
 8007938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793c:	f7ff bff0 	b.w	8007920 <__sfp_lock_release>
 8007940:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <__sinit+0x28>)
 8007942:	6223      	str	r3, [r4, #32]
 8007944:	4b04      	ldr	r3, [pc, #16]	@ (8007958 <__sinit+0x2c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f5      	bne.n	8007938 <__sinit+0xc>
 800794c:	f7ff ffc4 	bl	80078d8 <global_stdio_init.part.0>
 8007950:	e7f2      	b.n	8007938 <__sinit+0xc>
 8007952:	bf00      	nop
 8007954:	08007899 	.word	0x08007899
 8007958:	200044f0 	.word	0x200044f0

0800795c <_fwalk_sglue>:
 800795c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007960:	4607      	mov	r7, r0
 8007962:	4688      	mov	r8, r1
 8007964:	4614      	mov	r4, r2
 8007966:	2600      	movs	r6, #0
 8007968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800796c:	f1b9 0901 	subs.w	r9, r9, #1
 8007970:	d505      	bpl.n	800797e <_fwalk_sglue+0x22>
 8007972:	6824      	ldr	r4, [r4, #0]
 8007974:	2c00      	cmp	r4, #0
 8007976:	d1f7      	bne.n	8007968 <_fwalk_sglue+0xc>
 8007978:	4630      	mov	r0, r6
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d907      	bls.n	8007994 <_fwalk_sglue+0x38>
 8007984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007988:	3301      	adds	r3, #1
 800798a:	d003      	beq.n	8007994 <_fwalk_sglue+0x38>
 800798c:	4629      	mov	r1, r5
 800798e:	4638      	mov	r0, r7
 8007990:	47c0      	blx	r8
 8007992:	4306      	orrs	r6, r0
 8007994:	3568      	adds	r5, #104	@ 0x68
 8007996:	e7e9      	b.n	800796c <_fwalk_sglue+0x10>

08007998 <memset>:
 8007998:	4402      	add	r2, r0
 800799a:	4603      	mov	r3, r0
 800799c:	4293      	cmp	r3, r2
 800799e:	d100      	bne.n	80079a2 <memset+0xa>
 80079a0:	4770      	bx	lr
 80079a2:	f803 1b01 	strb.w	r1, [r3], #1
 80079a6:	e7f9      	b.n	800799c <memset+0x4>

080079a8 <__errno>:
 80079a8:	4b01      	ldr	r3, [pc, #4]	@ (80079b0 <__errno+0x8>)
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	2000001c 	.word	0x2000001c

080079b4 <__libc_init_array>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	4d0d      	ldr	r5, [pc, #52]	@ (80079ec <__libc_init_array+0x38>)
 80079b8:	4c0d      	ldr	r4, [pc, #52]	@ (80079f0 <__libc_init_array+0x3c>)
 80079ba:	1b64      	subs	r4, r4, r5
 80079bc:	10a4      	asrs	r4, r4, #2
 80079be:	2600      	movs	r6, #0
 80079c0:	42a6      	cmp	r6, r4
 80079c2:	d109      	bne.n	80079d8 <__libc_init_array+0x24>
 80079c4:	4d0b      	ldr	r5, [pc, #44]	@ (80079f4 <__libc_init_array+0x40>)
 80079c6:	4c0c      	ldr	r4, [pc, #48]	@ (80079f8 <__libc_init_array+0x44>)
 80079c8:	f002 f956 	bl	8009c78 <_init>
 80079cc:	1b64      	subs	r4, r4, r5
 80079ce:	10a4      	asrs	r4, r4, #2
 80079d0:	2600      	movs	r6, #0
 80079d2:	42a6      	cmp	r6, r4
 80079d4:	d105      	bne.n	80079e2 <__libc_init_array+0x2e>
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079dc:	4798      	blx	r3
 80079de:	3601      	adds	r6, #1
 80079e0:	e7ee      	b.n	80079c0 <__libc_init_array+0xc>
 80079e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e6:	4798      	blx	r3
 80079e8:	3601      	adds	r6, #1
 80079ea:	e7f2      	b.n	80079d2 <__libc_init_array+0x1e>
 80079ec:	0800a0bc 	.word	0x0800a0bc
 80079f0:	0800a0bc 	.word	0x0800a0bc
 80079f4:	0800a0bc 	.word	0x0800a0bc
 80079f8:	0800a0c0 	.word	0x0800a0c0

080079fc <__retarget_lock_init_recursive>:
 80079fc:	4770      	bx	lr

080079fe <__retarget_lock_acquire_recursive>:
 80079fe:	4770      	bx	lr

08007a00 <__retarget_lock_release_recursive>:
 8007a00:	4770      	bx	lr
	...

08007a04 <_localeconv_r>:
 8007a04:	4800      	ldr	r0, [pc, #0]	@ (8007a08 <_localeconv_r+0x4>)
 8007a06:	4770      	bx	lr
 8007a08:	2000015c 	.word	0x2000015c

08007a0c <_reclaim_reent>:
 8007a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8007ac4 <_reclaim_reent+0xb8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4283      	cmp	r3, r0
 8007a12:	b570      	push	{r4, r5, r6, lr}
 8007a14:	4604      	mov	r4, r0
 8007a16:	d053      	beq.n	8007ac0 <_reclaim_reent+0xb4>
 8007a18:	69c3      	ldr	r3, [r0, #28]
 8007a1a:	b31b      	cbz	r3, 8007a64 <_reclaim_reent+0x58>
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	b163      	cbz	r3, 8007a3a <_reclaim_reent+0x2e>
 8007a20:	2500      	movs	r5, #0
 8007a22:	69e3      	ldr	r3, [r4, #28]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	5959      	ldr	r1, [r3, r5]
 8007a28:	b9b1      	cbnz	r1, 8007a58 <_reclaim_reent+0x4c>
 8007a2a:	3504      	adds	r5, #4
 8007a2c:	2d80      	cmp	r5, #128	@ 0x80
 8007a2e:	d1f8      	bne.n	8007a22 <_reclaim_reent+0x16>
 8007a30:	69e3      	ldr	r3, [r4, #28]
 8007a32:	4620      	mov	r0, r4
 8007a34:	68d9      	ldr	r1, [r3, #12]
 8007a36:	f000 feaf 	bl	8008798 <_free_r>
 8007a3a:	69e3      	ldr	r3, [r4, #28]
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	b111      	cbz	r1, 8007a46 <_reclaim_reent+0x3a>
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fea9 	bl	8008798 <_free_r>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	689d      	ldr	r5, [r3, #8]
 8007a4a:	b15d      	cbz	r5, 8007a64 <_reclaim_reent+0x58>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4620      	mov	r0, r4
 8007a50:	682d      	ldr	r5, [r5, #0]
 8007a52:	f000 fea1 	bl	8008798 <_free_r>
 8007a56:	e7f8      	b.n	8007a4a <_reclaim_reent+0x3e>
 8007a58:	680e      	ldr	r6, [r1, #0]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fe9c 	bl	8008798 <_free_r>
 8007a60:	4631      	mov	r1, r6
 8007a62:	e7e1      	b.n	8007a28 <_reclaim_reent+0x1c>
 8007a64:	6961      	ldr	r1, [r4, #20]
 8007a66:	b111      	cbz	r1, 8007a6e <_reclaim_reent+0x62>
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fe95 	bl	8008798 <_free_r>
 8007a6e:	69e1      	ldr	r1, [r4, #28]
 8007a70:	b111      	cbz	r1, 8007a78 <_reclaim_reent+0x6c>
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fe90 	bl	8008798 <_free_r>
 8007a78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a7a:	b111      	cbz	r1, 8007a82 <_reclaim_reent+0x76>
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fe8b 	bl	8008798 <_free_r>
 8007a82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a84:	b111      	cbz	r1, 8007a8c <_reclaim_reent+0x80>
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 fe86 	bl	8008798 <_free_r>
 8007a8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a8e:	b111      	cbz	r1, 8007a96 <_reclaim_reent+0x8a>
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fe81 	bl	8008798 <_free_r>
 8007a96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a98:	b111      	cbz	r1, 8007aa0 <_reclaim_reent+0x94>
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fe7c 	bl	8008798 <_free_r>
 8007aa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007aa2:	b111      	cbz	r1, 8007aaa <_reclaim_reent+0x9e>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fe77 	bl	8008798 <_free_r>
 8007aaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007aac:	b111      	cbz	r1, 8007ab4 <_reclaim_reent+0xa8>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 fe72 	bl	8008798 <_free_r>
 8007ab4:	6a23      	ldr	r3, [r4, #32]
 8007ab6:	b11b      	cbz	r3, 8007ac0 <_reclaim_reent+0xb4>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007abe:	4718      	bx	r3
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	bf00      	nop
 8007ac4:	2000001c 	.word	0x2000001c

08007ac8 <memcpy>:
 8007ac8:	440a      	add	r2, r1
 8007aca:	4291      	cmp	r1, r2
 8007acc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ad0:	d100      	bne.n	8007ad4 <memcpy+0xc>
 8007ad2:	4770      	bx	lr
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ade:	4291      	cmp	r1, r2
 8007ae0:	d1f9      	bne.n	8007ad6 <memcpy+0xe>
 8007ae2:	bd10      	pop	{r4, pc}

08007ae4 <quorem>:
 8007ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	6903      	ldr	r3, [r0, #16]
 8007aea:	690c      	ldr	r4, [r1, #16]
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	4607      	mov	r7, r0
 8007af0:	db7e      	blt.n	8007bf0 <quorem+0x10c>
 8007af2:	3c01      	subs	r4, #1
 8007af4:	f101 0814 	add.w	r8, r1, #20
 8007af8:	00a3      	lsls	r3, r4, #2
 8007afa:	f100 0514 	add.w	r5, r0, #20
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	429a      	cmp	r2, r3
 8007b12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b16:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b1a:	d32e      	bcc.n	8007b7a <quorem+0x96>
 8007b1c:	f04f 0a00 	mov.w	sl, #0
 8007b20:	46c4      	mov	ip, r8
 8007b22:	46ae      	mov	lr, r5
 8007b24:	46d3      	mov	fp, sl
 8007b26:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b2a:	b298      	uxth	r0, r3
 8007b2c:	fb06 a000 	mla	r0, r6, r0, sl
 8007b30:	0c02      	lsrs	r2, r0, #16
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	fb06 2303 	mla	r3, r6, r3, r2
 8007b38:	f8de 2000 	ldr.w	r2, [lr]
 8007b3c:	b280      	uxth	r0, r0
 8007b3e:	b292      	uxth	r2, r2
 8007b40:	1a12      	subs	r2, r2, r0
 8007b42:	445a      	add	r2, fp
 8007b44:	f8de 0000 	ldr.w	r0, [lr]
 8007b48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b56:	b292      	uxth	r2, r2
 8007b58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b5c:	45e1      	cmp	r9, ip
 8007b5e:	f84e 2b04 	str.w	r2, [lr], #4
 8007b62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b66:	d2de      	bcs.n	8007b26 <quorem+0x42>
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	58eb      	ldr	r3, [r5, r3]
 8007b6c:	b92b      	cbnz	r3, 8007b7a <quorem+0x96>
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	429d      	cmp	r5, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	d32f      	bcc.n	8007bd8 <quorem+0xf4>
 8007b78:	613c      	str	r4, [r7, #16]
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f001 fb82 	bl	8009284 <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	db25      	blt.n	8007bd0 <quorem+0xec>
 8007b84:	4629      	mov	r1, r5
 8007b86:	2000      	movs	r0, #0
 8007b88:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b8c:	f8d1 c000 	ldr.w	ip, [r1]
 8007b90:	fa1f fe82 	uxth.w	lr, r2
 8007b94:	fa1f f38c 	uxth.w	r3, ip
 8007b98:	eba3 030e 	sub.w	r3, r3, lr
 8007b9c:	4403      	add	r3, r0
 8007b9e:	0c12      	lsrs	r2, r2, #16
 8007ba0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ba4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bae:	45c1      	cmp	r9, r8
 8007bb0:	f841 3b04 	str.w	r3, [r1], #4
 8007bb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007bb8:	d2e6      	bcs.n	8007b88 <quorem+0xa4>
 8007bba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bc2:	b922      	cbnz	r2, 8007bce <quorem+0xea>
 8007bc4:	3b04      	subs	r3, #4
 8007bc6:	429d      	cmp	r5, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	d30b      	bcc.n	8007be4 <quorem+0x100>
 8007bcc:	613c      	str	r4, [r7, #16]
 8007bce:	3601      	adds	r6, #1
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	b003      	add	sp, #12
 8007bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	3b04      	subs	r3, #4
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	d1cb      	bne.n	8007b78 <quorem+0x94>
 8007be0:	3c01      	subs	r4, #1
 8007be2:	e7c6      	b.n	8007b72 <quorem+0x8e>
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	3b04      	subs	r3, #4
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	d1ef      	bne.n	8007bcc <quorem+0xe8>
 8007bec:	3c01      	subs	r4, #1
 8007bee:	e7ea      	b.n	8007bc6 <quorem+0xe2>
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e7ee      	b.n	8007bd2 <quorem+0xee>
 8007bf4:	0000      	movs	r0, r0
	...

08007bf8 <_dtoa_r>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	69c7      	ldr	r7, [r0, #28]
 8007bfe:	b097      	sub	sp, #92	@ 0x5c
 8007c00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c04:	ec55 4b10 	vmov	r4, r5, d0
 8007c08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007c0a:	9107      	str	r1, [sp, #28]
 8007c0c:	4681      	mov	r9, r0
 8007c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c10:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c12:	b97f      	cbnz	r7, 8007c34 <_dtoa_r+0x3c>
 8007c14:	2010      	movs	r0, #16
 8007c16:	f000 ff61 	bl	8008adc <malloc>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007c20:	b920      	cbnz	r0, 8007c2c <_dtoa_r+0x34>
 8007c22:	4ba9      	ldr	r3, [pc, #676]	@ (8007ec8 <_dtoa_r+0x2d0>)
 8007c24:	21ef      	movs	r1, #239	@ 0xef
 8007c26:	48a9      	ldr	r0, [pc, #676]	@ (8007ecc <_dtoa_r+0x2d4>)
 8007c28:	f001 fd16 	bl	8009658 <__assert_func>
 8007c2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c30:	6007      	str	r7, [r0, #0]
 8007c32:	60c7      	str	r7, [r0, #12]
 8007c34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c38:	6819      	ldr	r1, [r3, #0]
 8007c3a:	b159      	cbz	r1, 8007c54 <_dtoa_r+0x5c>
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	604a      	str	r2, [r1, #4]
 8007c40:	2301      	movs	r3, #1
 8007c42:	4093      	lsls	r3, r2
 8007c44:	608b      	str	r3, [r1, #8]
 8007c46:	4648      	mov	r0, r9
 8007c48:	f001 f8ea 	bl	8008e20 <_Bfree>
 8007c4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	1e2b      	subs	r3, r5, #0
 8007c56:	bfb9      	ittee	lt
 8007c58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c5c:	9305      	strlt	r3, [sp, #20]
 8007c5e:	2300      	movge	r3, #0
 8007c60:	6033      	strge	r3, [r6, #0]
 8007c62:	9f05      	ldr	r7, [sp, #20]
 8007c64:	4b9a      	ldr	r3, [pc, #616]	@ (8007ed0 <_dtoa_r+0x2d8>)
 8007c66:	bfbc      	itt	lt
 8007c68:	2201      	movlt	r2, #1
 8007c6a:	6032      	strlt	r2, [r6, #0]
 8007c6c:	43bb      	bics	r3, r7
 8007c6e:	d112      	bne.n	8007c96 <_dtoa_r+0x9e>
 8007c70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c7c:	4323      	orrs	r3, r4
 8007c7e:	f000 855a 	beq.w	8008736 <_dtoa_r+0xb3e>
 8007c82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ee4 <_dtoa_r+0x2ec>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 855c 	beq.w	8008746 <_dtoa_r+0xb4e>
 8007c8e:	f10a 0303 	add.w	r3, sl, #3
 8007c92:	f000 bd56 	b.w	8008742 <_dtoa_r+0xb4a>
 8007c96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	ec51 0b17 	vmov	r0, r1, d7
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ca6:	f7f8 ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 8007caa:	4680      	mov	r8, r0
 8007cac:	b158      	cbz	r0, 8007cc6 <_dtoa_r+0xce>
 8007cae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cb6:	b113      	cbz	r3, 8007cbe <_dtoa_r+0xc6>
 8007cb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cba:	4b86      	ldr	r3, [pc, #536]	@ (8007ed4 <_dtoa_r+0x2dc>)
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ee8 <_dtoa_r+0x2f0>
 8007cc2:	f000 bd40 	b.w	8008746 <_dtoa_r+0xb4e>
 8007cc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007cca:	aa14      	add	r2, sp, #80	@ 0x50
 8007ccc:	a915      	add	r1, sp, #84	@ 0x54
 8007cce:	4648      	mov	r0, r9
 8007cd0:	f001 fb88 	bl	80093e4 <__d2b>
 8007cd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007cd8:	9002      	str	r0, [sp, #8]
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d078      	beq.n	8007dd0 <_dtoa_r+0x1d8>
 8007cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ce0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4b76      	ldr	r3, [pc, #472]	@ (8007ed8 <_dtoa_r+0x2e0>)
 8007cfe:	f7f8 fae3 	bl	80002c8 <__aeabi_dsub>
 8007d02:	a36b      	add	r3, pc, #428	@ (adr r3, 8007eb0 <_dtoa_r+0x2b8>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f7f8 fc96 	bl	8000638 <__aeabi_dmul>
 8007d0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007eb8 <_dtoa_r+0x2c0>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 fadb 	bl	80002cc <__adddf3>
 8007d16:	4604      	mov	r4, r0
 8007d18:	4630      	mov	r0, r6
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	f7f8 fc22 	bl	8000564 <__aeabi_i2d>
 8007d20:	a367      	add	r3, pc, #412	@ (adr r3, 8007ec0 <_dtoa_r+0x2c8>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fc87 	bl	8000638 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 facb 	bl	80002cc <__adddf3>
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	f7f8 ff2d 	bl	8000b98 <__aeabi_d2iz>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4607      	mov	r7, r0
 8007d42:	2300      	movs	r3, #0
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fee8 	bl	8000b1c <__aeabi_dcmplt>
 8007d4c:	b140      	cbz	r0, 8007d60 <_dtoa_r+0x168>
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7f8 fc08 	bl	8000564 <__aeabi_i2d>
 8007d54:	4622      	mov	r2, r4
 8007d56:	462b      	mov	r3, r5
 8007d58:	f7f8 fed6 	bl	8000b08 <__aeabi_dcmpeq>
 8007d5c:	b900      	cbnz	r0, 8007d60 <_dtoa_r+0x168>
 8007d5e:	3f01      	subs	r7, #1
 8007d60:	2f16      	cmp	r7, #22
 8007d62:	d852      	bhi.n	8007e0a <_dtoa_r+0x212>
 8007d64:	4b5d      	ldr	r3, [pc, #372]	@ (8007edc <_dtoa_r+0x2e4>)
 8007d66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d72:	f7f8 fed3 	bl	8000b1c <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d049      	beq.n	8007e0e <_dtoa_r+0x216>
 8007d7a:	3f01      	subs	r7, #1
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d82:	1b9b      	subs	r3, r3, r6
 8007d84:	1e5a      	subs	r2, r3, #1
 8007d86:	bf45      	ittet	mi
 8007d88:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d8c:	9300      	strmi	r3, [sp, #0]
 8007d8e:	2300      	movpl	r3, #0
 8007d90:	2300      	movmi	r3, #0
 8007d92:	9206      	str	r2, [sp, #24]
 8007d94:	bf54      	ite	pl
 8007d96:	9300      	strpl	r3, [sp, #0]
 8007d98:	9306      	strmi	r3, [sp, #24]
 8007d9a:	2f00      	cmp	r7, #0
 8007d9c:	db39      	blt.n	8007e12 <_dtoa_r+0x21a>
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007da2:	443b      	add	r3, r7
 8007da4:	9306      	str	r3, [sp, #24]
 8007da6:	2300      	movs	r3, #0
 8007da8:	9308      	str	r3, [sp, #32]
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	2b09      	cmp	r3, #9
 8007dae:	d863      	bhi.n	8007e78 <_dtoa_r+0x280>
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	bfc4      	itt	gt
 8007db4:	3b04      	subgt	r3, #4
 8007db6:	9307      	strgt	r3, [sp, #28]
 8007db8:	9b07      	ldr	r3, [sp, #28]
 8007dba:	f1a3 0302 	sub.w	r3, r3, #2
 8007dbe:	bfcc      	ite	gt
 8007dc0:	2400      	movgt	r4, #0
 8007dc2:	2401      	movle	r4, #1
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d863      	bhi.n	8007e90 <_dtoa_r+0x298>
 8007dc8:	e8df f003 	tbb	[pc, r3]
 8007dcc:	2b375452 	.word	0x2b375452
 8007dd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007dd4:	441e      	add	r6, r3
 8007dd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	bfc1      	itttt	gt
 8007dde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007de2:	409f      	lslgt	r7, r3
 8007de4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007de8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007dec:	bfd6      	itet	le
 8007dee:	f1c3 0320 	rsble	r3, r3, #32
 8007df2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007df6:	fa04 f003 	lslle.w	r0, r4, r3
 8007dfa:	f7f8 fba3 	bl	8000544 <__aeabi_ui2d>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e04:	3e01      	subs	r6, #1
 8007e06:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e08:	e776      	b.n	8007cf8 <_dtoa_r+0x100>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e7b7      	b.n	8007d7e <_dtoa_r+0x186>
 8007e0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e10:	e7b6      	b.n	8007d80 <_dtoa_r+0x188>
 8007e12:	9b00      	ldr	r3, [sp, #0]
 8007e14:	1bdb      	subs	r3, r3, r7
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	427b      	negs	r3, r7
 8007e1a:	9308      	str	r3, [sp, #32]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e20:	e7c3      	b.n	8007daa <_dtoa_r+0x1b2>
 8007e22:	2301      	movs	r3, #1
 8007e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e28:	eb07 0b03 	add.w	fp, r7, r3
 8007e2c:	f10b 0301 	add.w	r3, fp, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	9303      	str	r3, [sp, #12]
 8007e34:	bfb8      	it	lt
 8007e36:	2301      	movlt	r3, #1
 8007e38:	e006      	b.n	8007e48 <_dtoa_r+0x250>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dd28      	ble.n	8007e96 <_dtoa_r+0x29e>
 8007e44:	469b      	mov	fp, r3
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	2204      	movs	r2, #4
 8007e50:	f102 0514 	add.w	r5, r2, #20
 8007e54:	429d      	cmp	r5, r3
 8007e56:	d926      	bls.n	8007ea6 <_dtoa_r+0x2ae>
 8007e58:	6041      	str	r1, [r0, #4]
 8007e5a:	4648      	mov	r0, r9
 8007e5c:	f000 ffa0 	bl	8008da0 <_Balloc>
 8007e60:	4682      	mov	sl, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d142      	bne.n	8007eec <_dtoa_r+0x2f4>
 8007e66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ee0 <_dtoa_r+0x2e8>)
 8007e68:	4602      	mov	r2, r0
 8007e6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e6e:	e6da      	b.n	8007c26 <_dtoa_r+0x2e>
 8007e70:	2300      	movs	r3, #0
 8007e72:	e7e3      	b.n	8007e3c <_dtoa_r+0x244>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e7d5      	b.n	8007e24 <_dtoa_r+0x22c>
 8007e78:	2401      	movs	r4, #1
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9307      	str	r3, [sp, #28]
 8007e7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007e80:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e8a:	2312      	movs	r3, #18
 8007e8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007e8e:	e7db      	b.n	8007e48 <_dtoa_r+0x250>
 8007e90:	2301      	movs	r3, #1
 8007e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e94:	e7f4      	b.n	8007e80 <_dtoa_r+0x288>
 8007e96:	f04f 0b01 	mov.w	fp, #1
 8007e9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007e9e:	465b      	mov	r3, fp
 8007ea0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007ea4:	e7d0      	b.n	8007e48 <_dtoa_r+0x250>
 8007ea6:	3101      	adds	r1, #1
 8007ea8:	0052      	lsls	r2, r2, #1
 8007eaa:	e7d1      	b.n	8007e50 <_dtoa_r+0x258>
 8007eac:	f3af 8000 	nop.w
 8007eb0:	636f4361 	.word	0x636f4361
 8007eb4:	3fd287a7 	.word	0x3fd287a7
 8007eb8:	8b60c8b3 	.word	0x8b60c8b3
 8007ebc:	3fc68a28 	.word	0x3fc68a28
 8007ec0:	509f79fb 	.word	0x509f79fb
 8007ec4:	3fd34413 	.word	0x3fd34413
 8007ec8:	08009d7d 	.word	0x08009d7d
 8007ecc:	08009d94 	.word	0x08009d94
 8007ed0:	7ff00000 	.word	0x7ff00000
 8007ed4:	08009d4d 	.word	0x08009d4d
 8007ed8:	3ff80000 	.word	0x3ff80000
 8007edc:	08009ee8 	.word	0x08009ee8
 8007ee0:	08009dec 	.word	0x08009dec
 8007ee4:	08009d79 	.word	0x08009d79
 8007ee8:	08009d4c 	.word	0x08009d4c
 8007eec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ef0:	6018      	str	r0, [r3, #0]
 8007ef2:	9b03      	ldr	r3, [sp, #12]
 8007ef4:	2b0e      	cmp	r3, #14
 8007ef6:	f200 80a1 	bhi.w	800803c <_dtoa_r+0x444>
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	f000 809e 	beq.w	800803c <_dtoa_r+0x444>
 8007f00:	2f00      	cmp	r7, #0
 8007f02:	dd33      	ble.n	8007f6c <_dtoa_r+0x374>
 8007f04:	4b9c      	ldr	r3, [pc, #624]	@ (8008178 <_dtoa_r+0x580>)
 8007f06:	f007 020f 	and.w	r2, r7, #15
 8007f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0e:	ed93 7b00 	vldr	d7, [r3]
 8007f12:	05f8      	lsls	r0, r7, #23
 8007f14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007f18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f1c:	d516      	bpl.n	8007f4c <_dtoa_r+0x354>
 8007f1e:	4b97      	ldr	r3, [pc, #604]	@ (800817c <_dtoa_r+0x584>)
 8007f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f28:	f7f8 fcb0 	bl	800088c <__aeabi_ddiv>
 8007f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f30:	f004 040f 	and.w	r4, r4, #15
 8007f34:	2603      	movs	r6, #3
 8007f36:	4d91      	ldr	r5, [pc, #580]	@ (800817c <_dtoa_r+0x584>)
 8007f38:	b954      	cbnz	r4, 8007f50 <_dtoa_r+0x358>
 8007f3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f42:	f7f8 fca3 	bl	800088c <__aeabi_ddiv>
 8007f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f4a:	e028      	b.n	8007f9e <_dtoa_r+0x3a6>
 8007f4c:	2602      	movs	r6, #2
 8007f4e:	e7f2      	b.n	8007f36 <_dtoa_r+0x33e>
 8007f50:	07e1      	lsls	r1, r4, #31
 8007f52:	d508      	bpl.n	8007f66 <_dtoa_r+0x36e>
 8007f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f5c:	f7f8 fb6c 	bl	8000638 <__aeabi_dmul>
 8007f60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f64:	3601      	adds	r6, #1
 8007f66:	1064      	asrs	r4, r4, #1
 8007f68:	3508      	adds	r5, #8
 8007f6a:	e7e5      	b.n	8007f38 <_dtoa_r+0x340>
 8007f6c:	f000 80af 	beq.w	80080ce <_dtoa_r+0x4d6>
 8007f70:	427c      	negs	r4, r7
 8007f72:	4b81      	ldr	r3, [pc, #516]	@ (8008178 <_dtoa_r+0x580>)
 8007f74:	4d81      	ldr	r5, [pc, #516]	@ (800817c <_dtoa_r+0x584>)
 8007f76:	f004 020f 	and.w	r2, r4, #15
 8007f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f86:	f7f8 fb57 	bl	8000638 <__aeabi_dmul>
 8007f8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f8e:	1124      	asrs	r4, r4, #4
 8007f90:	2300      	movs	r3, #0
 8007f92:	2602      	movs	r6, #2
 8007f94:	2c00      	cmp	r4, #0
 8007f96:	f040 808f 	bne.w	80080b8 <_dtoa_r+0x4c0>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1d3      	bne.n	8007f46 <_dtoa_r+0x34e>
 8007f9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 8094 	beq.w	80080d2 <_dtoa_r+0x4da>
 8007faa:	4b75      	ldr	r3, [pc, #468]	@ (8008180 <_dtoa_r+0x588>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fdb3 	bl	8000b1c <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f000 808b 	beq.w	80080d2 <_dtoa_r+0x4da>
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 8087 	beq.w	80080d2 <_dtoa_r+0x4da>
 8007fc4:	f1bb 0f00 	cmp.w	fp, #0
 8007fc8:	dd34      	ble.n	8008034 <_dtoa_r+0x43c>
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8008184 <_dtoa_r+0x58c>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	f7f8 fb31 	bl	8000638 <__aeabi_dmul>
 8007fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fda:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007fde:	3601      	adds	r6, #1
 8007fe0:	465c      	mov	r4, fp
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7f8 fabe 	bl	8000564 <__aeabi_i2d>
 8007fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fec:	f7f8 fb24 	bl	8000638 <__aeabi_dmul>
 8007ff0:	4b65      	ldr	r3, [pc, #404]	@ (8008188 <_dtoa_r+0x590>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f7f8 f96a 	bl	80002cc <__adddf3>
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ffe:	2c00      	cmp	r4, #0
 8008000:	d16a      	bne.n	80080d8 <_dtoa_r+0x4e0>
 8008002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008006:	4b61      	ldr	r3, [pc, #388]	@ (800818c <_dtoa_r+0x594>)
 8008008:	2200      	movs	r2, #0
 800800a:	f7f8 f95d 	bl	80002c8 <__aeabi_dsub>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008016:	462a      	mov	r2, r5
 8008018:	4633      	mov	r3, r6
 800801a:	f7f8 fd9d 	bl	8000b58 <__aeabi_dcmpgt>
 800801e:	2800      	cmp	r0, #0
 8008020:	f040 8298 	bne.w	8008554 <_dtoa_r+0x95c>
 8008024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008028:	462a      	mov	r2, r5
 800802a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800802e:	f7f8 fd75 	bl	8000b1c <__aeabi_dcmplt>
 8008032:	bb38      	cbnz	r0, 8008084 <_dtoa_r+0x48c>
 8008034:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800803c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800803e:	2b00      	cmp	r3, #0
 8008040:	f2c0 8157 	blt.w	80082f2 <_dtoa_r+0x6fa>
 8008044:	2f0e      	cmp	r7, #14
 8008046:	f300 8154 	bgt.w	80082f2 <_dtoa_r+0x6fa>
 800804a:	4b4b      	ldr	r3, [pc, #300]	@ (8008178 <_dtoa_r+0x580>)
 800804c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008050:	ed93 7b00 	vldr	d7, [r3]
 8008054:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008056:	2b00      	cmp	r3, #0
 8008058:	ed8d 7b00 	vstr	d7, [sp]
 800805c:	f280 80e5 	bge.w	800822a <_dtoa_r+0x632>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f300 80e1 	bgt.w	800822a <_dtoa_r+0x632>
 8008068:	d10c      	bne.n	8008084 <_dtoa_r+0x48c>
 800806a:	4b48      	ldr	r3, [pc, #288]	@ (800818c <_dtoa_r+0x594>)
 800806c:	2200      	movs	r2, #0
 800806e:	ec51 0b17 	vmov	r0, r1, d7
 8008072:	f7f8 fae1 	bl	8000638 <__aeabi_dmul>
 8008076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807a:	f7f8 fd63 	bl	8000b44 <__aeabi_dcmpge>
 800807e:	2800      	cmp	r0, #0
 8008080:	f000 8266 	beq.w	8008550 <_dtoa_r+0x958>
 8008084:	2400      	movs	r4, #0
 8008086:	4625      	mov	r5, r4
 8008088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800808a:	4656      	mov	r6, sl
 800808c:	ea6f 0803 	mvn.w	r8, r3
 8008090:	2700      	movs	r7, #0
 8008092:	4621      	mov	r1, r4
 8008094:	4648      	mov	r0, r9
 8008096:	f000 fec3 	bl	8008e20 <_Bfree>
 800809a:	2d00      	cmp	r5, #0
 800809c:	f000 80bd 	beq.w	800821a <_dtoa_r+0x622>
 80080a0:	b12f      	cbz	r7, 80080ae <_dtoa_r+0x4b6>
 80080a2:	42af      	cmp	r7, r5
 80080a4:	d003      	beq.n	80080ae <_dtoa_r+0x4b6>
 80080a6:	4639      	mov	r1, r7
 80080a8:	4648      	mov	r0, r9
 80080aa:	f000 feb9 	bl	8008e20 <_Bfree>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4648      	mov	r0, r9
 80080b2:	f000 feb5 	bl	8008e20 <_Bfree>
 80080b6:	e0b0      	b.n	800821a <_dtoa_r+0x622>
 80080b8:	07e2      	lsls	r2, r4, #31
 80080ba:	d505      	bpl.n	80080c8 <_dtoa_r+0x4d0>
 80080bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080c0:	f7f8 faba 	bl	8000638 <__aeabi_dmul>
 80080c4:	3601      	adds	r6, #1
 80080c6:	2301      	movs	r3, #1
 80080c8:	1064      	asrs	r4, r4, #1
 80080ca:	3508      	adds	r5, #8
 80080cc:	e762      	b.n	8007f94 <_dtoa_r+0x39c>
 80080ce:	2602      	movs	r6, #2
 80080d0:	e765      	b.n	8007f9e <_dtoa_r+0x3a6>
 80080d2:	9c03      	ldr	r4, [sp, #12]
 80080d4:	46b8      	mov	r8, r7
 80080d6:	e784      	b.n	8007fe2 <_dtoa_r+0x3ea>
 80080d8:	4b27      	ldr	r3, [pc, #156]	@ (8008178 <_dtoa_r+0x580>)
 80080da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e4:	4454      	add	r4, sl
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d054      	beq.n	8008194 <_dtoa_r+0x59c>
 80080ea:	4929      	ldr	r1, [pc, #164]	@ (8008190 <_dtoa_r+0x598>)
 80080ec:	2000      	movs	r0, #0
 80080ee:	f7f8 fbcd 	bl	800088c <__aeabi_ddiv>
 80080f2:	4633      	mov	r3, r6
 80080f4:	462a      	mov	r2, r5
 80080f6:	f7f8 f8e7 	bl	80002c8 <__aeabi_dsub>
 80080fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80080fe:	4656      	mov	r6, sl
 8008100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008104:	f7f8 fd48 	bl	8000b98 <__aeabi_d2iz>
 8008108:	4605      	mov	r5, r0
 800810a:	f7f8 fa2b 	bl	8000564 <__aeabi_i2d>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008116:	f7f8 f8d7 	bl	80002c8 <__aeabi_dsub>
 800811a:	3530      	adds	r5, #48	@ 0x30
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008124:	f806 5b01 	strb.w	r5, [r6], #1
 8008128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800812c:	f7f8 fcf6 	bl	8000b1c <__aeabi_dcmplt>
 8008130:	2800      	cmp	r0, #0
 8008132:	d172      	bne.n	800821a <_dtoa_r+0x622>
 8008134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008138:	4911      	ldr	r1, [pc, #68]	@ (8008180 <_dtoa_r+0x588>)
 800813a:	2000      	movs	r0, #0
 800813c:	f7f8 f8c4 	bl	80002c8 <__aeabi_dsub>
 8008140:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008144:	f7f8 fcea 	bl	8000b1c <__aeabi_dcmplt>
 8008148:	2800      	cmp	r0, #0
 800814a:	f040 80b4 	bne.w	80082b6 <_dtoa_r+0x6be>
 800814e:	42a6      	cmp	r6, r4
 8008150:	f43f af70 	beq.w	8008034 <_dtoa_r+0x43c>
 8008154:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008158:	4b0a      	ldr	r3, [pc, #40]	@ (8008184 <_dtoa_r+0x58c>)
 800815a:	2200      	movs	r2, #0
 800815c:	f7f8 fa6c 	bl	8000638 <__aeabi_dmul>
 8008160:	4b08      	ldr	r3, [pc, #32]	@ (8008184 <_dtoa_r+0x58c>)
 8008162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008166:	2200      	movs	r2, #0
 8008168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800816c:	f7f8 fa64 	bl	8000638 <__aeabi_dmul>
 8008170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008174:	e7c4      	b.n	8008100 <_dtoa_r+0x508>
 8008176:	bf00      	nop
 8008178:	08009ee8 	.word	0x08009ee8
 800817c:	08009ec0 	.word	0x08009ec0
 8008180:	3ff00000 	.word	0x3ff00000
 8008184:	40240000 	.word	0x40240000
 8008188:	401c0000 	.word	0x401c0000
 800818c:	40140000 	.word	0x40140000
 8008190:	3fe00000 	.word	0x3fe00000
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	f7f8 fa4e 	bl	8000638 <__aeabi_dmul>
 800819c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80081a2:	4656      	mov	r6, sl
 80081a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a8:	f7f8 fcf6 	bl	8000b98 <__aeabi_d2iz>
 80081ac:	4605      	mov	r5, r0
 80081ae:	f7f8 f9d9 	bl	8000564 <__aeabi_i2d>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ba:	f7f8 f885 	bl	80002c8 <__aeabi_dsub>
 80081be:	3530      	adds	r5, #48	@ 0x30
 80081c0:	f806 5b01 	strb.w	r5, [r6], #1
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	42a6      	cmp	r6, r4
 80081ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	d124      	bne.n	800821e <_dtoa_r+0x626>
 80081d4:	4baf      	ldr	r3, [pc, #700]	@ (8008494 <_dtoa_r+0x89c>)
 80081d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081da:	f7f8 f877 	bl	80002cc <__adddf3>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e6:	f7f8 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d163      	bne.n	80082b6 <_dtoa_r+0x6be>
 80081ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081f2:	49a8      	ldr	r1, [pc, #672]	@ (8008494 <_dtoa_r+0x89c>)
 80081f4:	2000      	movs	r0, #0
 80081f6:	f7f8 f867 	bl	80002c8 <__aeabi_dsub>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008202:	f7f8 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f af14 	beq.w	8008034 <_dtoa_r+0x43c>
 800820c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800820e:	1e73      	subs	r3, r6, #1
 8008210:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008212:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008216:	2b30      	cmp	r3, #48	@ 0x30
 8008218:	d0f8      	beq.n	800820c <_dtoa_r+0x614>
 800821a:	4647      	mov	r7, r8
 800821c:	e03b      	b.n	8008296 <_dtoa_r+0x69e>
 800821e:	4b9e      	ldr	r3, [pc, #632]	@ (8008498 <_dtoa_r+0x8a0>)
 8008220:	f7f8 fa0a 	bl	8000638 <__aeabi_dmul>
 8008224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008228:	e7bc      	b.n	80081a4 <_dtoa_r+0x5ac>
 800822a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800822e:	4656      	mov	r6, sl
 8008230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 fb28 	bl	800088c <__aeabi_ddiv>
 800823c:	f7f8 fcac 	bl	8000b98 <__aeabi_d2iz>
 8008240:	4680      	mov	r8, r0
 8008242:	f7f8 f98f 	bl	8000564 <__aeabi_i2d>
 8008246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800824a:	f7f8 f9f5 	bl	8000638 <__aeabi_dmul>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800825a:	f7f8 f835 	bl	80002c8 <__aeabi_dsub>
 800825e:	f806 4b01 	strb.w	r4, [r6], #1
 8008262:	9d03      	ldr	r5, [sp, #12]
 8008264:	eba6 040a 	sub.w	r4, r6, sl
 8008268:	42a5      	cmp	r5, r4
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	d133      	bne.n	80082d8 <_dtoa_r+0x6e0>
 8008270:	f7f8 f82c 	bl	80002cc <__adddf3>
 8008274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	f7f8 fc6c 	bl	8000b58 <__aeabi_dcmpgt>
 8008280:	b9c0      	cbnz	r0, 80082b4 <_dtoa_r+0x6bc>
 8008282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 fc3d 	bl	8000b08 <__aeabi_dcmpeq>
 800828e:	b110      	cbz	r0, 8008296 <_dtoa_r+0x69e>
 8008290:	f018 0f01 	tst.w	r8, #1
 8008294:	d10e      	bne.n	80082b4 <_dtoa_r+0x6bc>
 8008296:	9902      	ldr	r1, [sp, #8]
 8008298:	4648      	mov	r0, r9
 800829a:	f000 fdc1 	bl	8008e20 <_Bfree>
 800829e:	2300      	movs	r3, #0
 80082a0:	7033      	strb	r3, [r6, #0]
 80082a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082a4:	3701      	adds	r7, #1
 80082a6:	601f      	str	r7, [r3, #0]
 80082a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 824b 	beq.w	8008746 <_dtoa_r+0xb4e>
 80082b0:	601e      	str	r6, [r3, #0]
 80082b2:	e248      	b.n	8008746 <_dtoa_r+0xb4e>
 80082b4:	46b8      	mov	r8, r7
 80082b6:	4633      	mov	r3, r6
 80082b8:	461e      	mov	r6, r3
 80082ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082be:	2a39      	cmp	r2, #57	@ 0x39
 80082c0:	d106      	bne.n	80082d0 <_dtoa_r+0x6d8>
 80082c2:	459a      	cmp	sl, r3
 80082c4:	d1f8      	bne.n	80082b8 <_dtoa_r+0x6c0>
 80082c6:	2230      	movs	r2, #48	@ 0x30
 80082c8:	f108 0801 	add.w	r8, r8, #1
 80082cc:	f88a 2000 	strb.w	r2, [sl]
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	3201      	adds	r2, #1
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e7a0      	b.n	800821a <_dtoa_r+0x622>
 80082d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008498 <_dtoa_r+0x8a0>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f8 f9ac 	bl	8000638 <__aeabi_dmul>
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4604      	mov	r4, r0
 80082e6:	460d      	mov	r5, r1
 80082e8:	f7f8 fc0e 	bl	8000b08 <__aeabi_dcmpeq>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d09f      	beq.n	8008230 <_dtoa_r+0x638>
 80082f0:	e7d1      	b.n	8008296 <_dtoa_r+0x69e>
 80082f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	f000 80ea 	beq.w	80084ce <_dtoa_r+0x8d6>
 80082fa:	9a07      	ldr	r2, [sp, #28]
 80082fc:	2a01      	cmp	r2, #1
 80082fe:	f300 80cd 	bgt.w	800849c <_dtoa_r+0x8a4>
 8008302:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008304:	2a00      	cmp	r2, #0
 8008306:	f000 80c1 	beq.w	800848c <_dtoa_r+0x894>
 800830a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800830e:	9c08      	ldr	r4, [sp, #32]
 8008310:	9e00      	ldr	r6, [sp, #0]
 8008312:	9a00      	ldr	r2, [sp, #0]
 8008314:	441a      	add	r2, r3
 8008316:	9200      	str	r2, [sp, #0]
 8008318:	9a06      	ldr	r2, [sp, #24]
 800831a:	2101      	movs	r1, #1
 800831c:	441a      	add	r2, r3
 800831e:	4648      	mov	r0, r9
 8008320:	9206      	str	r2, [sp, #24]
 8008322:	f000 fe31 	bl	8008f88 <__i2b>
 8008326:	4605      	mov	r5, r0
 8008328:	b166      	cbz	r6, 8008344 <_dtoa_r+0x74c>
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd09      	ble.n	8008344 <_dtoa_r+0x74c>
 8008330:	42b3      	cmp	r3, r6
 8008332:	9a00      	ldr	r2, [sp, #0]
 8008334:	bfa8      	it	ge
 8008336:	4633      	movge	r3, r6
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	9200      	str	r2, [sp, #0]
 800833c:	9a06      	ldr	r2, [sp, #24]
 800833e:	1af6      	subs	r6, r6, r3
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	9b08      	ldr	r3, [sp, #32]
 8008346:	b30b      	cbz	r3, 800838c <_dtoa_r+0x794>
 8008348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80c6 	beq.w	80084dc <_dtoa_r+0x8e4>
 8008350:	2c00      	cmp	r4, #0
 8008352:	f000 80c0 	beq.w	80084d6 <_dtoa_r+0x8de>
 8008356:	4629      	mov	r1, r5
 8008358:	4622      	mov	r2, r4
 800835a:	4648      	mov	r0, r9
 800835c:	f000 fecc 	bl	80090f8 <__pow5mult>
 8008360:	9a02      	ldr	r2, [sp, #8]
 8008362:	4601      	mov	r1, r0
 8008364:	4605      	mov	r5, r0
 8008366:	4648      	mov	r0, r9
 8008368:	f000 fe24 	bl	8008fb4 <__multiply>
 800836c:	9902      	ldr	r1, [sp, #8]
 800836e:	4680      	mov	r8, r0
 8008370:	4648      	mov	r0, r9
 8008372:	f000 fd55 	bl	8008e20 <_Bfree>
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	1b1b      	subs	r3, r3, r4
 800837a:	9308      	str	r3, [sp, #32]
 800837c:	f000 80b1 	beq.w	80084e2 <_dtoa_r+0x8ea>
 8008380:	9a08      	ldr	r2, [sp, #32]
 8008382:	4641      	mov	r1, r8
 8008384:	4648      	mov	r0, r9
 8008386:	f000 feb7 	bl	80090f8 <__pow5mult>
 800838a:	9002      	str	r0, [sp, #8]
 800838c:	2101      	movs	r1, #1
 800838e:	4648      	mov	r0, r9
 8008390:	f000 fdfa 	bl	8008f88 <__i2b>
 8008394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008396:	4604      	mov	r4, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 81d8 	beq.w	800874e <_dtoa_r+0xb56>
 800839e:	461a      	mov	r2, r3
 80083a0:	4601      	mov	r1, r0
 80083a2:	4648      	mov	r0, r9
 80083a4:	f000 fea8 	bl	80090f8 <__pow5mult>
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	4604      	mov	r4, r0
 80083ae:	f300 809f 	bgt.w	80084f0 <_dtoa_r+0x8f8>
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f040 8097 	bne.w	80084e8 <_dtoa_r+0x8f0>
 80083ba:	9b05      	ldr	r3, [sp, #20]
 80083bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8093 	bne.w	80084ec <_dtoa_r+0x8f4>
 80083c6:	9b05      	ldr	r3, [sp, #20]
 80083c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083cc:	0d1b      	lsrs	r3, r3, #20
 80083ce:	051b      	lsls	r3, r3, #20
 80083d0:	b133      	cbz	r3, 80083e0 <_dtoa_r+0x7e8>
 80083d2:	9b00      	ldr	r3, [sp, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	9b06      	ldr	r3, [sp, #24]
 80083da:	3301      	adds	r3, #1
 80083dc:	9306      	str	r3, [sp, #24]
 80083de:	2301      	movs	r3, #1
 80083e0:	9308      	str	r3, [sp, #32]
 80083e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 81b8 	beq.w	800875a <_dtoa_r+0xb62>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083f0:	6918      	ldr	r0, [r3, #16]
 80083f2:	f000 fd7d 	bl	8008ef0 <__hi0bits>
 80083f6:	f1c0 0020 	rsb	r0, r0, #32
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	4418      	add	r0, r3
 80083fe:	f010 001f 	ands.w	r0, r0, #31
 8008402:	f000 8082 	beq.w	800850a <_dtoa_r+0x912>
 8008406:	f1c0 0320 	rsb	r3, r0, #32
 800840a:	2b04      	cmp	r3, #4
 800840c:	dd73      	ble.n	80084f6 <_dtoa_r+0x8fe>
 800840e:	9b00      	ldr	r3, [sp, #0]
 8008410:	f1c0 001c 	rsb	r0, r0, #28
 8008414:	4403      	add	r3, r0
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	4403      	add	r3, r0
 800841c:	4406      	add	r6, r0
 800841e:	9306      	str	r3, [sp, #24]
 8008420:	9b00      	ldr	r3, [sp, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd05      	ble.n	8008432 <_dtoa_r+0x83a>
 8008426:	9902      	ldr	r1, [sp, #8]
 8008428:	461a      	mov	r2, r3
 800842a:	4648      	mov	r0, r9
 800842c:	f000 febe 	bl	80091ac <__lshift>
 8008430:	9002      	str	r0, [sp, #8]
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd05      	ble.n	8008444 <_dtoa_r+0x84c>
 8008438:	4621      	mov	r1, r4
 800843a:	461a      	mov	r2, r3
 800843c:	4648      	mov	r0, r9
 800843e:	f000 feb5 	bl	80091ac <__lshift>
 8008442:	4604      	mov	r4, r0
 8008444:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d061      	beq.n	800850e <_dtoa_r+0x916>
 800844a:	9802      	ldr	r0, [sp, #8]
 800844c:	4621      	mov	r1, r4
 800844e:	f000 ff19 	bl	8009284 <__mcmp>
 8008452:	2800      	cmp	r0, #0
 8008454:	da5b      	bge.n	800850e <_dtoa_r+0x916>
 8008456:	2300      	movs	r3, #0
 8008458:	9902      	ldr	r1, [sp, #8]
 800845a:	220a      	movs	r2, #10
 800845c:	4648      	mov	r0, r9
 800845e:	f000 fd01 	bl	8008e64 <__multadd>
 8008462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008464:	9002      	str	r0, [sp, #8]
 8008466:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8177 	beq.w	800875e <_dtoa_r+0xb66>
 8008470:	4629      	mov	r1, r5
 8008472:	2300      	movs	r3, #0
 8008474:	220a      	movs	r2, #10
 8008476:	4648      	mov	r0, r9
 8008478:	f000 fcf4 	bl	8008e64 <__multadd>
 800847c:	f1bb 0f00 	cmp.w	fp, #0
 8008480:	4605      	mov	r5, r0
 8008482:	dc6f      	bgt.n	8008564 <_dtoa_r+0x96c>
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	2b02      	cmp	r3, #2
 8008488:	dc49      	bgt.n	800851e <_dtoa_r+0x926>
 800848a:	e06b      	b.n	8008564 <_dtoa_r+0x96c>
 800848c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800848e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008492:	e73c      	b.n	800830e <_dtoa_r+0x716>
 8008494:	3fe00000 	.word	0x3fe00000
 8008498:	40240000 	.word	0x40240000
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	1e5c      	subs	r4, r3, #1
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	db09      	blt.n	80084ba <_dtoa_r+0x8c2>
 80084a6:	1b1c      	subs	r4, r3, r4
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f6bf af30 	bge.w	8008310 <_dtoa_r+0x718>
 80084b0:	9b00      	ldr	r3, [sp, #0]
 80084b2:	9a03      	ldr	r2, [sp, #12]
 80084b4:	1a9e      	subs	r6, r3, r2
 80084b6:	2300      	movs	r3, #0
 80084b8:	e72b      	b.n	8008312 <_dtoa_r+0x71a>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084be:	9408      	str	r4, [sp, #32]
 80084c0:	1ae3      	subs	r3, r4, r3
 80084c2:	441a      	add	r2, r3
 80084c4:	9e00      	ldr	r6, [sp, #0]
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80084ca:	2400      	movs	r4, #0
 80084cc:	e721      	b.n	8008312 <_dtoa_r+0x71a>
 80084ce:	9c08      	ldr	r4, [sp, #32]
 80084d0:	9e00      	ldr	r6, [sp, #0]
 80084d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80084d4:	e728      	b.n	8008328 <_dtoa_r+0x730>
 80084d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80084da:	e751      	b.n	8008380 <_dtoa_r+0x788>
 80084dc:	9a08      	ldr	r2, [sp, #32]
 80084de:	9902      	ldr	r1, [sp, #8]
 80084e0:	e750      	b.n	8008384 <_dtoa_r+0x78c>
 80084e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80084e6:	e751      	b.n	800838c <_dtoa_r+0x794>
 80084e8:	2300      	movs	r3, #0
 80084ea:	e779      	b.n	80083e0 <_dtoa_r+0x7e8>
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	e777      	b.n	80083e0 <_dtoa_r+0x7e8>
 80084f0:	2300      	movs	r3, #0
 80084f2:	9308      	str	r3, [sp, #32]
 80084f4:	e779      	b.n	80083ea <_dtoa_r+0x7f2>
 80084f6:	d093      	beq.n	8008420 <_dtoa_r+0x828>
 80084f8:	9a00      	ldr	r2, [sp, #0]
 80084fa:	331c      	adds	r3, #28
 80084fc:	441a      	add	r2, r3
 80084fe:	9200      	str	r2, [sp, #0]
 8008500:	9a06      	ldr	r2, [sp, #24]
 8008502:	441a      	add	r2, r3
 8008504:	441e      	add	r6, r3
 8008506:	9206      	str	r2, [sp, #24]
 8008508:	e78a      	b.n	8008420 <_dtoa_r+0x828>
 800850a:	4603      	mov	r3, r0
 800850c:	e7f4      	b.n	80084f8 <_dtoa_r+0x900>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	46b8      	mov	r8, r7
 8008514:	dc20      	bgt.n	8008558 <_dtoa_r+0x960>
 8008516:	469b      	mov	fp, r3
 8008518:	9b07      	ldr	r3, [sp, #28]
 800851a:	2b02      	cmp	r3, #2
 800851c:	dd1e      	ble.n	800855c <_dtoa_r+0x964>
 800851e:	f1bb 0f00 	cmp.w	fp, #0
 8008522:	f47f adb1 	bne.w	8008088 <_dtoa_r+0x490>
 8008526:	4621      	mov	r1, r4
 8008528:	465b      	mov	r3, fp
 800852a:	2205      	movs	r2, #5
 800852c:	4648      	mov	r0, r9
 800852e:	f000 fc99 	bl	8008e64 <__multadd>
 8008532:	4601      	mov	r1, r0
 8008534:	4604      	mov	r4, r0
 8008536:	9802      	ldr	r0, [sp, #8]
 8008538:	f000 fea4 	bl	8009284 <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	f77f ada3 	ble.w	8008088 <_dtoa_r+0x490>
 8008542:	4656      	mov	r6, sl
 8008544:	2331      	movs	r3, #49	@ 0x31
 8008546:	f806 3b01 	strb.w	r3, [r6], #1
 800854a:	f108 0801 	add.w	r8, r8, #1
 800854e:	e59f      	b.n	8008090 <_dtoa_r+0x498>
 8008550:	9c03      	ldr	r4, [sp, #12]
 8008552:	46b8      	mov	r8, r7
 8008554:	4625      	mov	r5, r4
 8008556:	e7f4      	b.n	8008542 <_dtoa_r+0x94a>
 8008558:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800855c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8101 	beq.w	8008766 <_dtoa_r+0xb6e>
 8008564:	2e00      	cmp	r6, #0
 8008566:	dd05      	ble.n	8008574 <_dtoa_r+0x97c>
 8008568:	4629      	mov	r1, r5
 800856a:	4632      	mov	r2, r6
 800856c:	4648      	mov	r0, r9
 800856e:	f000 fe1d 	bl	80091ac <__lshift>
 8008572:	4605      	mov	r5, r0
 8008574:	9b08      	ldr	r3, [sp, #32]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d05c      	beq.n	8008634 <_dtoa_r+0xa3c>
 800857a:	6869      	ldr	r1, [r5, #4]
 800857c:	4648      	mov	r0, r9
 800857e:	f000 fc0f 	bl	8008da0 <_Balloc>
 8008582:	4606      	mov	r6, r0
 8008584:	b928      	cbnz	r0, 8008592 <_dtoa_r+0x99a>
 8008586:	4b82      	ldr	r3, [pc, #520]	@ (8008790 <_dtoa_r+0xb98>)
 8008588:	4602      	mov	r2, r0
 800858a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800858e:	f7ff bb4a 	b.w	8007c26 <_dtoa_r+0x2e>
 8008592:	692a      	ldr	r2, [r5, #16]
 8008594:	3202      	adds	r2, #2
 8008596:	0092      	lsls	r2, r2, #2
 8008598:	f105 010c 	add.w	r1, r5, #12
 800859c:	300c      	adds	r0, #12
 800859e:	f7ff fa93 	bl	8007ac8 <memcpy>
 80085a2:	2201      	movs	r2, #1
 80085a4:	4631      	mov	r1, r6
 80085a6:	4648      	mov	r0, r9
 80085a8:	f000 fe00 	bl	80091ac <__lshift>
 80085ac:	f10a 0301 	add.w	r3, sl, #1
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	eb0a 030b 	add.w	r3, sl, fp
 80085b6:	9308      	str	r3, [sp, #32]
 80085b8:	9b04      	ldr	r3, [sp, #16]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	462f      	mov	r7, r5
 80085c0:	9306      	str	r3, [sp, #24]
 80085c2:	4605      	mov	r5, r0
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	9802      	ldr	r0, [sp, #8]
 80085c8:	4621      	mov	r1, r4
 80085ca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80085ce:	f7ff fa89 	bl	8007ae4 <quorem>
 80085d2:	4603      	mov	r3, r0
 80085d4:	3330      	adds	r3, #48	@ 0x30
 80085d6:	9003      	str	r0, [sp, #12]
 80085d8:	4639      	mov	r1, r7
 80085da:	9802      	ldr	r0, [sp, #8]
 80085dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085de:	f000 fe51 	bl	8009284 <__mcmp>
 80085e2:	462a      	mov	r2, r5
 80085e4:	9004      	str	r0, [sp, #16]
 80085e6:	4621      	mov	r1, r4
 80085e8:	4648      	mov	r0, r9
 80085ea:	f000 fe67 	bl	80092bc <__mdiff>
 80085ee:	68c2      	ldr	r2, [r0, #12]
 80085f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f2:	4606      	mov	r6, r0
 80085f4:	bb02      	cbnz	r2, 8008638 <_dtoa_r+0xa40>
 80085f6:	4601      	mov	r1, r0
 80085f8:	9802      	ldr	r0, [sp, #8]
 80085fa:	f000 fe43 	bl	8009284 <__mcmp>
 80085fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008600:	4602      	mov	r2, r0
 8008602:	4631      	mov	r1, r6
 8008604:	4648      	mov	r0, r9
 8008606:	920c      	str	r2, [sp, #48]	@ 0x30
 8008608:	9309      	str	r3, [sp, #36]	@ 0x24
 800860a:	f000 fc09 	bl	8008e20 <_Bfree>
 800860e:	9b07      	ldr	r3, [sp, #28]
 8008610:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008612:	9e00      	ldr	r6, [sp, #0]
 8008614:	ea42 0103 	orr.w	r1, r2, r3
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	4319      	orrs	r1, r3
 800861c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861e:	d10d      	bne.n	800863c <_dtoa_r+0xa44>
 8008620:	2b39      	cmp	r3, #57	@ 0x39
 8008622:	d027      	beq.n	8008674 <_dtoa_r+0xa7c>
 8008624:	9a04      	ldr	r2, [sp, #16]
 8008626:	2a00      	cmp	r2, #0
 8008628:	dd01      	ble.n	800862e <_dtoa_r+0xa36>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	3331      	adds	r3, #49	@ 0x31
 800862e:	f88b 3000 	strb.w	r3, [fp]
 8008632:	e52e      	b.n	8008092 <_dtoa_r+0x49a>
 8008634:	4628      	mov	r0, r5
 8008636:	e7b9      	b.n	80085ac <_dtoa_r+0x9b4>
 8008638:	2201      	movs	r2, #1
 800863a:	e7e2      	b.n	8008602 <_dtoa_r+0xa0a>
 800863c:	9904      	ldr	r1, [sp, #16]
 800863e:	2900      	cmp	r1, #0
 8008640:	db04      	blt.n	800864c <_dtoa_r+0xa54>
 8008642:	9807      	ldr	r0, [sp, #28]
 8008644:	4301      	orrs	r1, r0
 8008646:	9806      	ldr	r0, [sp, #24]
 8008648:	4301      	orrs	r1, r0
 800864a:	d120      	bne.n	800868e <_dtoa_r+0xa96>
 800864c:	2a00      	cmp	r2, #0
 800864e:	ddee      	ble.n	800862e <_dtoa_r+0xa36>
 8008650:	9902      	ldr	r1, [sp, #8]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2201      	movs	r2, #1
 8008656:	4648      	mov	r0, r9
 8008658:	f000 fda8 	bl	80091ac <__lshift>
 800865c:	4621      	mov	r1, r4
 800865e:	9002      	str	r0, [sp, #8]
 8008660:	f000 fe10 	bl	8009284 <__mcmp>
 8008664:	2800      	cmp	r0, #0
 8008666:	9b00      	ldr	r3, [sp, #0]
 8008668:	dc02      	bgt.n	8008670 <_dtoa_r+0xa78>
 800866a:	d1e0      	bne.n	800862e <_dtoa_r+0xa36>
 800866c:	07da      	lsls	r2, r3, #31
 800866e:	d5de      	bpl.n	800862e <_dtoa_r+0xa36>
 8008670:	2b39      	cmp	r3, #57	@ 0x39
 8008672:	d1da      	bne.n	800862a <_dtoa_r+0xa32>
 8008674:	2339      	movs	r3, #57	@ 0x39
 8008676:	f88b 3000 	strb.w	r3, [fp]
 800867a:	4633      	mov	r3, r6
 800867c:	461e      	mov	r6, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008684:	2a39      	cmp	r2, #57	@ 0x39
 8008686:	d04e      	beq.n	8008726 <_dtoa_r+0xb2e>
 8008688:	3201      	adds	r2, #1
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e501      	b.n	8008092 <_dtoa_r+0x49a>
 800868e:	2a00      	cmp	r2, #0
 8008690:	dd03      	ble.n	800869a <_dtoa_r+0xaa2>
 8008692:	2b39      	cmp	r3, #57	@ 0x39
 8008694:	d0ee      	beq.n	8008674 <_dtoa_r+0xa7c>
 8008696:	3301      	adds	r3, #1
 8008698:	e7c9      	b.n	800862e <_dtoa_r+0xa36>
 800869a:	9a00      	ldr	r2, [sp, #0]
 800869c:	9908      	ldr	r1, [sp, #32]
 800869e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086a2:	428a      	cmp	r2, r1
 80086a4:	d028      	beq.n	80086f8 <_dtoa_r+0xb00>
 80086a6:	9902      	ldr	r1, [sp, #8]
 80086a8:	2300      	movs	r3, #0
 80086aa:	220a      	movs	r2, #10
 80086ac:	4648      	mov	r0, r9
 80086ae:	f000 fbd9 	bl	8008e64 <__multadd>
 80086b2:	42af      	cmp	r7, r5
 80086b4:	9002      	str	r0, [sp, #8]
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	f04f 020a 	mov.w	r2, #10
 80086be:	4639      	mov	r1, r7
 80086c0:	4648      	mov	r0, r9
 80086c2:	d107      	bne.n	80086d4 <_dtoa_r+0xadc>
 80086c4:	f000 fbce 	bl	8008e64 <__multadd>
 80086c8:	4607      	mov	r7, r0
 80086ca:	4605      	mov	r5, r0
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	e777      	b.n	80085c4 <_dtoa_r+0x9cc>
 80086d4:	f000 fbc6 	bl	8008e64 <__multadd>
 80086d8:	4629      	mov	r1, r5
 80086da:	4607      	mov	r7, r0
 80086dc:	2300      	movs	r3, #0
 80086de:	220a      	movs	r2, #10
 80086e0:	4648      	mov	r0, r9
 80086e2:	f000 fbbf 	bl	8008e64 <__multadd>
 80086e6:	4605      	mov	r5, r0
 80086e8:	e7f0      	b.n	80086cc <_dtoa_r+0xad4>
 80086ea:	f1bb 0f00 	cmp.w	fp, #0
 80086ee:	bfcc      	ite	gt
 80086f0:	465e      	movgt	r6, fp
 80086f2:	2601      	movle	r6, #1
 80086f4:	4456      	add	r6, sl
 80086f6:	2700      	movs	r7, #0
 80086f8:	9902      	ldr	r1, [sp, #8]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	4648      	mov	r0, r9
 8008700:	f000 fd54 	bl	80091ac <__lshift>
 8008704:	4621      	mov	r1, r4
 8008706:	9002      	str	r0, [sp, #8]
 8008708:	f000 fdbc 	bl	8009284 <__mcmp>
 800870c:	2800      	cmp	r0, #0
 800870e:	dcb4      	bgt.n	800867a <_dtoa_r+0xa82>
 8008710:	d102      	bne.n	8008718 <_dtoa_r+0xb20>
 8008712:	9b00      	ldr	r3, [sp, #0]
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	d4b0      	bmi.n	800867a <_dtoa_r+0xa82>
 8008718:	4633      	mov	r3, r6
 800871a:	461e      	mov	r6, r3
 800871c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008720:	2a30      	cmp	r2, #48	@ 0x30
 8008722:	d0fa      	beq.n	800871a <_dtoa_r+0xb22>
 8008724:	e4b5      	b.n	8008092 <_dtoa_r+0x49a>
 8008726:	459a      	cmp	sl, r3
 8008728:	d1a8      	bne.n	800867c <_dtoa_r+0xa84>
 800872a:	2331      	movs	r3, #49	@ 0x31
 800872c:	f108 0801 	add.w	r8, r8, #1
 8008730:	f88a 3000 	strb.w	r3, [sl]
 8008734:	e4ad      	b.n	8008092 <_dtoa_r+0x49a>
 8008736:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008738:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008794 <_dtoa_r+0xb9c>
 800873c:	b11b      	cbz	r3, 8008746 <_dtoa_r+0xb4e>
 800873e:	f10a 0308 	add.w	r3, sl, #8
 8008742:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4650      	mov	r0, sl
 8008748:	b017      	add	sp, #92	@ 0x5c
 800874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874e:	9b07      	ldr	r3, [sp, #28]
 8008750:	2b01      	cmp	r3, #1
 8008752:	f77f ae2e 	ble.w	80083b2 <_dtoa_r+0x7ba>
 8008756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008758:	9308      	str	r3, [sp, #32]
 800875a:	2001      	movs	r0, #1
 800875c:	e64d      	b.n	80083fa <_dtoa_r+0x802>
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	f77f aed9 	ble.w	8008518 <_dtoa_r+0x920>
 8008766:	4656      	mov	r6, sl
 8008768:	9802      	ldr	r0, [sp, #8]
 800876a:	4621      	mov	r1, r4
 800876c:	f7ff f9ba 	bl	8007ae4 <quorem>
 8008770:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008774:	f806 3b01 	strb.w	r3, [r6], #1
 8008778:	eba6 020a 	sub.w	r2, r6, sl
 800877c:	4593      	cmp	fp, r2
 800877e:	ddb4      	ble.n	80086ea <_dtoa_r+0xaf2>
 8008780:	9902      	ldr	r1, [sp, #8]
 8008782:	2300      	movs	r3, #0
 8008784:	220a      	movs	r2, #10
 8008786:	4648      	mov	r0, r9
 8008788:	f000 fb6c 	bl	8008e64 <__multadd>
 800878c:	9002      	str	r0, [sp, #8]
 800878e:	e7eb      	b.n	8008768 <_dtoa_r+0xb70>
 8008790:	08009dec 	.word	0x08009dec
 8008794:	08009d70 	.word	0x08009d70

08008798 <_free_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4605      	mov	r5, r0
 800879c:	2900      	cmp	r1, #0
 800879e:	d041      	beq.n	8008824 <_free_r+0x8c>
 80087a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a4:	1f0c      	subs	r4, r1, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfb8      	it	lt
 80087aa:	18e4      	addlt	r4, r4, r3
 80087ac:	f000 faec 	bl	8008d88 <__malloc_lock>
 80087b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008828 <_free_r+0x90>)
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	b933      	cbnz	r3, 80087c4 <_free_r+0x2c>
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	6014      	str	r4, [r2, #0]
 80087ba:	4628      	mov	r0, r5
 80087bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c0:	f000 bae8 	b.w	8008d94 <__malloc_unlock>
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	d908      	bls.n	80087da <_free_r+0x42>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	1821      	adds	r1, r4, r0
 80087cc:	428b      	cmp	r3, r1
 80087ce:	bf01      	itttt	eq
 80087d0:	6819      	ldreq	r1, [r3, #0]
 80087d2:	685b      	ldreq	r3, [r3, #4]
 80087d4:	1809      	addeq	r1, r1, r0
 80087d6:	6021      	streq	r1, [r4, #0]
 80087d8:	e7ed      	b.n	80087b6 <_free_r+0x1e>
 80087da:	461a      	mov	r2, r3
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b10b      	cbz	r3, 80087e4 <_free_r+0x4c>
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d9fa      	bls.n	80087da <_free_r+0x42>
 80087e4:	6811      	ldr	r1, [r2, #0]
 80087e6:	1850      	adds	r0, r2, r1
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d10b      	bne.n	8008804 <_free_r+0x6c>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	4401      	add	r1, r0
 80087f0:	1850      	adds	r0, r2, r1
 80087f2:	4283      	cmp	r3, r0
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	d1e0      	bne.n	80087ba <_free_r+0x22>
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	6053      	str	r3, [r2, #4]
 80087fe:	4408      	add	r0, r1
 8008800:	6010      	str	r0, [r2, #0]
 8008802:	e7da      	b.n	80087ba <_free_r+0x22>
 8008804:	d902      	bls.n	800880c <_free_r+0x74>
 8008806:	230c      	movs	r3, #12
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	e7d6      	b.n	80087ba <_free_r+0x22>
 800880c:	6820      	ldr	r0, [r4, #0]
 800880e:	1821      	adds	r1, r4, r0
 8008810:	428b      	cmp	r3, r1
 8008812:	bf04      	itt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	bf04      	itt	eq
 800881c:	1809      	addeq	r1, r1, r0
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	6054      	str	r4, [r2, #4]
 8008822:	e7ca      	b.n	80087ba <_free_r+0x22>
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	bf00      	nop
 8008828:	20004500 	.word	0x20004500

0800882c <__ssputs_r>:
 800882c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008830:	688e      	ldr	r6, [r1, #8]
 8008832:	461f      	mov	r7, r3
 8008834:	42be      	cmp	r6, r7
 8008836:	680b      	ldr	r3, [r1, #0]
 8008838:	4682      	mov	sl, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4690      	mov	r8, r2
 800883e:	d82d      	bhi.n	800889c <__ssputs_r+0x70>
 8008840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008848:	d026      	beq.n	8008898 <__ssputs_r+0x6c>
 800884a:	6965      	ldr	r5, [r4, #20]
 800884c:	6909      	ldr	r1, [r1, #16]
 800884e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008852:	eba3 0901 	sub.w	r9, r3, r1
 8008856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800885a:	1c7b      	adds	r3, r7, #1
 800885c:	444b      	add	r3, r9
 800885e:	106d      	asrs	r5, r5, #1
 8008860:	429d      	cmp	r5, r3
 8008862:	bf38      	it	cc
 8008864:	461d      	movcc	r5, r3
 8008866:	0553      	lsls	r3, r2, #21
 8008868:	d527      	bpl.n	80088ba <__ssputs_r+0x8e>
 800886a:	4629      	mov	r1, r5
 800886c:	f000 f960 	bl	8008b30 <_malloc_r>
 8008870:	4606      	mov	r6, r0
 8008872:	b360      	cbz	r0, 80088ce <__ssputs_r+0xa2>
 8008874:	6921      	ldr	r1, [r4, #16]
 8008876:	464a      	mov	r2, r9
 8008878:	f7ff f926 	bl	8007ac8 <memcpy>
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008886:	81a3      	strh	r3, [r4, #12]
 8008888:	6126      	str	r6, [r4, #16]
 800888a:	6165      	str	r5, [r4, #20]
 800888c:	444e      	add	r6, r9
 800888e:	eba5 0509 	sub.w	r5, r5, r9
 8008892:	6026      	str	r6, [r4, #0]
 8008894:	60a5      	str	r5, [r4, #8]
 8008896:	463e      	mov	r6, r7
 8008898:	42be      	cmp	r6, r7
 800889a:	d900      	bls.n	800889e <__ssputs_r+0x72>
 800889c:	463e      	mov	r6, r7
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	4632      	mov	r2, r6
 80088a2:	4641      	mov	r1, r8
 80088a4:	f000 fe67 	bl	8009576 <memmove>
 80088a8:	68a3      	ldr	r3, [r4, #8]
 80088aa:	1b9b      	subs	r3, r3, r6
 80088ac:	60a3      	str	r3, [r4, #8]
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	4433      	add	r3, r6
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	2000      	movs	r0, #0
 80088b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ba:	462a      	mov	r2, r5
 80088bc:	f000 fe2d 	bl	800951a <_realloc_r>
 80088c0:	4606      	mov	r6, r0
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d1e0      	bne.n	8008888 <__ssputs_r+0x5c>
 80088c6:	6921      	ldr	r1, [r4, #16]
 80088c8:	4650      	mov	r0, sl
 80088ca:	f7ff ff65 	bl	8008798 <_free_r>
 80088ce:	230c      	movs	r3, #12
 80088d0:	f8ca 3000 	str.w	r3, [sl]
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088e0:	e7e9      	b.n	80088b6 <__ssputs_r+0x8a>
	...

080088e4 <_svfiprintf_r>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	4698      	mov	r8, r3
 80088ea:	898b      	ldrh	r3, [r1, #12]
 80088ec:	061b      	lsls	r3, r3, #24
 80088ee:	b09d      	sub	sp, #116	@ 0x74
 80088f0:	4607      	mov	r7, r0
 80088f2:	460d      	mov	r5, r1
 80088f4:	4614      	mov	r4, r2
 80088f6:	d510      	bpl.n	800891a <_svfiprintf_r+0x36>
 80088f8:	690b      	ldr	r3, [r1, #16]
 80088fa:	b973      	cbnz	r3, 800891a <_svfiprintf_r+0x36>
 80088fc:	2140      	movs	r1, #64	@ 0x40
 80088fe:	f000 f917 	bl	8008b30 <_malloc_r>
 8008902:	6028      	str	r0, [r5, #0]
 8008904:	6128      	str	r0, [r5, #16]
 8008906:	b930      	cbnz	r0, 8008916 <_svfiprintf_r+0x32>
 8008908:	230c      	movs	r3, #12
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008910:	b01d      	add	sp, #116	@ 0x74
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008916:	2340      	movs	r3, #64	@ 0x40
 8008918:	616b      	str	r3, [r5, #20]
 800891a:	2300      	movs	r3, #0
 800891c:	9309      	str	r3, [sp, #36]	@ 0x24
 800891e:	2320      	movs	r3, #32
 8008920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008924:	f8cd 800c 	str.w	r8, [sp, #12]
 8008928:	2330      	movs	r3, #48	@ 0x30
 800892a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ac8 <_svfiprintf_r+0x1e4>
 800892e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008932:	f04f 0901 	mov.w	r9, #1
 8008936:	4623      	mov	r3, r4
 8008938:	469a      	mov	sl, r3
 800893a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800893e:	b10a      	cbz	r2, 8008944 <_svfiprintf_r+0x60>
 8008940:	2a25      	cmp	r2, #37	@ 0x25
 8008942:	d1f9      	bne.n	8008938 <_svfiprintf_r+0x54>
 8008944:	ebba 0b04 	subs.w	fp, sl, r4
 8008948:	d00b      	beq.n	8008962 <_svfiprintf_r+0x7e>
 800894a:	465b      	mov	r3, fp
 800894c:	4622      	mov	r2, r4
 800894e:	4629      	mov	r1, r5
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ff6b 	bl	800882c <__ssputs_r>
 8008956:	3001      	adds	r0, #1
 8008958:	f000 80a7 	beq.w	8008aaa <_svfiprintf_r+0x1c6>
 800895c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800895e:	445a      	add	r2, fp
 8008960:	9209      	str	r2, [sp, #36]	@ 0x24
 8008962:	f89a 3000 	ldrb.w	r3, [sl]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 809f 	beq.w	8008aaa <_svfiprintf_r+0x1c6>
 800896c:	2300      	movs	r3, #0
 800896e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008976:	f10a 0a01 	add.w	sl, sl, #1
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	9307      	str	r3, [sp, #28]
 800897e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008982:	931a      	str	r3, [sp, #104]	@ 0x68
 8008984:	4654      	mov	r4, sl
 8008986:	2205      	movs	r2, #5
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	484e      	ldr	r0, [pc, #312]	@ (8008ac8 <_svfiprintf_r+0x1e4>)
 800898e:	f7f7 fc3f 	bl	8000210 <memchr>
 8008992:	9a04      	ldr	r2, [sp, #16]
 8008994:	b9d8      	cbnz	r0, 80089ce <_svfiprintf_r+0xea>
 8008996:	06d0      	lsls	r0, r2, #27
 8008998:	bf44      	itt	mi
 800899a:	2320      	movmi	r3, #32
 800899c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a0:	0711      	lsls	r1, r2, #28
 80089a2:	bf44      	itt	mi
 80089a4:	232b      	movmi	r3, #43	@ 0x2b
 80089a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089aa:	f89a 3000 	ldrb.w	r3, [sl]
 80089ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b0:	d015      	beq.n	80089de <_svfiprintf_r+0xfa>
 80089b2:	9a07      	ldr	r2, [sp, #28]
 80089b4:	4654      	mov	r4, sl
 80089b6:	2000      	movs	r0, #0
 80089b8:	f04f 0c0a 	mov.w	ip, #10
 80089bc:	4621      	mov	r1, r4
 80089be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c2:	3b30      	subs	r3, #48	@ 0x30
 80089c4:	2b09      	cmp	r3, #9
 80089c6:	d94b      	bls.n	8008a60 <_svfiprintf_r+0x17c>
 80089c8:	b1b0      	cbz	r0, 80089f8 <_svfiprintf_r+0x114>
 80089ca:	9207      	str	r2, [sp, #28]
 80089cc:	e014      	b.n	80089f8 <_svfiprintf_r+0x114>
 80089ce:	eba0 0308 	sub.w	r3, r0, r8
 80089d2:	fa09 f303 	lsl.w	r3, r9, r3
 80089d6:	4313      	orrs	r3, r2
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	46a2      	mov	sl, r4
 80089dc:	e7d2      	b.n	8008984 <_svfiprintf_r+0xa0>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	1d19      	adds	r1, r3, #4
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	9103      	str	r1, [sp, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bfbb      	ittet	lt
 80089ea:	425b      	neglt	r3, r3
 80089ec:	f042 0202 	orrlt.w	r2, r2, #2
 80089f0:	9307      	strge	r3, [sp, #28]
 80089f2:	9307      	strlt	r3, [sp, #28]
 80089f4:	bfb8      	it	lt
 80089f6:	9204      	strlt	r2, [sp, #16]
 80089f8:	7823      	ldrb	r3, [r4, #0]
 80089fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80089fc:	d10a      	bne.n	8008a14 <_svfiprintf_r+0x130>
 80089fe:	7863      	ldrb	r3, [r4, #1]
 8008a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a02:	d132      	bne.n	8008a6a <_svfiprintf_r+0x186>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	1d1a      	adds	r2, r3, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	9203      	str	r2, [sp, #12]
 8008a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a10:	3402      	adds	r4, #2
 8008a12:	9305      	str	r3, [sp, #20]
 8008a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ad8 <_svfiprintf_r+0x1f4>
 8008a18:	7821      	ldrb	r1, [r4, #0]
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	f7f7 fbf7 	bl	8000210 <memchr>
 8008a22:	b138      	cbz	r0, 8008a34 <_svfiprintf_r+0x150>
 8008a24:	9b04      	ldr	r3, [sp, #16]
 8008a26:	eba0 000a 	sub.w	r0, r0, sl
 8008a2a:	2240      	movs	r2, #64	@ 0x40
 8008a2c:	4082      	lsls	r2, r0
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	3401      	adds	r4, #1
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a38:	4824      	ldr	r0, [pc, #144]	@ (8008acc <_svfiprintf_r+0x1e8>)
 8008a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a3e:	2206      	movs	r2, #6
 8008a40:	f7f7 fbe6 	bl	8000210 <memchr>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d036      	beq.n	8008ab6 <_svfiprintf_r+0x1d2>
 8008a48:	4b21      	ldr	r3, [pc, #132]	@ (8008ad0 <_svfiprintf_r+0x1ec>)
 8008a4a:	bb1b      	cbnz	r3, 8008a94 <_svfiprintf_r+0x1b0>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	3307      	adds	r3, #7
 8008a50:	f023 0307 	bic.w	r3, r3, #7
 8008a54:	3308      	adds	r3, #8
 8008a56:	9303      	str	r3, [sp, #12]
 8008a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5a:	4433      	add	r3, r6
 8008a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5e:	e76a      	b.n	8008936 <_svfiprintf_r+0x52>
 8008a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a64:	460c      	mov	r4, r1
 8008a66:	2001      	movs	r0, #1
 8008a68:	e7a8      	b.n	80089bc <_svfiprintf_r+0xd8>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	9305      	str	r3, [sp, #20]
 8008a70:	4619      	mov	r1, r3
 8008a72:	f04f 0c0a 	mov.w	ip, #10
 8008a76:	4620      	mov	r0, r4
 8008a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a7c:	3a30      	subs	r2, #48	@ 0x30
 8008a7e:	2a09      	cmp	r2, #9
 8008a80:	d903      	bls.n	8008a8a <_svfiprintf_r+0x1a6>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0c6      	beq.n	8008a14 <_svfiprintf_r+0x130>
 8008a86:	9105      	str	r1, [sp, #20]
 8008a88:	e7c4      	b.n	8008a14 <_svfiprintf_r+0x130>
 8008a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a8e:	4604      	mov	r4, r0
 8008a90:	2301      	movs	r3, #1
 8008a92:	e7f0      	b.n	8008a76 <_svfiprintf_r+0x192>
 8008a94:	ab03      	add	r3, sp, #12
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <_svfiprintf_r+0x1f0>)
 8008a9c:	a904      	add	r1, sp, #16
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7fe fae0 	bl	8007064 <_printf_float>
 8008aa4:	1c42      	adds	r2, r0, #1
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	d1d6      	bne.n	8008a58 <_svfiprintf_r+0x174>
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	065b      	lsls	r3, r3, #25
 8008aae:	f53f af2d 	bmi.w	800890c <_svfiprintf_r+0x28>
 8008ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ab4:	e72c      	b.n	8008910 <_svfiprintf_r+0x2c>
 8008ab6:	ab03      	add	r3, sp, #12
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	462a      	mov	r2, r5
 8008abc:	4b05      	ldr	r3, [pc, #20]	@ (8008ad4 <_svfiprintf_r+0x1f0>)
 8008abe:	a904      	add	r1, sp, #16
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7fe fd67 	bl	8007594 <_printf_i>
 8008ac6:	e7ed      	b.n	8008aa4 <_svfiprintf_r+0x1c0>
 8008ac8:	08009dfd 	.word	0x08009dfd
 8008acc:	08009e07 	.word	0x08009e07
 8008ad0:	08007065 	.word	0x08007065
 8008ad4:	0800882d 	.word	0x0800882d
 8008ad8:	08009e03 	.word	0x08009e03

08008adc <malloc>:
 8008adc:	4b02      	ldr	r3, [pc, #8]	@ (8008ae8 <malloc+0xc>)
 8008ade:	4601      	mov	r1, r0
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	f000 b825 	b.w	8008b30 <_malloc_r>
 8008ae6:	bf00      	nop
 8008ae8:	2000001c 	.word	0x2000001c

08008aec <sbrk_aligned>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4e0f      	ldr	r6, [pc, #60]	@ (8008b2c <sbrk_aligned+0x40>)
 8008af0:	460c      	mov	r4, r1
 8008af2:	6831      	ldr	r1, [r6, #0]
 8008af4:	4605      	mov	r5, r0
 8008af6:	b911      	cbnz	r1, 8008afe <sbrk_aligned+0x12>
 8008af8:	f000 fd7c 	bl	80095f4 <_sbrk_r>
 8008afc:	6030      	str	r0, [r6, #0]
 8008afe:	4621      	mov	r1, r4
 8008b00:	4628      	mov	r0, r5
 8008b02:	f000 fd77 	bl	80095f4 <_sbrk_r>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d103      	bne.n	8008b12 <sbrk_aligned+0x26>
 8008b0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b0e:	4620      	mov	r0, r4
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	1cc4      	adds	r4, r0, #3
 8008b14:	f024 0403 	bic.w	r4, r4, #3
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d0f8      	beq.n	8008b0e <sbrk_aligned+0x22>
 8008b1c:	1a21      	subs	r1, r4, r0
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 fd68 	bl	80095f4 <_sbrk_r>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1f2      	bne.n	8008b0e <sbrk_aligned+0x22>
 8008b28:	e7ef      	b.n	8008b0a <sbrk_aligned+0x1e>
 8008b2a:	bf00      	nop
 8008b2c:	200044fc 	.word	0x200044fc

08008b30 <_malloc_r>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	1ccd      	adds	r5, r1, #3
 8008b36:	f025 0503 	bic.w	r5, r5, #3
 8008b3a:	3508      	adds	r5, #8
 8008b3c:	2d0c      	cmp	r5, #12
 8008b3e:	bf38      	it	cc
 8008b40:	250c      	movcc	r5, #12
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	4606      	mov	r6, r0
 8008b46:	db01      	blt.n	8008b4c <_malloc_r+0x1c>
 8008b48:	42a9      	cmp	r1, r5
 8008b4a:	d904      	bls.n	8008b56 <_malloc_r+0x26>
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	2000      	movs	r0, #0
 8008b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c2c <_malloc_r+0xfc>
 8008b5a:	f000 f915 	bl	8008d88 <__malloc_lock>
 8008b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b62:	461c      	mov	r4, r3
 8008b64:	bb44      	cbnz	r4, 8008bb8 <_malloc_r+0x88>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7ff ffbf 	bl	8008aec <sbrk_aligned>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	4604      	mov	r4, r0
 8008b72:	d158      	bne.n	8008c26 <_malloc_r+0xf6>
 8008b74:	f8d8 4000 	ldr.w	r4, [r8]
 8008b78:	4627      	mov	r7, r4
 8008b7a:	2f00      	cmp	r7, #0
 8008b7c:	d143      	bne.n	8008c06 <_malloc_r+0xd6>
 8008b7e:	2c00      	cmp	r4, #0
 8008b80:	d04b      	beq.n	8008c1a <_malloc_r+0xea>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	4639      	mov	r1, r7
 8008b86:	4630      	mov	r0, r6
 8008b88:	eb04 0903 	add.w	r9, r4, r3
 8008b8c:	f000 fd32 	bl	80095f4 <_sbrk_r>
 8008b90:	4581      	cmp	r9, r0
 8008b92:	d142      	bne.n	8008c1a <_malloc_r+0xea>
 8008b94:	6821      	ldr	r1, [r4, #0]
 8008b96:	1a6d      	subs	r5, r5, r1
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ffa6 	bl	8008aec <sbrk_aligned>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d03a      	beq.n	8008c1a <_malloc_r+0xea>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	442b      	add	r3, r5
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	f8d8 3000 	ldr.w	r3, [r8]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	bb62      	cbnz	r2, 8008c0c <_malloc_r+0xdc>
 8008bb2:	f8c8 7000 	str.w	r7, [r8]
 8008bb6:	e00f      	b.n	8008bd8 <_malloc_r+0xa8>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	1b52      	subs	r2, r2, r5
 8008bbc:	d420      	bmi.n	8008c00 <_malloc_r+0xd0>
 8008bbe:	2a0b      	cmp	r2, #11
 8008bc0:	d917      	bls.n	8008bf2 <_malloc_r+0xc2>
 8008bc2:	1961      	adds	r1, r4, r5
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	6025      	str	r5, [r4, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	6059      	strne	r1, [r3, #4]
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	bf08      	it	eq
 8008bd0:	f8c8 1000 	streq.w	r1, [r8]
 8008bd4:	5162      	str	r2, [r4, r5]
 8008bd6:	604b      	str	r3, [r1, #4]
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f8db 	bl	8008d94 <__malloc_unlock>
 8008bde:	f104 000b 	add.w	r0, r4, #11
 8008be2:	1d23      	adds	r3, r4, #4
 8008be4:	f020 0007 	bic.w	r0, r0, #7
 8008be8:	1ac2      	subs	r2, r0, r3
 8008bea:	bf1c      	itt	ne
 8008bec:	1a1b      	subne	r3, r3, r0
 8008bee:	50a3      	strne	r3, [r4, r2]
 8008bf0:	e7af      	b.n	8008b52 <_malloc_r+0x22>
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	bf0c      	ite	eq
 8008bf8:	f8c8 2000 	streq.w	r2, [r8]
 8008bfc:	605a      	strne	r2, [r3, #4]
 8008bfe:	e7eb      	b.n	8008bd8 <_malloc_r+0xa8>
 8008c00:	4623      	mov	r3, r4
 8008c02:	6864      	ldr	r4, [r4, #4]
 8008c04:	e7ae      	b.n	8008b64 <_malloc_r+0x34>
 8008c06:	463c      	mov	r4, r7
 8008c08:	687f      	ldr	r7, [r7, #4]
 8008c0a:	e7b6      	b.n	8008b7a <_malloc_r+0x4a>
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d1fb      	bne.n	8008c0c <_malloc_r+0xdc>
 8008c14:	2300      	movs	r3, #0
 8008c16:	6053      	str	r3, [r2, #4]
 8008c18:	e7de      	b.n	8008bd8 <_malloc_r+0xa8>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 f8b8 	bl	8008d94 <__malloc_unlock>
 8008c24:	e794      	b.n	8008b50 <_malloc_r+0x20>
 8008c26:	6005      	str	r5, [r0, #0]
 8008c28:	e7d6      	b.n	8008bd8 <_malloc_r+0xa8>
 8008c2a:	bf00      	nop
 8008c2c:	20004500 	.word	0x20004500

08008c30 <__sflush_r>:
 8008c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c38:	0716      	lsls	r6, r2, #28
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	d454      	bmi.n	8008cea <__sflush_r+0xba>
 8008c40:	684b      	ldr	r3, [r1, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc02      	bgt.n	8008c4c <__sflush_r+0x1c>
 8008c46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dd48      	ble.n	8008cde <__sflush_r+0xae>
 8008c4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d045      	beq.n	8008cde <__sflush_r+0xae>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c58:	682f      	ldr	r7, [r5, #0]
 8008c5a:	6a21      	ldr	r1, [r4, #32]
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	d030      	beq.n	8008cc2 <__sflush_r+0x92>
 8008c60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	0759      	lsls	r1, r3, #29
 8008c66:	d505      	bpl.n	8008c74 <__sflush_r+0x44>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	1ad2      	subs	r2, r2, r3
 8008c6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c6e:	b10b      	cbz	r3, 8008c74 <__sflush_r+0x44>
 8008c70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c78:	6a21      	ldr	r1, [r4, #32]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b0      	blx	r6
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	d106      	bne.n	8008c92 <__sflush_r+0x62>
 8008c84:	6829      	ldr	r1, [r5, #0]
 8008c86:	291d      	cmp	r1, #29
 8008c88:	d82b      	bhi.n	8008ce2 <__sflush_r+0xb2>
 8008c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008d34 <__sflush_r+0x104>)
 8008c8c:	40ca      	lsrs	r2, r1
 8008c8e:	07d6      	lsls	r6, r2, #31
 8008c90:	d527      	bpl.n	8008ce2 <__sflush_r+0xb2>
 8008c92:	2200      	movs	r2, #0
 8008c94:	6062      	str	r2, [r4, #4]
 8008c96:	04d9      	lsls	r1, r3, #19
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	d504      	bpl.n	8008ca8 <__sflush_r+0x78>
 8008c9e:	1c42      	adds	r2, r0, #1
 8008ca0:	d101      	bne.n	8008ca6 <__sflush_r+0x76>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b903      	cbnz	r3, 8008ca8 <__sflush_r+0x78>
 8008ca6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008caa:	602f      	str	r7, [r5, #0]
 8008cac:	b1b9      	cbz	r1, 8008cde <__sflush_r+0xae>
 8008cae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d002      	beq.n	8008cbc <__sflush_r+0x8c>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7ff fd6e 	bl	8008798 <_free_r>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cc0:	e00d      	b.n	8008cde <__sflush_r+0xae>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	4602      	mov	r2, r0
 8008cca:	1c50      	adds	r0, r2, #1
 8008ccc:	d1c9      	bne.n	8008c62 <__sflush_r+0x32>
 8008cce:	682b      	ldr	r3, [r5, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0c6      	beq.n	8008c62 <__sflush_r+0x32>
 8008cd4:	2b1d      	cmp	r3, #29
 8008cd6:	d001      	beq.n	8008cdc <__sflush_r+0xac>
 8008cd8:	2b16      	cmp	r3, #22
 8008cda:	d11e      	bne.n	8008d1a <__sflush_r+0xea>
 8008cdc:	602f      	str	r7, [r5, #0]
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e022      	b.n	8008d28 <__sflush_r+0xf8>
 8008ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce6:	b21b      	sxth	r3, r3
 8008ce8:	e01b      	b.n	8008d22 <__sflush_r+0xf2>
 8008cea:	690f      	ldr	r7, [r1, #16]
 8008cec:	2f00      	cmp	r7, #0
 8008cee:	d0f6      	beq.n	8008cde <__sflush_r+0xae>
 8008cf0:	0793      	lsls	r3, r2, #30
 8008cf2:	680e      	ldr	r6, [r1, #0]
 8008cf4:	bf08      	it	eq
 8008cf6:	694b      	ldreq	r3, [r1, #20]
 8008cf8:	600f      	str	r7, [r1, #0]
 8008cfa:	bf18      	it	ne
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	eba6 0807 	sub.w	r8, r6, r7
 8008d02:	608b      	str	r3, [r1, #8]
 8008d04:	f1b8 0f00 	cmp.w	r8, #0
 8008d08:	dde9      	ble.n	8008cde <__sflush_r+0xae>
 8008d0a:	6a21      	ldr	r1, [r4, #32]
 8008d0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d0e:	4643      	mov	r3, r8
 8008d10:	463a      	mov	r2, r7
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b0      	blx	r6
 8008d16:	2800      	cmp	r0, #0
 8008d18:	dc08      	bgt.n	8008d2c <__sflush_r+0xfc>
 8008d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	4407      	add	r7, r0
 8008d2e:	eba8 0800 	sub.w	r8, r8, r0
 8008d32:	e7e7      	b.n	8008d04 <__sflush_r+0xd4>
 8008d34:	20400001 	.word	0x20400001

08008d38 <_fflush_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	b913      	cbnz	r3, 8008d48 <_fflush_r+0x10>
 8008d42:	2500      	movs	r5, #0
 8008d44:	4628      	mov	r0, r5
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	b118      	cbz	r0, 8008d52 <_fflush_r+0x1a>
 8008d4a:	6a03      	ldr	r3, [r0, #32]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <_fflush_r+0x1a>
 8008d4e:	f7fe fded 	bl	800792c <__sinit>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f3      	beq.n	8008d42 <_fflush_r+0xa>
 8008d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d5c:	07d0      	lsls	r0, r2, #31
 8008d5e:	d404      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d60:	0599      	lsls	r1, r3, #22
 8008d62:	d402      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d66:	f7fe fe4a 	bl	80079fe <__retarget_lock_acquire_recursive>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f7ff ff5f 	bl	8008c30 <__sflush_r>
 8008d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d74:	07da      	lsls	r2, r3, #31
 8008d76:	4605      	mov	r5, r0
 8008d78:	d4e4      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	059b      	lsls	r3, r3, #22
 8008d7e:	d4e1      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d82:	f7fe fe3d 	bl	8007a00 <__retarget_lock_release_recursive>
 8008d86:	e7dd      	b.n	8008d44 <_fflush_r+0xc>

08008d88 <__malloc_lock>:
 8008d88:	4801      	ldr	r0, [pc, #4]	@ (8008d90 <__malloc_lock+0x8>)
 8008d8a:	f7fe be38 	b.w	80079fe <__retarget_lock_acquire_recursive>
 8008d8e:	bf00      	nop
 8008d90:	200044f4 	.word	0x200044f4

08008d94 <__malloc_unlock>:
 8008d94:	4801      	ldr	r0, [pc, #4]	@ (8008d9c <__malloc_unlock+0x8>)
 8008d96:	f7fe be33 	b.w	8007a00 <__retarget_lock_release_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	200044f4 	.word	0x200044f4

08008da0 <_Balloc>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	69c6      	ldr	r6, [r0, #28]
 8008da4:	4604      	mov	r4, r0
 8008da6:	460d      	mov	r5, r1
 8008da8:	b976      	cbnz	r6, 8008dc8 <_Balloc+0x28>
 8008daa:	2010      	movs	r0, #16
 8008dac:	f7ff fe96 	bl	8008adc <malloc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	61e0      	str	r0, [r4, #28]
 8008db4:	b920      	cbnz	r0, 8008dc0 <_Balloc+0x20>
 8008db6:	4b18      	ldr	r3, [pc, #96]	@ (8008e18 <_Balloc+0x78>)
 8008db8:	4818      	ldr	r0, [pc, #96]	@ (8008e1c <_Balloc+0x7c>)
 8008dba:	216b      	movs	r1, #107	@ 0x6b
 8008dbc:	f000 fc4c 	bl	8009658 <__assert_func>
 8008dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc4:	6006      	str	r6, [r0, #0]
 8008dc6:	60c6      	str	r6, [r0, #12]
 8008dc8:	69e6      	ldr	r6, [r4, #28]
 8008dca:	68f3      	ldr	r3, [r6, #12]
 8008dcc:	b183      	cbz	r3, 8008df0 <_Balloc+0x50>
 8008dce:	69e3      	ldr	r3, [r4, #28]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dd6:	b9b8      	cbnz	r0, 8008e08 <_Balloc+0x68>
 8008dd8:	2101      	movs	r1, #1
 8008dda:	fa01 f605 	lsl.w	r6, r1, r5
 8008dde:	1d72      	adds	r2, r6, #5
 8008de0:	0092      	lsls	r2, r2, #2
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 fc56 	bl	8009694 <_calloc_r>
 8008de8:	b160      	cbz	r0, 8008e04 <_Balloc+0x64>
 8008dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dee:	e00e      	b.n	8008e0e <_Balloc+0x6e>
 8008df0:	2221      	movs	r2, #33	@ 0x21
 8008df2:	2104      	movs	r1, #4
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 fc4d 	bl	8009694 <_calloc_r>
 8008dfa:	69e3      	ldr	r3, [r4, #28]
 8008dfc:	60f0      	str	r0, [r6, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e4      	bne.n	8008dce <_Balloc+0x2e>
 8008e04:	2000      	movs	r0, #0
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	6802      	ldr	r2, [r0, #0]
 8008e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e14:	e7f7      	b.n	8008e06 <_Balloc+0x66>
 8008e16:	bf00      	nop
 8008e18:	08009d7d 	.word	0x08009d7d
 8008e1c:	08009e0e 	.word	0x08009e0e

08008e20 <_Bfree>:
 8008e20:	b570      	push	{r4, r5, r6, lr}
 8008e22:	69c6      	ldr	r6, [r0, #28]
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	b976      	cbnz	r6, 8008e48 <_Bfree+0x28>
 8008e2a:	2010      	movs	r0, #16
 8008e2c:	f7ff fe56 	bl	8008adc <malloc>
 8008e30:	4602      	mov	r2, r0
 8008e32:	61e8      	str	r0, [r5, #28]
 8008e34:	b920      	cbnz	r0, 8008e40 <_Bfree+0x20>
 8008e36:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <_Bfree+0x3c>)
 8008e38:	4809      	ldr	r0, [pc, #36]	@ (8008e60 <_Bfree+0x40>)
 8008e3a:	218f      	movs	r1, #143	@ 0x8f
 8008e3c:	f000 fc0c 	bl	8009658 <__assert_func>
 8008e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e44:	6006      	str	r6, [r0, #0]
 8008e46:	60c6      	str	r6, [r0, #12]
 8008e48:	b13c      	cbz	r4, 8008e5a <_Bfree+0x3a>
 8008e4a:	69eb      	ldr	r3, [r5, #28]
 8008e4c:	6862      	ldr	r2, [r4, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e54:	6021      	str	r1, [r4, #0]
 8008e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	08009d7d 	.word	0x08009d7d
 8008e60:	08009e0e 	.word	0x08009e0e

08008e64 <__multadd>:
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	690d      	ldr	r5, [r1, #16]
 8008e6a:	4607      	mov	r7, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	461e      	mov	r6, r3
 8008e70:	f101 0c14 	add.w	ip, r1, #20
 8008e74:	2000      	movs	r0, #0
 8008e76:	f8dc 3000 	ldr.w	r3, [ip]
 8008e7a:	b299      	uxth	r1, r3
 8008e7c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e80:	0c1e      	lsrs	r6, r3, #16
 8008e82:	0c0b      	lsrs	r3, r1, #16
 8008e84:	fb02 3306 	mla	r3, r2, r6, r3
 8008e88:	b289      	uxth	r1, r1
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e90:	4285      	cmp	r5, r0
 8008e92:	f84c 1b04 	str.w	r1, [ip], #4
 8008e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e9a:	dcec      	bgt.n	8008e76 <__multadd+0x12>
 8008e9c:	b30e      	cbz	r6, 8008ee2 <__multadd+0x7e>
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dc19      	bgt.n	8008ed8 <__multadd+0x74>
 8008ea4:	6861      	ldr	r1, [r4, #4]
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	3101      	adds	r1, #1
 8008eaa:	f7ff ff79 	bl	8008da0 <_Balloc>
 8008eae:	4680      	mov	r8, r0
 8008eb0:	b928      	cbnz	r0, 8008ebe <__multadd+0x5a>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <__multadd+0x84>)
 8008eb6:	480d      	ldr	r0, [pc, #52]	@ (8008eec <__multadd+0x88>)
 8008eb8:	21ba      	movs	r1, #186	@ 0xba
 8008eba:	f000 fbcd 	bl	8009658 <__assert_func>
 8008ebe:	6922      	ldr	r2, [r4, #16]
 8008ec0:	3202      	adds	r2, #2
 8008ec2:	f104 010c 	add.w	r1, r4, #12
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	300c      	adds	r0, #12
 8008eca:	f7fe fdfd 	bl	8007ac8 <memcpy>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ffa5 	bl	8008e20 <_Bfree>
 8008ed6:	4644      	mov	r4, r8
 8008ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008edc:	3501      	adds	r5, #1
 8008ede:	615e      	str	r6, [r3, #20]
 8008ee0:	6125      	str	r5, [r4, #16]
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	08009dec 	.word	0x08009dec
 8008eec:	08009e0e 	.word	0x08009e0e

08008ef0 <__hi0bits>:
 8008ef0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	bf36      	itet	cc
 8008ef8:	0403      	lslcc	r3, r0, #16
 8008efa:	2000      	movcs	r0, #0
 8008efc:	2010      	movcc	r0, #16
 8008efe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f02:	bf3c      	itt	cc
 8008f04:	021b      	lslcc	r3, r3, #8
 8008f06:	3008      	addcc	r0, #8
 8008f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f0c:	bf3c      	itt	cc
 8008f0e:	011b      	lslcc	r3, r3, #4
 8008f10:	3004      	addcc	r0, #4
 8008f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f16:	bf3c      	itt	cc
 8008f18:	009b      	lslcc	r3, r3, #2
 8008f1a:	3002      	addcc	r0, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	db05      	blt.n	8008f2c <__hi0bits+0x3c>
 8008f20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f24:	f100 0001 	add.w	r0, r0, #1
 8008f28:	bf08      	it	eq
 8008f2a:	2020      	moveq	r0, #32
 8008f2c:	4770      	bx	lr

08008f2e <__lo0bits>:
 8008f2e:	6803      	ldr	r3, [r0, #0]
 8008f30:	4602      	mov	r2, r0
 8008f32:	f013 0007 	ands.w	r0, r3, #7
 8008f36:	d00b      	beq.n	8008f50 <__lo0bits+0x22>
 8008f38:	07d9      	lsls	r1, r3, #31
 8008f3a:	d421      	bmi.n	8008f80 <__lo0bits+0x52>
 8008f3c:	0798      	lsls	r0, r3, #30
 8008f3e:	bf49      	itett	mi
 8008f40:	085b      	lsrmi	r3, r3, #1
 8008f42:	089b      	lsrpl	r3, r3, #2
 8008f44:	2001      	movmi	r0, #1
 8008f46:	6013      	strmi	r3, [r2, #0]
 8008f48:	bf5c      	itt	pl
 8008f4a:	6013      	strpl	r3, [r2, #0]
 8008f4c:	2002      	movpl	r0, #2
 8008f4e:	4770      	bx	lr
 8008f50:	b299      	uxth	r1, r3
 8008f52:	b909      	cbnz	r1, 8008f58 <__lo0bits+0x2a>
 8008f54:	0c1b      	lsrs	r3, r3, #16
 8008f56:	2010      	movs	r0, #16
 8008f58:	b2d9      	uxtb	r1, r3
 8008f5a:	b909      	cbnz	r1, 8008f60 <__lo0bits+0x32>
 8008f5c:	3008      	adds	r0, #8
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	0719      	lsls	r1, r3, #28
 8008f62:	bf04      	itt	eq
 8008f64:	091b      	lsreq	r3, r3, #4
 8008f66:	3004      	addeq	r0, #4
 8008f68:	0799      	lsls	r1, r3, #30
 8008f6a:	bf04      	itt	eq
 8008f6c:	089b      	lsreq	r3, r3, #2
 8008f6e:	3002      	addeq	r0, #2
 8008f70:	07d9      	lsls	r1, r3, #31
 8008f72:	d403      	bmi.n	8008f7c <__lo0bits+0x4e>
 8008f74:	085b      	lsrs	r3, r3, #1
 8008f76:	f100 0001 	add.w	r0, r0, #1
 8008f7a:	d003      	beq.n	8008f84 <__lo0bits+0x56>
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	4770      	bx	lr
 8008f80:	2000      	movs	r0, #0
 8008f82:	4770      	bx	lr
 8008f84:	2020      	movs	r0, #32
 8008f86:	4770      	bx	lr

08008f88 <__i2b>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	f7ff ff07 	bl	8008da0 <_Balloc>
 8008f92:	4602      	mov	r2, r0
 8008f94:	b928      	cbnz	r0, 8008fa2 <__i2b+0x1a>
 8008f96:	4b05      	ldr	r3, [pc, #20]	@ (8008fac <__i2b+0x24>)
 8008f98:	4805      	ldr	r0, [pc, #20]	@ (8008fb0 <__i2b+0x28>)
 8008f9a:	f240 1145 	movw	r1, #325	@ 0x145
 8008f9e:	f000 fb5b 	bl	8009658 <__assert_func>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	6144      	str	r4, [r0, #20]
 8008fa6:	6103      	str	r3, [r0, #16]
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	bf00      	nop
 8008fac:	08009dec 	.word	0x08009dec
 8008fb0:	08009e0e 	.word	0x08009e0e

08008fb4 <__multiply>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4617      	mov	r7, r2
 8008fba:	690a      	ldr	r2, [r1, #16]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	bfa8      	it	ge
 8008fc2:	463b      	movge	r3, r7
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	bfa4      	itt	ge
 8008fc8:	460f      	movge	r7, r1
 8008fca:	4699      	movge	r9, r3
 8008fcc:	693d      	ldr	r5, [r7, #16]
 8008fce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	eb05 060a 	add.w	r6, r5, sl
 8008fda:	42b3      	cmp	r3, r6
 8008fdc:	b085      	sub	sp, #20
 8008fde:	bfb8      	it	lt
 8008fe0:	3101      	addlt	r1, #1
 8008fe2:	f7ff fedd 	bl	8008da0 <_Balloc>
 8008fe6:	b930      	cbnz	r0, 8008ff6 <__multiply+0x42>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4b41      	ldr	r3, [pc, #260]	@ (80090f0 <__multiply+0x13c>)
 8008fec:	4841      	ldr	r0, [pc, #260]	@ (80090f4 <__multiply+0x140>)
 8008fee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ff2:	f000 fb31 	bl	8009658 <__assert_func>
 8008ff6:	f100 0414 	add.w	r4, r0, #20
 8008ffa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ffe:	4623      	mov	r3, r4
 8009000:	2200      	movs	r2, #0
 8009002:	4573      	cmp	r3, lr
 8009004:	d320      	bcc.n	8009048 <__multiply+0x94>
 8009006:	f107 0814 	add.w	r8, r7, #20
 800900a:	f109 0114 	add.w	r1, r9, #20
 800900e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009012:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009016:	9302      	str	r3, [sp, #8]
 8009018:	1beb      	subs	r3, r5, r7
 800901a:	3b15      	subs	r3, #21
 800901c:	f023 0303 	bic.w	r3, r3, #3
 8009020:	3304      	adds	r3, #4
 8009022:	3715      	adds	r7, #21
 8009024:	42bd      	cmp	r5, r7
 8009026:	bf38      	it	cc
 8009028:	2304      	movcc	r3, #4
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	9103      	str	r1, [sp, #12]
 8009030:	428b      	cmp	r3, r1
 8009032:	d80c      	bhi.n	800904e <__multiply+0x9a>
 8009034:	2e00      	cmp	r6, #0
 8009036:	dd03      	ble.n	8009040 <__multiply+0x8c>
 8009038:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800903c:	2b00      	cmp	r3, #0
 800903e:	d055      	beq.n	80090ec <__multiply+0x138>
 8009040:	6106      	str	r6, [r0, #16]
 8009042:	b005      	add	sp, #20
 8009044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009048:	f843 2b04 	str.w	r2, [r3], #4
 800904c:	e7d9      	b.n	8009002 <__multiply+0x4e>
 800904e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009052:	f1ba 0f00 	cmp.w	sl, #0
 8009056:	d01f      	beq.n	8009098 <__multiply+0xe4>
 8009058:	46c4      	mov	ip, r8
 800905a:	46a1      	mov	r9, r4
 800905c:	2700      	movs	r7, #0
 800905e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009062:	f8d9 3000 	ldr.w	r3, [r9]
 8009066:	fa1f fb82 	uxth.w	fp, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009070:	443b      	add	r3, r7
 8009072:	f8d9 7000 	ldr.w	r7, [r9]
 8009076:	0c12      	lsrs	r2, r2, #16
 8009078:	0c3f      	lsrs	r7, r7, #16
 800907a:	fb0a 7202 	mla	r2, sl, r2, r7
 800907e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009082:	b29b      	uxth	r3, r3
 8009084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009088:	4565      	cmp	r5, ip
 800908a:	f849 3b04 	str.w	r3, [r9], #4
 800908e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009092:	d8e4      	bhi.n	800905e <__multiply+0xaa>
 8009094:	9b01      	ldr	r3, [sp, #4]
 8009096:	50e7      	str	r7, [r4, r3]
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800909e:	3104      	adds	r1, #4
 80090a0:	f1b9 0f00 	cmp.w	r9, #0
 80090a4:	d020      	beq.n	80090e8 <__multiply+0x134>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	4647      	mov	r7, r8
 80090aa:	46a4      	mov	ip, r4
 80090ac:	f04f 0a00 	mov.w	sl, #0
 80090b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80090b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80090b8:	fb09 220b 	mla	r2, r9, fp, r2
 80090bc:	4452      	add	r2, sl
 80090be:	b29b      	uxth	r3, r3
 80090c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090c4:	f84c 3b04 	str.w	r3, [ip], #4
 80090c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80090cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80090d4:	fb09 330a 	mla	r3, r9, sl, r3
 80090d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80090dc:	42bd      	cmp	r5, r7
 80090de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090e2:	d8e5      	bhi.n	80090b0 <__multiply+0xfc>
 80090e4:	9a01      	ldr	r2, [sp, #4]
 80090e6:	50a3      	str	r3, [r4, r2]
 80090e8:	3404      	adds	r4, #4
 80090ea:	e79f      	b.n	800902c <__multiply+0x78>
 80090ec:	3e01      	subs	r6, #1
 80090ee:	e7a1      	b.n	8009034 <__multiply+0x80>
 80090f0:	08009dec 	.word	0x08009dec
 80090f4:	08009e0e 	.word	0x08009e0e

080090f8 <__pow5mult>:
 80090f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	4615      	mov	r5, r2
 80090fe:	f012 0203 	ands.w	r2, r2, #3
 8009102:	4607      	mov	r7, r0
 8009104:	460e      	mov	r6, r1
 8009106:	d007      	beq.n	8009118 <__pow5mult+0x20>
 8009108:	4c25      	ldr	r4, [pc, #148]	@ (80091a0 <__pow5mult+0xa8>)
 800910a:	3a01      	subs	r2, #1
 800910c:	2300      	movs	r3, #0
 800910e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009112:	f7ff fea7 	bl	8008e64 <__multadd>
 8009116:	4606      	mov	r6, r0
 8009118:	10ad      	asrs	r5, r5, #2
 800911a:	d03d      	beq.n	8009198 <__pow5mult+0xa0>
 800911c:	69fc      	ldr	r4, [r7, #28]
 800911e:	b97c      	cbnz	r4, 8009140 <__pow5mult+0x48>
 8009120:	2010      	movs	r0, #16
 8009122:	f7ff fcdb 	bl	8008adc <malloc>
 8009126:	4602      	mov	r2, r0
 8009128:	61f8      	str	r0, [r7, #28]
 800912a:	b928      	cbnz	r0, 8009138 <__pow5mult+0x40>
 800912c:	4b1d      	ldr	r3, [pc, #116]	@ (80091a4 <__pow5mult+0xac>)
 800912e:	481e      	ldr	r0, [pc, #120]	@ (80091a8 <__pow5mult+0xb0>)
 8009130:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009134:	f000 fa90 	bl	8009658 <__assert_func>
 8009138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800913c:	6004      	str	r4, [r0, #0]
 800913e:	60c4      	str	r4, [r0, #12]
 8009140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009148:	b94c      	cbnz	r4, 800915e <__pow5mult+0x66>
 800914a:	f240 2171 	movw	r1, #625	@ 0x271
 800914e:	4638      	mov	r0, r7
 8009150:	f7ff ff1a 	bl	8008f88 <__i2b>
 8009154:	2300      	movs	r3, #0
 8009156:	f8c8 0008 	str.w	r0, [r8, #8]
 800915a:	4604      	mov	r4, r0
 800915c:	6003      	str	r3, [r0, #0]
 800915e:	f04f 0900 	mov.w	r9, #0
 8009162:	07eb      	lsls	r3, r5, #31
 8009164:	d50a      	bpl.n	800917c <__pow5mult+0x84>
 8009166:	4631      	mov	r1, r6
 8009168:	4622      	mov	r2, r4
 800916a:	4638      	mov	r0, r7
 800916c:	f7ff ff22 	bl	8008fb4 <__multiply>
 8009170:	4631      	mov	r1, r6
 8009172:	4680      	mov	r8, r0
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff fe53 	bl	8008e20 <_Bfree>
 800917a:	4646      	mov	r6, r8
 800917c:	106d      	asrs	r5, r5, #1
 800917e:	d00b      	beq.n	8009198 <__pow5mult+0xa0>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	b938      	cbnz	r0, 8009194 <__pow5mult+0x9c>
 8009184:	4622      	mov	r2, r4
 8009186:	4621      	mov	r1, r4
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff ff13 	bl	8008fb4 <__multiply>
 800918e:	6020      	str	r0, [r4, #0]
 8009190:	f8c0 9000 	str.w	r9, [r0]
 8009194:	4604      	mov	r4, r0
 8009196:	e7e4      	b.n	8009162 <__pow5mult+0x6a>
 8009198:	4630      	mov	r0, r6
 800919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919e:	bf00      	nop
 80091a0:	08009eb0 	.word	0x08009eb0
 80091a4:	08009d7d 	.word	0x08009d7d
 80091a8:	08009e0e 	.word	0x08009e0e

080091ac <__lshift>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	460c      	mov	r4, r1
 80091b2:	6849      	ldr	r1, [r1, #4]
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	4607      	mov	r7, r0
 80091be:	4691      	mov	r9, r2
 80091c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091c4:	f108 0601 	add.w	r6, r8, #1
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	db0b      	blt.n	80091e4 <__lshift+0x38>
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff fde7 	bl	8008da0 <_Balloc>
 80091d2:	4605      	mov	r5, r0
 80091d4:	b948      	cbnz	r0, 80091ea <__lshift+0x3e>
 80091d6:	4602      	mov	r2, r0
 80091d8:	4b28      	ldr	r3, [pc, #160]	@ (800927c <__lshift+0xd0>)
 80091da:	4829      	ldr	r0, [pc, #164]	@ (8009280 <__lshift+0xd4>)
 80091dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091e0:	f000 fa3a 	bl	8009658 <__assert_func>
 80091e4:	3101      	adds	r1, #1
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	e7ee      	b.n	80091c8 <__lshift+0x1c>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f100 0114 	add.w	r1, r0, #20
 80091f0:	f100 0210 	add.w	r2, r0, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	4553      	cmp	r3, sl
 80091f8:	db33      	blt.n	8009262 <__lshift+0xb6>
 80091fa:	6920      	ldr	r0, [r4, #16]
 80091fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009200:	f104 0314 	add.w	r3, r4, #20
 8009204:	f019 091f 	ands.w	r9, r9, #31
 8009208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800920c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009210:	d02b      	beq.n	800926a <__lshift+0xbe>
 8009212:	f1c9 0e20 	rsb	lr, r9, #32
 8009216:	468a      	mov	sl, r1
 8009218:	2200      	movs	r2, #0
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	fa00 f009 	lsl.w	r0, r0, r9
 8009220:	4310      	orrs	r0, r2
 8009222:	f84a 0b04 	str.w	r0, [sl], #4
 8009226:	f853 2b04 	ldr.w	r2, [r3], #4
 800922a:	459c      	cmp	ip, r3
 800922c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009230:	d8f3      	bhi.n	800921a <__lshift+0x6e>
 8009232:	ebac 0304 	sub.w	r3, ip, r4
 8009236:	3b15      	subs	r3, #21
 8009238:	f023 0303 	bic.w	r3, r3, #3
 800923c:	3304      	adds	r3, #4
 800923e:	f104 0015 	add.w	r0, r4, #21
 8009242:	4560      	cmp	r0, ip
 8009244:	bf88      	it	hi
 8009246:	2304      	movhi	r3, #4
 8009248:	50ca      	str	r2, [r1, r3]
 800924a:	b10a      	cbz	r2, 8009250 <__lshift+0xa4>
 800924c:	f108 0602 	add.w	r6, r8, #2
 8009250:	3e01      	subs	r6, #1
 8009252:	4638      	mov	r0, r7
 8009254:	612e      	str	r6, [r5, #16]
 8009256:	4621      	mov	r1, r4
 8009258:	f7ff fde2 	bl	8008e20 <_Bfree>
 800925c:	4628      	mov	r0, r5
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	f842 0f04 	str.w	r0, [r2, #4]!
 8009266:	3301      	adds	r3, #1
 8009268:	e7c5      	b.n	80091f6 <__lshift+0x4a>
 800926a:	3904      	subs	r1, #4
 800926c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009270:	f841 2f04 	str.w	r2, [r1, #4]!
 8009274:	459c      	cmp	ip, r3
 8009276:	d8f9      	bhi.n	800926c <__lshift+0xc0>
 8009278:	e7ea      	b.n	8009250 <__lshift+0xa4>
 800927a:	bf00      	nop
 800927c:	08009dec 	.word	0x08009dec
 8009280:	08009e0e 	.word	0x08009e0e

08009284 <__mcmp>:
 8009284:	690a      	ldr	r2, [r1, #16]
 8009286:	4603      	mov	r3, r0
 8009288:	6900      	ldr	r0, [r0, #16]
 800928a:	1a80      	subs	r0, r0, r2
 800928c:	b530      	push	{r4, r5, lr}
 800928e:	d10e      	bne.n	80092ae <__mcmp+0x2a>
 8009290:	3314      	adds	r3, #20
 8009292:	3114      	adds	r1, #20
 8009294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800929c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092a4:	4295      	cmp	r5, r2
 80092a6:	d003      	beq.n	80092b0 <__mcmp+0x2c>
 80092a8:	d205      	bcs.n	80092b6 <__mcmp+0x32>
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092ae:	bd30      	pop	{r4, r5, pc}
 80092b0:	42a3      	cmp	r3, r4
 80092b2:	d3f3      	bcc.n	800929c <__mcmp+0x18>
 80092b4:	e7fb      	b.n	80092ae <__mcmp+0x2a>
 80092b6:	2001      	movs	r0, #1
 80092b8:	e7f9      	b.n	80092ae <__mcmp+0x2a>
	...

080092bc <__mdiff>:
 80092bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	4689      	mov	r9, r1
 80092c2:	4606      	mov	r6, r0
 80092c4:	4611      	mov	r1, r2
 80092c6:	4648      	mov	r0, r9
 80092c8:	4614      	mov	r4, r2
 80092ca:	f7ff ffdb 	bl	8009284 <__mcmp>
 80092ce:	1e05      	subs	r5, r0, #0
 80092d0:	d112      	bne.n	80092f8 <__mdiff+0x3c>
 80092d2:	4629      	mov	r1, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff fd63 	bl	8008da0 <_Balloc>
 80092da:	4602      	mov	r2, r0
 80092dc:	b928      	cbnz	r0, 80092ea <__mdiff+0x2e>
 80092de:	4b3f      	ldr	r3, [pc, #252]	@ (80093dc <__mdiff+0x120>)
 80092e0:	f240 2137 	movw	r1, #567	@ 0x237
 80092e4:	483e      	ldr	r0, [pc, #248]	@ (80093e0 <__mdiff+0x124>)
 80092e6:	f000 f9b7 	bl	8009658 <__assert_func>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092f0:	4610      	mov	r0, r2
 80092f2:	b003      	add	sp, #12
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	bfbc      	itt	lt
 80092fa:	464b      	movlt	r3, r9
 80092fc:	46a1      	movlt	r9, r4
 80092fe:	4630      	mov	r0, r6
 8009300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009304:	bfba      	itte	lt
 8009306:	461c      	movlt	r4, r3
 8009308:	2501      	movlt	r5, #1
 800930a:	2500      	movge	r5, #0
 800930c:	f7ff fd48 	bl	8008da0 <_Balloc>
 8009310:	4602      	mov	r2, r0
 8009312:	b918      	cbnz	r0, 800931c <__mdiff+0x60>
 8009314:	4b31      	ldr	r3, [pc, #196]	@ (80093dc <__mdiff+0x120>)
 8009316:	f240 2145 	movw	r1, #581	@ 0x245
 800931a:	e7e3      	b.n	80092e4 <__mdiff+0x28>
 800931c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009320:	6926      	ldr	r6, [r4, #16]
 8009322:	60c5      	str	r5, [r0, #12]
 8009324:	f109 0310 	add.w	r3, r9, #16
 8009328:	f109 0514 	add.w	r5, r9, #20
 800932c:	f104 0e14 	add.w	lr, r4, #20
 8009330:	f100 0b14 	add.w	fp, r0, #20
 8009334:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009338:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	46d9      	mov	r9, fp
 8009340:	f04f 0c00 	mov.w	ip, #0
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800934a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	fa1f f38a 	uxth.w	r3, sl
 8009354:	4619      	mov	r1, r3
 8009356:	b283      	uxth	r3, r0
 8009358:	1acb      	subs	r3, r1, r3
 800935a:	0c00      	lsrs	r0, r0, #16
 800935c:	4463      	add	r3, ip
 800935e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009362:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009366:	b29b      	uxth	r3, r3
 8009368:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800936c:	4576      	cmp	r6, lr
 800936e:	f849 3b04 	str.w	r3, [r9], #4
 8009372:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009376:	d8e5      	bhi.n	8009344 <__mdiff+0x88>
 8009378:	1b33      	subs	r3, r6, r4
 800937a:	3b15      	subs	r3, #21
 800937c:	f023 0303 	bic.w	r3, r3, #3
 8009380:	3415      	adds	r4, #21
 8009382:	3304      	adds	r3, #4
 8009384:	42a6      	cmp	r6, r4
 8009386:	bf38      	it	cc
 8009388:	2304      	movcc	r3, #4
 800938a:	441d      	add	r5, r3
 800938c:	445b      	add	r3, fp
 800938e:	461e      	mov	r6, r3
 8009390:	462c      	mov	r4, r5
 8009392:	4544      	cmp	r4, r8
 8009394:	d30e      	bcc.n	80093b4 <__mdiff+0xf8>
 8009396:	f108 0103 	add.w	r1, r8, #3
 800939a:	1b49      	subs	r1, r1, r5
 800939c:	f021 0103 	bic.w	r1, r1, #3
 80093a0:	3d03      	subs	r5, #3
 80093a2:	45a8      	cmp	r8, r5
 80093a4:	bf38      	it	cc
 80093a6:	2100      	movcc	r1, #0
 80093a8:	440b      	add	r3, r1
 80093aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093ae:	b191      	cbz	r1, 80093d6 <__mdiff+0x11a>
 80093b0:	6117      	str	r7, [r2, #16]
 80093b2:	e79d      	b.n	80092f0 <__mdiff+0x34>
 80093b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80093b8:	46e6      	mov	lr, ip
 80093ba:	0c08      	lsrs	r0, r1, #16
 80093bc:	fa1c fc81 	uxtah	ip, ip, r1
 80093c0:	4471      	add	r1, lr
 80093c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093c6:	b289      	uxth	r1, r1
 80093c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093cc:	f846 1b04 	str.w	r1, [r6], #4
 80093d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093d4:	e7dd      	b.n	8009392 <__mdiff+0xd6>
 80093d6:	3f01      	subs	r7, #1
 80093d8:	e7e7      	b.n	80093aa <__mdiff+0xee>
 80093da:	bf00      	nop
 80093dc:	08009dec 	.word	0x08009dec
 80093e0:	08009e0e 	.word	0x08009e0e

080093e4 <__d2b>:
 80093e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	460f      	mov	r7, r1
 80093ea:	2101      	movs	r1, #1
 80093ec:	ec59 8b10 	vmov	r8, r9, d0
 80093f0:	4616      	mov	r6, r2
 80093f2:	f7ff fcd5 	bl	8008da0 <_Balloc>
 80093f6:	4604      	mov	r4, r0
 80093f8:	b930      	cbnz	r0, 8009408 <__d2b+0x24>
 80093fa:	4602      	mov	r2, r0
 80093fc:	4b23      	ldr	r3, [pc, #140]	@ (800948c <__d2b+0xa8>)
 80093fe:	4824      	ldr	r0, [pc, #144]	@ (8009490 <__d2b+0xac>)
 8009400:	f240 310f 	movw	r1, #783	@ 0x30f
 8009404:	f000 f928 	bl	8009658 <__assert_func>
 8009408:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800940c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009410:	b10d      	cbz	r5, 8009416 <__d2b+0x32>
 8009412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	f1b8 0300 	subs.w	r3, r8, #0
 800941c:	d023      	beq.n	8009466 <__d2b+0x82>
 800941e:	4668      	mov	r0, sp
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	f7ff fd84 	bl	8008f2e <__lo0bits>
 8009426:	e9dd 1200 	ldrd	r1, r2, [sp]
 800942a:	b1d0      	cbz	r0, 8009462 <__d2b+0x7e>
 800942c:	f1c0 0320 	rsb	r3, r0, #32
 8009430:	fa02 f303 	lsl.w	r3, r2, r3
 8009434:	430b      	orrs	r3, r1
 8009436:	40c2      	lsrs	r2, r0
 8009438:	6163      	str	r3, [r4, #20]
 800943a:	9201      	str	r2, [sp, #4]
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	61a3      	str	r3, [r4, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	bf0c      	ite	eq
 8009444:	2201      	moveq	r2, #1
 8009446:	2202      	movne	r2, #2
 8009448:	6122      	str	r2, [r4, #16]
 800944a:	b1a5      	cbz	r5, 8009476 <__d2b+0x92>
 800944c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009450:	4405      	add	r5, r0
 8009452:	603d      	str	r5, [r7, #0]
 8009454:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	4620      	mov	r0, r4
 800945c:	b003      	add	sp, #12
 800945e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009462:	6161      	str	r1, [r4, #20]
 8009464:	e7ea      	b.n	800943c <__d2b+0x58>
 8009466:	a801      	add	r0, sp, #4
 8009468:	f7ff fd61 	bl	8008f2e <__lo0bits>
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	6163      	str	r3, [r4, #20]
 8009470:	3020      	adds	r0, #32
 8009472:	2201      	movs	r2, #1
 8009474:	e7e8      	b.n	8009448 <__d2b+0x64>
 8009476:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800947a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800947e:	6038      	str	r0, [r7, #0]
 8009480:	6918      	ldr	r0, [r3, #16]
 8009482:	f7ff fd35 	bl	8008ef0 <__hi0bits>
 8009486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800948a:	e7e5      	b.n	8009458 <__d2b+0x74>
 800948c:	08009dec 	.word	0x08009dec
 8009490:	08009e0e 	.word	0x08009e0e

08009494 <__sread>:
 8009494:	b510      	push	{r4, lr}
 8009496:	460c      	mov	r4, r1
 8009498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949c:	f000 f898 	bl	80095d0 <_read_r>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	bfab      	itete	ge
 80094a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094a6:	89a3      	ldrhlt	r3, [r4, #12]
 80094a8:	181b      	addge	r3, r3, r0
 80094aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094ae:	bfac      	ite	ge
 80094b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094b2:	81a3      	strhlt	r3, [r4, #12]
 80094b4:	bd10      	pop	{r4, pc}

080094b6 <__swrite>:
 80094b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ba:	461f      	mov	r7, r3
 80094bc:	898b      	ldrh	r3, [r1, #12]
 80094be:	05db      	lsls	r3, r3, #23
 80094c0:	4605      	mov	r5, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4616      	mov	r6, r2
 80094c6:	d505      	bpl.n	80094d4 <__swrite+0x1e>
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	2302      	movs	r3, #2
 80094ce:	2200      	movs	r2, #0
 80094d0:	f000 f86c 	bl	80095ac <_lseek_r>
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	4632      	mov	r2, r6
 80094e2:	463b      	mov	r3, r7
 80094e4:	4628      	mov	r0, r5
 80094e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ea:	f000 b893 	b.w	8009614 <_write_r>

080094ee <__sseek>:
 80094ee:	b510      	push	{r4, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f6:	f000 f859 	bl	80095ac <_lseek_r>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	bf15      	itete	ne
 8009500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800950a:	81a3      	strheq	r3, [r4, #12]
 800950c:	bf18      	it	ne
 800950e:	81a3      	strhne	r3, [r4, #12]
 8009510:	bd10      	pop	{r4, pc}

08009512 <__sclose>:
 8009512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009516:	f000 b88f 	b.w	8009638 <_close_r>

0800951a <_realloc_r>:
 800951a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951e:	4607      	mov	r7, r0
 8009520:	4614      	mov	r4, r2
 8009522:	460d      	mov	r5, r1
 8009524:	b921      	cbnz	r1, 8009530 <_realloc_r+0x16>
 8009526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800952a:	4611      	mov	r1, r2
 800952c:	f7ff bb00 	b.w	8008b30 <_malloc_r>
 8009530:	b92a      	cbnz	r2, 800953e <_realloc_r+0x24>
 8009532:	f7ff f931 	bl	8008798 <_free_r>
 8009536:	4625      	mov	r5, r4
 8009538:	4628      	mov	r0, r5
 800953a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953e:	f000 f8cf 	bl	80096e0 <_malloc_usable_size_r>
 8009542:	4284      	cmp	r4, r0
 8009544:	4606      	mov	r6, r0
 8009546:	d802      	bhi.n	800954e <_realloc_r+0x34>
 8009548:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800954c:	d8f4      	bhi.n	8009538 <_realloc_r+0x1e>
 800954e:	4621      	mov	r1, r4
 8009550:	4638      	mov	r0, r7
 8009552:	f7ff faed 	bl	8008b30 <_malloc_r>
 8009556:	4680      	mov	r8, r0
 8009558:	b908      	cbnz	r0, 800955e <_realloc_r+0x44>
 800955a:	4645      	mov	r5, r8
 800955c:	e7ec      	b.n	8009538 <_realloc_r+0x1e>
 800955e:	42b4      	cmp	r4, r6
 8009560:	4622      	mov	r2, r4
 8009562:	4629      	mov	r1, r5
 8009564:	bf28      	it	cs
 8009566:	4632      	movcs	r2, r6
 8009568:	f7fe faae 	bl	8007ac8 <memcpy>
 800956c:	4629      	mov	r1, r5
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff f912 	bl	8008798 <_free_r>
 8009574:	e7f1      	b.n	800955a <_realloc_r+0x40>

08009576 <memmove>:
 8009576:	4288      	cmp	r0, r1
 8009578:	b510      	push	{r4, lr}
 800957a:	eb01 0402 	add.w	r4, r1, r2
 800957e:	d902      	bls.n	8009586 <memmove+0x10>
 8009580:	4284      	cmp	r4, r0
 8009582:	4623      	mov	r3, r4
 8009584:	d807      	bhi.n	8009596 <memmove+0x20>
 8009586:	1e43      	subs	r3, r0, #1
 8009588:	42a1      	cmp	r1, r4
 800958a:	d008      	beq.n	800959e <memmove+0x28>
 800958c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009590:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009594:	e7f8      	b.n	8009588 <memmove+0x12>
 8009596:	4402      	add	r2, r0
 8009598:	4601      	mov	r1, r0
 800959a:	428a      	cmp	r2, r1
 800959c:	d100      	bne.n	80095a0 <memmove+0x2a>
 800959e:	bd10      	pop	{r4, pc}
 80095a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095a8:	e7f7      	b.n	800959a <memmove+0x24>
	...

080095ac <_lseek_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d07      	ldr	r5, [pc, #28]	@ (80095cc <_lseek_r+0x20>)
 80095b0:	4604      	mov	r4, r0
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	2200      	movs	r2, #0
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f8 fb49 	bl	8001c52 <_lseek>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_lseek_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_lseek_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	200044f8 	.word	0x200044f8

080095d0 <_read_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	@ (80095f0 <_read_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f8 fad7 	bl	8001b92 <_read>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_read_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_read_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	200044f8 	.word	0x200044f8

080095f4 <_sbrk_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d06      	ldr	r5, [pc, #24]	@ (8009610 <_sbrk_r+0x1c>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	f7f8 fb34 	bl	8001c6c <_sbrk>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_sbrk_r+0x1a>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	b103      	cbz	r3, 800960e <_sbrk_r+0x1a>
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	200044f8 	.word	0x200044f8

08009614 <_write_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d07      	ldr	r5, [pc, #28]	@ (8009634 <_write_r+0x20>)
 8009618:	4604      	mov	r4, r0
 800961a:	4608      	mov	r0, r1
 800961c:	4611      	mov	r1, r2
 800961e:	2200      	movs	r2, #0
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	f7f8 fad2 	bl	8001bcc <_write>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d102      	bne.n	8009632 <_write_r+0x1e>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	b103      	cbz	r3, 8009632 <_write_r+0x1e>
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	200044f8 	.word	0x200044f8

08009638 <_close_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d06      	ldr	r5, [pc, #24]	@ (8009654 <_close_r+0x1c>)
 800963c:	2300      	movs	r3, #0
 800963e:	4604      	mov	r4, r0
 8009640:	4608      	mov	r0, r1
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	f7f8 fade 	bl	8001c04 <_close>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d102      	bne.n	8009652 <_close_r+0x1a>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	b103      	cbz	r3, 8009652 <_close_r+0x1a>
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	bd38      	pop	{r3, r4, r5, pc}
 8009654:	200044f8 	.word	0x200044f8

08009658 <__assert_func>:
 8009658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800965a:	4614      	mov	r4, r2
 800965c:	461a      	mov	r2, r3
 800965e:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <__assert_func+0x2c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4605      	mov	r5, r0
 8009664:	68d8      	ldr	r0, [r3, #12]
 8009666:	b14c      	cbz	r4, 800967c <__assert_func+0x24>
 8009668:	4b07      	ldr	r3, [pc, #28]	@ (8009688 <__assert_func+0x30>)
 800966a:	9100      	str	r1, [sp, #0]
 800966c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009670:	4906      	ldr	r1, [pc, #24]	@ (800968c <__assert_func+0x34>)
 8009672:	462b      	mov	r3, r5
 8009674:	f000 f83c 	bl	80096f0 <fiprintf>
 8009678:	f000 f859 	bl	800972e <abort>
 800967c:	4b04      	ldr	r3, [pc, #16]	@ (8009690 <__assert_func+0x38>)
 800967e:	461c      	mov	r4, r3
 8009680:	e7f3      	b.n	800966a <__assert_func+0x12>
 8009682:	bf00      	nop
 8009684:	2000001c 	.word	0x2000001c
 8009688:	08009e71 	.word	0x08009e71
 800968c:	08009e7e 	.word	0x08009e7e
 8009690:	08009eac 	.word	0x08009eac

08009694 <_calloc_r>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	fba1 5402 	umull	r5, r4, r1, r2
 800969a:	b934      	cbnz	r4, 80096aa <_calloc_r+0x16>
 800969c:	4629      	mov	r1, r5
 800969e:	f7ff fa47 	bl	8008b30 <_malloc_r>
 80096a2:	4606      	mov	r6, r0
 80096a4:	b928      	cbnz	r0, 80096b2 <_calloc_r+0x1e>
 80096a6:	4630      	mov	r0, r6
 80096a8:	bd70      	pop	{r4, r5, r6, pc}
 80096aa:	220c      	movs	r2, #12
 80096ac:	6002      	str	r2, [r0, #0]
 80096ae:	2600      	movs	r6, #0
 80096b0:	e7f9      	b.n	80096a6 <_calloc_r+0x12>
 80096b2:	462a      	mov	r2, r5
 80096b4:	4621      	mov	r1, r4
 80096b6:	f7fe f96f 	bl	8007998 <memset>
 80096ba:	e7f4      	b.n	80096a6 <_calloc_r+0x12>

080096bc <__ascii_mbtowc>:
 80096bc:	b082      	sub	sp, #8
 80096be:	b901      	cbnz	r1, 80096c2 <__ascii_mbtowc+0x6>
 80096c0:	a901      	add	r1, sp, #4
 80096c2:	b142      	cbz	r2, 80096d6 <__ascii_mbtowc+0x1a>
 80096c4:	b14b      	cbz	r3, 80096da <__ascii_mbtowc+0x1e>
 80096c6:	7813      	ldrb	r3, [r2, #0]
 80096c8:	600b      	str	r3, [r1, #0]
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	1e10      	subs	r0, r2, #0
 80096ce:	bf18      	it	ne
 80096d0:	2001      	movne	r0, #1
 80096d2:	b002      	add	sp, #8
 80096d4:	4770      	bx	lr
 80096d6:	4610      	mov	r0, r2
 80096d8:	e7fb      	b.n	80096d2 <__ascii_mbtowc+0x16>
 80096da:	f06f 0001 	mvn.w	r0, #1
 80096de:	e7f8      	b.n	80096d2 <__ascii_mbtowc+0x16>

080096e0 <_malloc_usable_size_r>:
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f18      	subs	r0, r3, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfbc      	itt	lt
 80096ea:	580b      	ldrlt	r3, [r1, r0]
 80096ec:	18c0      	addlt	r0, r0, r3
 80096ee:	4770      	bx	lr

080096f0 <fiprintf>:
 80096f0:	b40e      	push	{r1, r2, r3}
 80096f2:	b503      	push	{r0, r1, lr}
 80096f4:	4601      	mov	r1, r0
 80096f6:	ab03      	add	r3, sp, #12
 80096f8:	4805      	ldr	r0, [pc, #20]	@ (8009710 <fiprintf+0x20>)
 80096fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fe:	6800      	ldr	r0, [r0, #0]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	f000 f845 	bl	8009790 <_vfiprintf_r>
 8009706:	b002      	add	sp, #8
 8009708:	f85d eb04 	ldr.w	lr, [sp], #4
 800970c:	b003      	add	sp, #12
 800970e:	4770      	bx	lr
 8009710:	2000001c 	.word	0x2000001c

08009714 <__ascii_wctomb>:
 8009714:	4603      	mov	r3, r0
 8009716:	4608      	mov	r0, r1
 8009718:	b141      	cbz	r1, 800972c <__ascii_wctomb+0x18>
 800971a:	2aff      	cmp	r2, #255	@ 0xff
 800971c:	d904      	bls.n	8009728 <__ascii_wctomb+0x14>
 800971e:	228a      	movs	r2, #138	@ 0x8a
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009726:	4770      	bx	lr
 8009728:	700a      	strb	r2, [r1, #0]
 800972a:	2001      	movs	r0, #1
 800972c:	4770      	bx	lr

0800972e <abort>:
 800972e:	b508      	push	{r3, lr}
 8009730:	2006      	movs	r0, #6
 8009732:	f000 fa63 	bl	8009bfc <raise>
 8009736:	2001      	movs	r0, #1
 8009738:	f7f8 fa20 	bl	8001b7c <_exit>

0800973c <__sfputc_r>:
 800973c:	6893      	ldr	r3, [r2, #8]
 800973e:	3b01      	subs	r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	b410      	push	{r4}
 8009744:	6093      	str	r3, [r2, #8]
 8009746:	da08      	bge.n	800975a <__sfputc_r+0x1e>
 8009748:	6994      	ldr	r4, [r2, #24]
 800974a:	42a3      	cmp	r3, r4
 800974c:	db01      	blt.n	8009752 <__sfputc_r+0x16>
 800974e:	290a      	cmp	r1, #10
 8009750:	d103      	bne.n	800975a <__sfputc_r+0x1e>
 8009752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009756:	f000 b933 	b.w	80099c0 <__swbuf_r>
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	1c58      	adds	r0, r3, #1
 800975e:	6010      	str	r0, [r2, #0]
 8009760:	7019      	strb	r1, [r3, #0]
 8009762:	4608      	mov	r0, r1
 8009764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009768:	4770      	bx	lr

0800976a <__sfputs_r>:
 800976a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976c:	4606      	mov	r6, r0
 800976e:	460f      	mov	r7, r1
 8009770:	4614      	mov	r4, r2
 8009772:	18d5      	adds	r5, r2, r3
 8009774:	42ac      	cmp	r4, r5
 8009776:	d101      	bne.n	800977c <__sfputs_r+0x12>
 8009778:	2000      	movs	r0, #0
 800977a:	e007      	b.n	800978c <__sfputs_r+0x22>
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	463a      	mov	r2, r7
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ffda 	bl	800973c <__sfputc_r>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d1f3      	bne.n	8009774 <__sfputs_r+0xa>
 800978c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009790 <_vfiprintf_r>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	460d      	mov	r5, r1
 8009796:	b09d      	sub	sp, #116	@ 0x74
 8009798:	4614      	mov	r4, r2
 800979a:	4698      	mov	r8, r3
 800979c:	4606      	mov	r6, r0
 800979e:	b118      	cbz	r0, 80097a8 <_vfiprintf_r+0x18>
 80097a0:	6a03      	ldr	r3, [r0, #32]
 80097a2:	b90b      	cbnz	r3, 80097a8 <_vfiprintf_r+0x18>
 80097a4:	f7fe f8c2 	bl	800792c <__sinit>
 80097a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097aa:	07d9      	lsls	r1, r3, #31
 80097ac:	d405      	bmi.n	80097ba <_vfiprintf_r+0x2a>
 80097ae:	89ab      	ldrh	r3, [r5, #12]
 80097b0:	059a      	lsls	r2, r3, #22
 80097b2:	d402      	bmi.n	80097ba <_vfiprintf_r+0x2a>
 80097b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097b6:	f7fe f922 	bl	80079fe <__retarget_lock_acquire_recursive>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	071b      	lsls	r3, r3, #28
 80097be:	d501      	bpl.n	80097c4 <_vfiprintf_r+0x34>
 80097c0:	692b      	ldr	r3, [r5, #16]
 80097c2:	b99b      	cbnz	r3, 80097ec <_vfiprintf_r+0x5c>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 f938 	bl	8009a3c <__swsetup_r>
 80097cc:	b170      	cbz	r0, 80097ec <_vfiprintf_r+0x5c>
 80097ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097d0:	07dc      	lsls	r4, r3, #31
 80097d2:	d504      	bpl.n	80097de <_vfiprintf_r+0x4e>
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097d8:	b01d      	add	sp, #116	@ 0x74
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	0598      	lsls	r0, r3, #22
 80097e2:	d4f7      	bmi.n	80097d4 <_vfiprintf_r+0x44>
 80097e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097e6:	f7fe f90b 	bl	8007a00 <__retarget_lock_release_recursive>
 80097ea:	e7f3      	b.n	80097d4 <_vfiprintf_r+0x44>
 80097ec:	2300      	movs	r3, #0
 80097ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f0:	2320      	movs	r3, #32
 80097f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097fa:	2330      	movs	r3, #48	@ 0x30
 80097fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099ac <_vfiprintf_r+0x21c>
 8009800:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009804:	f04f 0901 	mov.w	r9, #1
 8009808:	4623      	mov	r3, r4
 800980a:	469a      	mov	sl, r3
 800980c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009810:	b10a      	cbz	r2, 8009816 <_vfiprintf_r+0x86>
 8009812:	2a25      	cmp	r2, #37	@ 0x25
 8009814:	d1f9      	bne.n	800980a <_vfiprintf_r+0x7a>
 8009816:	ebba 0b04 	subs.w	fp, sl, r4
 800981a:	d00b      	beq.n	8009834 <_vfiprintf_r+0xa4>
 800981c:	465b      	mov	r3, fp
 800981e:	4622      	mov	r2, r4
 8009820:	4629      	mov	r1, r5
 8009822:	4630      	mov	r0, r6
 8009824:	f7ff ffa1 	bl	800976a <__sfputs_r>
 8009828:	3001      	adds	r0, #1
 800982a:	f000 80a7 	beq.w	800997c <_vfiprintf_r+0x1ec>
 800982e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009830:	445a      	add	r2, fp
 8009832:	9209      	str	r2, [sp, #36]	@ 0x24
 8009834:	f89a 3000 	ldrb.w	r3, [sl]
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 809f 	beq.w	800997c <_vfiprintf_r+0x1ec>
 800983e:	2300      	movs	r3, #0
 8009840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009848:	f10a 0a01 	add.w	sl, sl, #1
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	9307      	str	r3, [sp, #28]
 8009850:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009854:	931a      	str	r3, [sp, #104]	@ 0x68
 8009856:	4654      	mov	r4, sl
 8009858:	2205      	movs	r2, #5
 800985a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985e:	4853      	ldr	r0, [pc, #332]	@ (80099ac <_vfiprintf_r+0x21c>)
 8009860:	f7f6 fcd6 	bl	8000210 <memchr>
 8009864:	9a04      	ldr	r2, [sp, #16]
 8009866:	b9d8      	cbnz	r0, 80098a0 <_vfiprintf_r+0x110>
 8009868:	06d1      	lsls	r1, r2, #27
 800986a:	bf44      	itt	mi
 800986c:	2320      	movmi	r3, #32
 800986e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009872:	0713      	lsls	r3, r2, #28
 8009874:	bf44      	itt	mi
 8009876:	232b      	movmi	r3, #43	@ 0x2b
 8009878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800987c:	f89a 3000 	ldrb.w	r3, [sl]
 8009880:	2b2a      	cmp	r3, #42	@ 0x2a
 8009882:	d015      	beq.n	80098b0 <_vfiprintf_r+0x120>
 8009884:	9a07      	ldr	r2, [sp, #28]
 8009886:	4654      	mov	r4, sl
 8009888:	2000      	movs	r0, #0
 800988a:	f04f 0c0a 	mov.w	ip, #10
 800988e:	4621      	mov	r1, r4
 8009890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009894:	3b30      	subs	r3, #48	@ 0x30
 8009896:	2b09      	cmp	r3, #9
 8009898:	d94b      	bls.n	8009932 <_vfiprintf_r+0x1a2>
 800989a:	b1b0      	cbz	r0, 80098ca <_vfiprintf_r+0x13a>
 800989c:	9207      	str	r2, [sp, #28]
 800989e:	e014      	b.n	80098ca <_vfiprintf_r+0x13a>
 80098a0:	eba0 0308 	sub.w	r3, r0, r8
 80098a4:	fa09 f303 	lsl.w	r3, r9, r3
 80098a8:	4313      	orrs	r3, r2
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	46a2      	mov	sl, r4
 80098ae:	e7d2      	b.n	8009856 <_vfiprintf_r+0xc6>
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	1d19      	adds	r1, r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	9103      	str	r1, [sp, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bfbb      	ittet	lt
 80098bc:	425b      	neglt	r3, r3
 80098be:	f042 0202 	orrlt.w	r2, r2, #2
 80098c2:	9307      	strge	r3, [sp, #28]
 80098c4:	9307      	strlt	r3, [sp, #28]
 80098c6:	bfb8      	it	lt
 80098c8:	9204      	strlt	r2, [sp, #16]
 80098ca:	7823      	ldrb	r3, [r4, #0]
 80098cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80098ce:	d10a      	bne.n	80098e6 <_vfiprintf_r+0x156>
 80098d0:	7863      	ldrb	r3, [r4, #1]
 80098d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d4:	d132      	bne.n	800993c <_vfiprintf_r+0x1ac>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	1d1a      	adds	r2, r3, #4
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	9203      	str	r2, [sp, #12]
 80098de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098e2:	3402      	adds	r4, #2
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099bc <_vfiprintf_r+0x22c>
 80098ea:	7821      	ldrb	r1, [r4, #0]
 80098ec:	2203      	movs	r2, #3
 80098ee:	4650      	mov	r0, sl
 80098f0:	f7f6 fc8e 	bl	8000210 <memchr>
 80098f4:	b138      	cbz	r0, 8009906 <_vfiprintf_r+0x176>
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	eba0 000a 	sub.w	r0, r0, sl
 80098fc:	2240      	movs	r2, #64	@ 0x40
 80098fe:	4082      	lsls	r2, r0
 8009900:	4313      	orrs	r3, r2
 8009902:	3401      	adds	r4, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990a:	4829      	ldr	r0, [pc, #164]	@ (80099b0 <_vfiprintf_r+0x220>)
 800990c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009910:	2206      	movs	r2, #6
 8009912:	f7f6 fc7d 	bl	8000210 <memchr>
 8009916:	2800      	cmp	r0, #0
 8009918:	d03f      	beq.n	800999a <_vfiprintf_r+0x20a>
 800991a:	4b26      	ldr	r3, [pc, #152]	@ (80099b4 <_vfiprintf_r+0x224>)
 800991c:	bb1b      	cbnz	r3, 8009966 <_vfiprintf_r+0x1d6>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	3307      	adds	r3, #7
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	3308      	adds	r3, #8
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992c:	443b      	add	r3, r7
 800992e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009930:	e76a      	b.n	8009808 <_vfiprintf_r+0x78>
 8009932:	fb0c 3202 	mla	r2, ip, r2, r3
 8009936:	460c      	mov	r4, r1
 8009938:	2001      	movs	r0, #1
 800993a:	e7a8      	b.n	800988e <_vfiprintf_r+0xfe>
 800993c:	2300      	movs	r3, #0
 800993e:	3401      	adds	r4, #1
 8009940:	9305      	str	r3, [sp, #20]
 8009942:	4619      	mov	r1, r3
 8009944:	f04f 0c0a 	mov.w	ip, #10
 8009948:	4620      	mov	r0, r4
 800994a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800994e:	3a30      	subs	r2, #48	@ 0x30
 8009950:	2a09      	cmp	r2, #9
 8009952:	d903      	bls.n	800995c <_vfiprintf_r+0x1cc>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0c6      	beq.n	80098e6 <_vfiprintf_r+0x156>
 8009958:	9105      	str	r1, [sp, #20]
 800995a:	e7c4      	b.n	80098e6 <_vfiprintf_r+0x156>
 800995c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009960:	4604      	mov	r4, r0
 8009962:	2301      	movs	r3, #1
 8009964:	e7f0      	b.n	8009948 <_vfiprintf_r+0x1b8>
 8009966:	ab03      	add	r3, sp, #12
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	462a      	mov	r2, r5
 800996c:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <_vfiprintf_r+0x228>)
 800996e:	a904      	add	r1, sp, #16
 8009970:	4630      	mov	r0, r6
 8009972:	f7fd fb77 	bl	8007064 <_printf_float>
 8009976:	4607      	mov	r7, r0
 8009978:	1c78      	adds	r0, r7, #1
 800997a:	d1d6      	bne.n	800992a <_vfiprintf_r+0x19a>
 800997c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800997e:	07d9      	lsls	r1, r3, #31
 8009980:	d405      	bmi.n	800998e <_vfiprintf_r+0x1fe>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d402      	bmi.n	800998e <_vfiprintf_r+0x1fe>
 8009988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998a:	f7fe f839 	bl	8007a00 <__retarget_lock_release_recursive>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	065b      	lsls	r3, r3, #25
 8009992:	f53f af1f 	bmi.w	80097d4 <_vfiprintf_r+0x44>
 8009996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009998:	e71e      	b.n	80097d8 <_vfiprintf_r+0x48>
 800999a:	ab03      	add	r3, sp, #12
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	462a      	mov	r2, r5
 80099a0:	4b05      	ldr	r3, [pc, #20]	@ (80099b8 <_vfiprintf_r+0x228>)
 80099a2:	a904      	add	r1, sp, #16
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7fd fdf5 	bl	8007594 <_printf_i>
 80099aa:	e7e4      	b.n	8009976 <_vfiprintf_r+0x1e6>
 80099ac:	08009dfd 	.word	0x08009dfd
 80099b0:	08009e07 	.word	0x08009e07
 80099b4:	08007065 	.word	0x08007065
 80099b8:	0800976b 	.word	0x0800976b
 80099bc:	08009e03 	.word	0x08009e03

080099c0 <__swbuf_r>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	460e      	mov	r6, r1
 80099c4:	4614      	mov	r4, r2
 80099c6:	4605      	mov	r5, r0
 80099c8:	b118      	cbz	r0, 80099d2 <__swbuf_r+0x12>
 80099ca:	6a03      	ldr	r3, [r0, #32]
 80099cc:	b90b      	cbnz	r3, 80099d2 <__swbuf_r+0x12>
 80099ce:	f7fd ffad 	bl	800792c <__sinit>
 80099d2:	69a3      	ldr	r3, [r4, #24]
 80099d4:	60a3      	str	r3, [r4, #8]
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	071a      	lsls	r2, r3, #28
 80099da:	d501      	bpl.n	80099e0 <__swbuf_r+0x20>
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	b943      	cbnz	r3, 80099f2 <__swbuf_r+0x32>
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f82a 	bl	8009a3c <__swsetup_r>
 80099e8:	b118      	cbz	r0, 80099f2 <__swbuf_r+0x32>
 80099ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80099ee:	4638      	mov	r0, r7
 80099f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	6922      	ldr	r2, [r4, #16]
 80099f6:	1a98      	subs	r0, r3, r2
 80099f8:	6963      	ldr	r3, [r4, #20]
 80099fa:	b2f6      	uxtb	r6, r6
 80099fc:	4283      	cmp	r3, r0
 80099fe:	4637      	mov	r7, r6
 8009a00:	dc05      	bgt.n	8009a0e <__swbuf_r+0x4e>
 8009a02:	4621      	mov	r1, r4
 8009a04:	4628      	mov	r0, r5
 8009a06:	f7ff f997 	bl	8008d38 <_fflush_r>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d1ed      	bne.n	80099ea <__swbuf_r+0x2a>
 8009a0e:	68a3      	ldr	r3, [r4, #8]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	60a3      	str	r3, [r4, #8]
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	6022      	str	r2, [r4, #0]
 8009a1a:	701e      	strb	r6, [r3, #0]
 8009a1c:	6962      	ldr	r2, [r4, #20]
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d004      	beq.n	8009a2e <__swbuf_r+0x6e>
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	07db      	lsls	r3, r3, #31
 8009a28:	d5e1      	bpl.n	80099ee <__swbuf_r+0x2e>
 8009a2a:	2e0a      	cmp	r6, #10
 8009a2c:	d1df      	bne.n	80099ee <__swbuf_r+0x2e>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff f981 	bl	8008d38 <_fflush_r>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d0d9      	beq.n	80099ee <__swbuf_r+0x2e>
 8009a3a:	e7d6      	b.n	80099ea <__swbuf_r+0x2a>

08009a3c <__swsetup_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ae4 <__swsetup_r+0xa8>)
 8009a40:	4605      	mov	r5, r0
 8009a42:	6818      	ldr	r0, [r3, #0]
 8009a44:	460c      	mov	r4, r1
 8009a46:	b118      	cbz	r0, 8009a50 <__swsetup_r+0x14>
 8009a48:	6a03      	ldr	r3, [r0, #32]
 8009a4a:	b90b      	cbnz	r3, 8009a50 <__swsetup_r+0x14>
 8009a4c:	f7fd ff6e 	bl	800792c <__sinit>
 8009a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a54:	0719      	lsls	r1, r3, #28
 8009a56:	d422      	bmi.n	8009a9e <__swsetup_r+0x62>
 8009a58:	06da      	lsls	r2, r3, #27
 8009a5a:	d407      	bmi.n	8009a6c <__swsetup_r+0x30>
 8009a5c:	2209      	movs	r2, #9
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a6a:	e033      	b.n	8009ad4 <__swsetup_r+0x98>
 8009a6c:	0758      	lsls	r0, r3, #29
 8009a6e:	d512      	bpl.n	8009a96 <__swsetup_r+0x5a>
 8009a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a72:	b141      	cbz	r1, 8009a86 <__swsetup_r+0x4a>
 8009a74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	d002      	beq.n	8009a82 <__swsetup_r+0x46>
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f7fe fe8b 	bl	8008798 <_free_r>
 8009a82:	2300      	movs	r3, #0
 8009a84:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	6063      	str	r3, [r4, #4]
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	f043 0308 	orr.w	r3, r3, #8
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	6923      	ldr	r3, [r4, #16]
 8009aa0:	b94b      	cbnz	r3, 8009ab6 <__swsetup_r+0x7a>
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aac:	d003      	beq.n	8009ab6 <__swsetup_r+0x7a>
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	f000 f83f 	bl	8009b34 <__smakebuf_r>
 8009ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aba:	f013 0201 	ands.w	r2, r3, #1
 8009abe:	d00a      	beq.n	8009ad6 <__swsetup_r+0x9a>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	60a2      	str	r2, [r4, #8]
 8009ac4:	6962      	ldr	r2, [r4, #20]
 8009ac6:	4252      	negs	r2, r2
 8009ac8:	61a2      	str	r2, [r4, #24]
 8009aca:	6922      	ldr	r2, [r4, #16]
 8009acc:	b942      	cbnz	r2, 8009ae0 <__swsetup_r+0xa4>
 8009ace:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ad2:	d1c5      	bne.n	8009a60 <__swsetup_r+0x24>
 8009ad4:	bd38      	pop	{r3, r4, r5, pc}
 8009ad6:	0799      	lsls	r1, r3, #30
 8009ad8:	bf58      	it	pl
 8009ada:	6962      	ldrpl	r2, [r4, #20]
 8009adc:	60a2      	str	r2, [r4, #8]
 8009ade:	e7f4      	b.n	8009aca <__swsetup_r+0x8e>
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7f7      	b.n	8009ad4 <__swsetup_r+0x98>
 8009ae4:	2000001c 	.word	0x2000001c

08009ae8 <__swhatbuf_r>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	460c      	mov	r4, r1
 8009aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af0:	2900      	cmp	r1, #0
 8009af2:	b096      	sub	sp, #88	@ 0x58
 8009af4:	4615      	mov	r5, r2
 8009af6:	461e      	mov	r6, r3
 8009af8:	da0d      	bge.n	8009b16 <__swhatbuf_r+0x2e>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b00:	f04f 0100 	mov.w	r1, #0
 8009b04:	bf14      	ite	ne
 8009b06:	2340      	movne	r3, #64	@ 0x40
 8009b08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	6031      	str	r1, [r6, #0]
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	b016      	add	sp, #88	@ 0x58
 8009b14:	bd70      	pop	{r4, r5, r6, pc}
 8009b16:	466a      	mov	r2, sp
 8009b18:	f000 f89c 	bl	8009c54 <_fstat_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	dbec      	blt.n	8009afa <__swhatbuf_r+0x12>
 8009b20:	9901      	ldr	r1, [sp, #4]
 8009b22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b2a:	4259      	negs	r1, r3
 8009b2c:	4159      	adcs	r1, r3
 8009b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b32:	e7eb      	b.n	8009b0c <__swhatbuf_r+0x24>

08009b34 <__smakebuf_r>:
 8009b34:	898b      	ldrh	r3, [r1, #12]
 8009b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b38:	079d      	lsls	r5, r3, #30
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	d507      	bpl.n	8009b50 <__smakebuf_r+0x1c>
 8009b40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	2301      	movs	r3, #1
 8009b4a:	6163      	str	r3, [r4, #20]
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b50:	ab01      	add	r3, sp, #4
 8009b52:	466a      	mov	r2, sp
 8009b54:	f7ff ffc8 	bl	8009ae8 <__swhatbuf_r>
 8009b58:	9f00      	ldr	r7, [sp, #0]
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7fe ffe6 	bl	8008b30 <_malloc_r>
 8009b64:	b948      	cbnz	r0, 8009b7a <__smakebuf_r+0x46>
 8009b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6a:	059a      	lsls	r2, r3, #22
 8009b6c:	d4ee      	bmi.n	8009b4c <__smakebuf_r+0x18>
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	f043 0302 	orr.w	r3, r3, #2
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	e7e2      	b.n	8009b40 <__smakebuf_r+0xc>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	6020      	str	r0, [r4, #0]
 8009b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b82:	81a3      	strh	r3, [r4, #12]
 8009b84:	9b01      	ldr	r3, [sp, #4]
 8009b86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b8a:	b15b      	cbz	r3, 8009ba4 <__smakebuf_r+0x70>
 8009b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b90:	4630      	mov	r0, r6
 8009b92:	f000 f83b 	bl	8009c0c <_isatty_r>
 8009b96:	b128      	cbz	r0, 8009ba4 <__smakebuf_r+0x70>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f023 0303 	bic.w	r3, r3, #3
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	431d      	orrs	r5, r3
 8009ba8:	81a5      	strh	r5, [r4, #12]
 8009baa:	e7cf      	b.n	8009b4c <__smakebuf_r+0x18>

08009bac <_raise_r>:
 8009bac:	291f      	cmp	r1, #31
 8009bae:	b538      	push	{r3, r4, r5, lr}
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	d904      	bls.n	8009bc0 <_raise_r+0x14>
 8009bb6:	2316      	movs	r3, #22
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bc2:	b112      	cbz	r2, 8009bca <_raise_r+0x1e>
 8009bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bc8:	b94b      	cbnz	r3, 8009bde <_raise_r+0x32>
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f000 f840 	bl	8009c50 <_getpid_r>
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bda:	f000 b827 	b.w	8009c2c <_kill_r>
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d00a      	beq.n	8009bf8 <_raise_r+0x4c>
 8009be2:	1c59      	adds	r1, r3, #1
 8009be4:	d103      	bne.n	8009bee <_raise_r+0x42>
 8009be6:	2316      	movs	r3, #22
 8009be8:	6003      	str	r3, [r0, #0]
 8009bea:	2001      	movs	r0, #1
 8009bec:	e7e7      	b.n	8009bbe <_raise_r+0x12>
 8009bee:	2100      	movs	r1, #0
 8009bf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4798      	blx	r3
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e7e0      	b.n	8009bbe <_raise_r+0x12>

08009bfc <raise>:
 8009bfc:	4b02      	ldr	r3, [pc, #8]	@ (8009c08 <raise+0xc>)
 8009bfe:	4601      	mov	r1, r0
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	f7ff bfd3 	b.w	8009bac <_raise_r>
 8009c06:	bf00      	nop
 8009c08:	2000001c 	.word	0x2000001c

08009c0c <_isatty_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	@ (8009c28 <_isatty_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f8 f810 	bl	8001c3c <_isatty>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_isatty_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_isatty_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	200044f8 	.word	0x200044f8

08009c2c <_kill_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	@ (8009c4c <_kill_r+0x20>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f7f7 ff8f 	bl	8001b5c <_kill>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d102      	bne.n	8009c48 <_kill_r+0x1c>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b103      	cbz	r3, 8009c48 <_kill_r+0x1c>
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200044f8 	.word	0x200044f8

08009c50 <_getpid_r>:
 8009c50:	f7f7 bf7c 	b.w	8001b4c <_getpid>

08009c54 <_fstat_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4d07      	ldr	r5, [pc, #28]	@ (8009c74 <_fstat_r+0x20>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	4611      	mov	r1, r2
 8009c60:	602b      	str	r3, [r5, #0]
 8009c62:	f7f7 ffdb 	bl	8001c1c <_fstat>
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	d102      	bne.n	8009c70 <_fstat_r+0x1c>
 8009c6a:	682b      	ldr	r3, [r5, #0]
 8009c6c:	b103      	cbz	r3, 8009c70 <_fstat_r+0x1c>
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	200044f8 	.word	0x200044f8

08009c78 <_init>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr

08009c84 <_fini>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	bf00      	nop
 8009c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8a:	bc08      	pop	{r3}
 8009c8c:	469e      	mov	lr, r3
 8009c8e:	4770      	bx	lr
